{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///(webpack)/buildin/amd-options.js","webpack:///./node_modules/fluture/index.js","webpack:///./node_modules/typescript-collections/dist/lib/util.js","webpack:///./node_modules/sanctuary-show/index.js","webpack:///./node_modules/typescript-collections/dist/lib/Dictionary.js","webpack:///./node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/typescript-collections/dist/lib/arrays.js","webpack:///./node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary/index.js","webpack:///./node_modules/sodiumjs/dist/sodium.esm.js","webpack:///./node_modules/sanctuary/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/util/util.js","webpack:///./node_modules/sanctuary-either/index.js","webpack:///./src/app/utils/Utils.ts","webpack:///./node_modules/typescript-collections/dist/lib/index.js","webpack:///./node_modules/typescript-collections/dist/lib/LinkedList.js","webpack:///./src/app/worker/frp/World-Sinks-FRP.ts","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/partial.lenses/node_modules/infestines/dist/infestines.es.js","webpack:///./node_modules/partial.lenses/dist/partial.lenses.es.js","webpack:///./src/app/worker/frp/Ball-Sinks-FRP.ts","webpack:///./src/app/worker/actions/World-Actions.ts","webpack:///./node_modules/typescript-collections/dist/lib/FactoryDictionary.js","webpack:///./node_modules/typescript-collections/dist/lib/Heap.js","webpack:///./node_modules/typescript-collections/dist/lib/Queue.js","webpack:///./node_modules/typescript-collections/dist/lib/BSTreeKV.js","webpack:///./node_modules/typescript-collections/dist/lib/Set.js","webpack:///./src/app/utils/math/Quadratic.ts","webpack:///./src/app/types/Worker-Types.ts","webpack:///./node_modules/sanctuary-type-classes/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-pair/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-pair/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-pair/index.js","webpack:///./node_modules/sanctuary-maybe/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-maybe/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-maybe/index.js","webpack:///./node_modules/sanctuary/node_modules/sanctuary-type-classes/node_modules/sanctuary-type-identifiers/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/sanctuary-either/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-either/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary/node_modules/sanctuary-def/index.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///./node_modules/pure3d/dist/lib.esm.js","webpack:///./node_modules/fluture-loaders/dist/lib.esm.js","webpack:///./src/app/worker/frp/Time-FRP.ts","webpack:///./src/app/worker/frp/Ball-FRP.ts","webpack:///./src/app/worker/frp/World-FRP.ts","webpack:///./node_modules/typescript-collections/dist/lib/MultiRootTree.js","webpack:///./node_modules/typescript-collections/dist/lib/Stack.js","webpack:///./node_modules/typescript-collections/dist/lib/PriorityQueue.js","webpack:///./node_modules/typescript-collections/dist/lib/MultiDictionary.js","webpack:///./node_modules/typescript-collections/dist/lib/LinkedDictionary.js","webpack:///./node_modules/typescript-collections/dist/lib/BSTree.js","webpack:///./node_modules/typescript-collections/dist/lib/Bag.js","webpack:///./src/app/utils/math/Kinematic.ts","webpack:///./node_modules/concurrify/index.js","webpack:///./node_modules/denque/index.js","webpack:///./node_modules/inspect-f/index.js","webpack:///./src/app/utils/worker/Worker-Loader.ts","webpack:///./src/app/utils/flags/Flags.ts","webpack:///./node_modules/util/node_modules/inherits/inherits_browser.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./src/app/utils/sanctuary/Sanctuary-Instance.ts","webpack:///./src/app/utils/sanctuary/Sanctuary.ts","webpack:///./src/app/Worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","__webpack_amd_options__","global","factory","this","Z","inspectf","type","Denque","concurrify","scope","self","window","setImmediate","f","x","setTimeout","noop","moop","show","toString","showf","sf","replace","partial1","a","b","arguments","length","partial2","partial3","immediately","FL","ordinal","namespace","version","$$type","error","message","Error","typeError","TypeError","invalidArgument","it","at","expected","actual","invalidContext","invalidFuture","id","parse","info","isFunction","isThenable","Promise","Boolean","then","isUnsigned","Infinity","isObject","empty","isEmpty","size","head","tail","throwRejection","Future","computation","Computation","isFuture","other","_ap","mapper","_map","lmapper","rmapper","_bimap","_chain","ap","map","bimap","chain","mapRej","_mapRej","chainRej","_chainRej","race","_race","both","_both","and","_and","or","_or","swap","_swap","fold","_fold","finally","_finally","lastly","fork","rej","res","_fork","done","callback","promise","_this","isRejected","isResolved","isSettled","extractLeft","extractRight","Core","_computation","Rejected","_value","reject","Resolved","of","Never","_isNever","Sequence","open","cancel","left","right","never","isNever","Eager","future","rejected","resolved","Action","run","ApAction","MapAction","BimapAction","ChainAction","MapRejAction","ChainRejAction","SwapAction","FoldAction","FinallyAction","AndAction","OrAction","RaceAction","BothAction","RaceActionState","early","BothActionState","spawn","actions","_spawn","_actions","Next","Done","y","_transform","action","settled","cold","queue","async","settle","unshift","shift","warmupActions","terminator","clear","pop","str","Undetermined","Synchronous","Asynchronous","ChainRec","step","init","_step","_init","ap$mval","mval","mfunc","Apply","test","alt$left","Alt","alt","map$mapper","Functor","bimap$lmapper$rmapper","Bifunctor","bimap$lmapper","chain$chainer","chainer","Chain","mapRej$mapper","chainRej$chainer","lastly$right","and$left","both$left","or$left","race$right","fold$f$g","g","fold$f","done$callback","fork$f$g","fork$f","value$cont","cont","ParallelAp","_mval","_mfunc","After$race","_time","After","time","RejectAfter","after$time","rejectAfter$time","reason","Attempt","fn","_fn","attempt","timing","state","drain","func","val","c1","c2","okval","okfunc","ParallelAp$rej","clearTimeout","e","Cold","Cached","Pending","Rejected$1","Resolved$1","pure","_pure","reset","Encase","_a","Encase2","_b","Encase3","_c","EncaseN","EncaseN2","EncaseN$1","EncaseP","EncaseP2","EncaseP3","check$iteration","Go","generator","_generator","go","Hook","acquire","dispose","consume","_acquire","_dispose","_consume","hook$acquire$cleanup","cleanup","hook$acquire","Node","check$parallel","Parallel","max","futures","_futures","_length","_max","Math","min","_state","_addToQueue","_queue","push","_queued","_drainQueue","resolve","_cancel","err","iterator","next","check$iterator","cancelAcquire","resource","cancelConsume","Hook$done","Hook$dispose","disposal","Hook$cancelConsuption","Hook$consumptionRejected","Hook$consumptionResolved","consumption","cancels","Array","out","cursor","running","blocked","Parallel$cancel","Parallel$run","idx","Parallel$drain","emptyArray","parallel$max","xs","isArray","ys","TryP","assign","chainRec","Par","isParallel","zero","Fluture","freeze","seq","par","sequential","after","rejectAfter","try","cache","encase","encase2","encase3","z","encaseN","encaseN2","encaseN3","encaseP","encaseP2","encaseP3","do","hook","node","parallel","tryP","_hasOwnProperty","isUndefined","obj","isString","has","prop","defaultCompare","defaultEquals","defaultToString","item","makeString","join","toret","first","reverseCompareFunction","compareFunction","v","compareToEquals","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","u","apply","sanctuaryShow","$$show","seen","entry","k","indexOf","valueOf","JSON","stringify","isNaN","NaN","toISOString","concat","keys","sort","filter","constructor","String","util","Dictionary","toStrFunction","table","nElements","toStr","getValue","pair","setValue","ret","previousElement","remove","array","name_1","values","name_2","forEach","name_3","containsKey","sanctuaryTypeIdentifiers","pattern","RegExp","slice","groups","exec","Number","equalsFunction","equals","lastIndexOf","contains","index","splice","frequency","freq","array1","array2","copy","j","temp","_i","array_1","sanctuaryTypeClasses","__doctest","require","List","Maybe","Nil","Cons","Nothing","Just","concat_","constant","forEachKey","strMap","identity","sameType","iterationNext","iterationDone","TypeClass","url","dependencies","every","Constructor","Value","_funcPath","allowInheritedProps","path","_x","funcPath","implPath","implementations","functionName","match","$","_name","requirements","getBoundMethod","typeRep","typeClass","arg","methods","reduce","Setoid","Ord","lte","Semigroupoid","compose","Category","Semigroup","Monoid","Group","invert","Filterable","Profunctor","promap","Applicative","Monad","Plus","Alternative","Foldable","Traversable","traverse","Extend","extend","Comonad","extract","Contravariant","contramap","Array$of","Array$prototype$equals","Array$prototype$lte","Array$prototype$concat","Object$prototype$concat","result","Null","fantasy-land/equals","fantasy-land/lte","Undefined","Date","source","ignoreCase","multiline","sticky","unicode","fantasy-land/empty","fantasy-land/concat","fantasy-land/of","fantasy-land/chainRec","nil","todo","more","steps","fantasy-land/zero","reprs","fantasy-land/filter","pred","fantasy-land/map","fantasy-land/ap","fs","idx2","fantasy-land/chain","fantasy-land/alt","fantasy-land/reduce","initial","acc","fantasy-land/traverse","lift2","floor","fantasy-land/extend","_","Arguments","theseKeys","otherKeys","applicative","singleton","Function","fantasy-land/id","fantasy-land/compose","semigroupoid","functor","fantasy-land/promap","profunctor","fantasy-land/contramap","contravariant","$seen","method","xType","$pairs","some","lt","filterable","bifunctor","applyF","applyX","chain_","foldable","sortBy","rs","fx","lte_","F","traversable","extend_","gt","gte","group","flip","mapLeft","lift3","apFirst","apSecond","append","prepend","elem","foldMap","monoid","reverse","takeWhile","take","dropWhile","sequence","duplicate","comonad","sanctuary","sanctuaryDef","sanctuaryEither","sanctuaryMaybe","sanctuaryPair","Either","Pair","Descending","Sum","S","DescendingType","UnaryType","typeEq","B","checkTypes","env","Unknown","Type","Left","Right","C","Fn","get_","toObject","invoke0","target","invoke1","typeIdent","TypeVariable","UnaryTypeVariable","w","BinaryTypeVariable","$Either","BinaryType","either","K","$Maybe","maybe","$Pair","fst","snd","TypeRep","AnyFunction","_test","Options","RecordType","Any","opts","def","is","MaybeType","EitherType","PairType","consts","types","impl","unchecked","I","T","curry2","curry3","curry4","isJust","toMaybe","maybe_","thunk","justs","maybes","eitherToMaybe","encaseEither","isLeft","isRight","encaseEither2","encaseEither3","not","ifElse","unfoldr","zipWith","len","add","mult","requiredNonCapturingGroup","NonNegativeInteger","Predicate","curry5","pipe","pipeK","on","isNothing","fromMaybe","fromMaybe_","Thunk","maybeToNullable","Nullable","mapMaybe","maybeToEither","fromEither","toEither","lefts","rights","tagBy","complement","when","unless","allPass","preds","anyPass","Integer","start","end","fromIdx","toIdx","abs","last","takeLast","drop","dropLast","joinWith","find","range","from","to","groupBy","x0","active","zip","props","gets","StrMap","insert","pairs","fromPairs","negate","ValidNumber","FiniteNumber","sum","sub","product","div","NonZeroFiniteNumber","pow","exp","base","mean","total","count","even","odd","parseDate","ValidDate","date","validFloatRepr","parseFloat","Radix","NullaryType","parseInt","radix","charset","parseJson","Match","toMatch","ss","withRegex","lastIndex","regex","RegexFlags","flags","regexEscape","NonGlobalRegExp","matchAll","GlobalRegExp","toUpper","toLower","trim","stripPrefix","prefix","stripSuffix","suffix","words","split","unwords","lines","unlines","splitOn","splitOnRegex","process","NODE_ENV","BROADCAST","BUILD_VERSION","Array2","totalRegistrations","getTotalRegistrations","Color","Source","origin","register_","registered","deregister_","register","increment","decrement","deregister","black","gray","white","purple","roots","nextID","Vertex","rank","sources","targets","childrn","visited","color","buffered","refCountAdj","refCount","collectCycles","incRefCount","anyChanged","ensureBiggerThan","decRefCount","matched","addSource","src","limit","descr","colStr","chs","children","referrer","release","possibleRoots","free","collectingCycles","markRoots","scanRoots","collectRoots","newRoots","markGray","scan","collectWhite","scanBlack","NULL","Lambda1","deps","lambda1","Lambda1_deps","Lambda1_toFunction","Lambda2","lambda2","Lambda2_deps","Lambda2_toFunction","Lambda3","lambda3","Lambda3_deps","Lambda3_toFunction","Lambda4","lambda4","Lambda4_deps","Lambda4_toFunction","Lambda5","lambda5","Lambda5_deps","Lambda5_toFunction","Lambda6","lambda6","Lambda6_deps","Lambda6_toFunction","toSources","dep","getVertex__","extendStatics","setPrototypeOf","__proto__","__extends","__","Entry","nextSeq","Transaction","inCallback","toRegen","prioritizedQ","typescript_collections__WEBPACK_IMPORTED_MODULE_0__","PriorityQueue","entries","Set","sampleQ","lastQ","postQ","requestRegen","prioritized","enqueue","sample","h","post","childIx","existing","neu","checkRegen","es","toArray","isActive","currentTransaction","close","dequeue","sq","parent_1","onStart","onStartHooks","transWas","runningOnStartHooks","CoalesceHandler","accumValid","send_","accum","Lazy","lift","lift4","Unit","UNIT","Operational","updates","getStream__","sSpark","StreamWithSend","sInitial","snapshot1","orElse","defer","setVertex__","listen_","as","_loop_1","LazySample","cell","hasValue","ApplyState","f_present","a_present","Cell","initValue","setStream","Stream","vertex","me","valueUpdate","lazyInitValue","sampleNoTrans__","sampleLazy","sampleLazyNoTrans__","holdLazy","fn0","cf","aa","bb","cc","dd","lift5","ee","lift6","ff","ca","cf_value","ca_value","src1","src2","coalesce__","switchC","cca","za","ba","last_ca","cca_value","kill2","kill1","switchS","csa","h2","sa","listen","Listener","LazyCell","_super","listeners","firings","mapTo","merge","merge_","coalescer","filterNotNull","gate","snapshot","f_","snapshot3","snapshot4","snapshot5","snapshot6","hold","collect","initState","collectLazy","ea","StreamLoop","ebs","eb","bs","es_out","loop","accumLazy","once","suppressEarlierFirings","listener","firings_1","removed","sanctuary_type_classes__WEBPACK_IMPORTED_MODULE_1__","assigned__","sa_out","StreamSink","send","CellLoop","a_out","CellSink","Tuple2","TimerSystemImpl","Event","sAlarm","TimerSystem","eventQueue","BSTree","tMinimum","timeSnk","now","ev","mev","minimum","tAlarm","current","cancelCurrent","tAl","sampled","updateTimer","setTimer","kill","oAlarm","SecondsTimerSystem","SecondsTimerSystemImpl","timeout","MillisecondsTimerSystem","MillisecondsTimerSystemImpl","IOAction","fromAsync","performIO","formatRegExp","format","objects","inspect","args","isNull","deprecate","msg","noDeprecation","warned","throwDeprecation","traceDeprecation","console","trace","debugEnviron","debugs","ctx","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","primitive","simple","isNumber","visibleKeys","hash","getOwnPropertyNames","isError","formatError","isRegExp","isDate","output","braces","toUTCString","formatProperty","prev","cur","desc","getOwnPropertyDescriptor","set","line","substr","ar","re","objectToString","pad","debuglog","NODE_DEBUG","toUpperCase","pid","bold","italic","underline","inverse","grey","blue","cyan","green","magenta","red","yellow","special","number","boolean","undefined","null","string","regexp","isNullOrUndefined","isSymbol","isPrimitive","isBuffer","months","log","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","Left$prototype","@@show","Left$prototype$show","fantasy-land/bimap","Right$prototype","Right$prototype$show","custom","Left$prototype$equals","Left$prototype$lte","Left$prototype$concat","Right$prototype$equals","Right$prototype$lte","Right$prototype$concat","tag","__export","_arrays","arrays","Bag_1","Bag","BSTree_1","BSTreeKV_1","BSTreeKV","Dictionary_1","Heap_1","Heap","LinkedDictionary_1","LinkedDictionary","LinkedList_1","LinkedList","MultiDictionary_1","MultiDictionary","FactoryDictionary_1","FactoryDictionary","FactoryDictionary_2","DefaultDictionary","Queue_1","Queue","PriorityQueue_1","Set_1","Stack_1","Stack","MultiRootTree_1","MultiRootTree","_util","firstNode","lastNode","newNode","createNode","nodeAtIndex","element","elementAtIndex","equalsF","currentNode","previous","eqF","equalsAux","n1","n2","removeElementAtIndex","sodiumjs_1","sWorldUpdate","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","Item","nextTick","title","browser","argv","versions","addListener","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","copyName","withName","ary1of2","x1","ary2of2","ary1of3","x2","curryN","ary2of3","ary3of3","ary1of1","infestines_es_C","x3","curry","arityN","infestines_es_assign","always","applyU","x2y","sndU","array0","object0","isDefined","hasU","prototypeOf","getPrototypeOf","constructorOf","identicalU","acyclicEqualsObject","bk","acyclicEqualsU","addU","multiplyU","multiply","divideBy","isInstanceOf","Class","protoless0","id$1","setName","partial_lenses_es_copyName","partial_lenses_es_toRegExpU","partial_lenses_es_chainAsync","xyP","xP","sliceIndex","cpair","unto","unto0","notPartial","singletonPartial","expect","partial_lenses_es_isArrayOrPrimitive","rev","partial_lenses_es_seemsArrayLike","mapPartialIndexU","xi2y","skip","same","mapIfArrayLike","copyToFrom","selectInArrayLike","xi2v","Select","partial_lenses_es_ConcatOf","partial_lenses_es_mumBy","ord","minX","minY","traverseU","xi2yC","toFunction","partial_lenses_es_mkTraverse","toC","consExcept","consTo","traversePartialIndex","A","xi2yA","xsA","cons","_i2","lensFrom","xi2yF","getProp","setProp","funProp","getIndex","setIndex","_ys","_j","_j2","funIndex","composedMiddle","composed","oi0","os","_last","_first","setU","modifyComposed","Identity","modifyU","xi2x","modifyAsyncU","IdentityAsync","makeIx","ix","getNestedU","Constant","getU","_o","lensU","isoU","bwd","fwd","partial_lenses_es_stringIsoU","partial_lenses_es_numberIsoU","getPick","template","setPick","toObject$1","_F","branchAssemble","ks","branchOr1LevelIdentity","otherwise","k2o","xO","written","_x2","_k","_x3","_y","partial_lenses_es_branchOr1Level","_k3","_k4","_k2","_y2","partial_lenses_es_replaced","inn","partitionIntoIndex","xi2b","ts","reValue","reIndex","reLastIndex","reNext","input","iterCollect","keyed","disjointBwd","groupOf","disjointFwd","eitherU","orElseU","back","prim","isDefined$1","zeroOp","elemsI","seq2U","M","xi2yM","pickInAux","partial_lenses_es_pickIn","condOfDefault","condOfCase","wi2x","assign$1","partial_lenses_es_propsOf","modify","modifyAsync","partial_lenses_es_set","transform","transformAsync","flat","partial_lenses_es_flatten","lazy","o2o","_memo","rec","choices","_len","_key","reduceRight","choose","xiM2o","cond","partial_lenses_es_condOf","op","iftes","_t","xi2yO","xM","choice","_len4","_key4","optional","assignOp","setOp","modifyOp","removeOp","partial_lenses_es_seq","branchOr","branchOrU","branch","branches","elems","elemsTotal","keys$1","partial_lenses_es_matches","m0","matchesIn","matches","matchesJoin","partial_lenses_es_values","partial_lenses_es_children","query","satisfying","leafs","partial_lenses_es_all","and$1","any","collectAs","results","concatAs","countIf","countsAs","xi2k","counts","Map","foldl","foldr","forEachWith","newC","ef$$1","partial_lenses_es_isEmpty","joinAs","maximumBy","maximum","meanAs","num","minimumBy","none","or$1","productAs","selectAs","partial_lenses_es_select","sumAs","lens","setter","foldTraversalLens","traversal","defaults","o2u","define","untoV","normalize","reread","rewrite","required","replace$1","yi2y","partial_lenses_es_filter","tsN","fsN","xih2b","hint","findWith","oo","maybeArray","begin","xsi2yF","seems","xsN","zs","zsN","bPzsN","pick","vs","unzipObjIntoU","removable","_len5","ps","_key5","valueOr","o2i","getInverse","iso","mapFwd","partial_lenses_es_is","indexed","xis","xi","_i3","partial_lenses_es_singleton","disjoint","uri","decodeURI","encodeURI","uriComponent","decodeURIComponent","encodeURIComponent","partial_lenses_es_json","options","_ref","reviver","replacer","space","text","dropPrefix","pfx","startsWith","dropSuffix","sfx","endsWith","replaces","partial_lenses_es_split","sep","partial_lenses_es_uncouple","kv","add$1","divide","multiply$1","negate$1","subtract","pointer","sBallStart_Sink","sBallStop_Sink","L","pure3d_1","Utils_1","setCamera","camera","world","mapScenes","setBallTranslationY","updateTransforms","scene","gltf_updateNodeTransforms","updateLocal","updateModel","updateView","nodes","scenes","defaultFactoryFunction","setDefault","defaultValue","currentValue","collections","data","compare","leftChildIndex","nodeIndex","rightChildIndex","parentIndex","minIndex","leftChild","rightChild","siftUp","parent","siftDown","peek","removeRoot","equF","list","el","root","insertNode","searchNode","search","removeNode","inorderTraversal","inorderTraversalAux","stop","preorderTraversal","preorderTraversalAux","postorderTraversal","postorderTraversalAux","levelTraversal","levelTraversalAux","minimumAux","maximumAux","height","heightAux","cmp","leftCh","rightCh","transplant","signal","position","toStringFunction","dictionary","intersection","otherSet","union","difference","isSubsetOf","isSub","Quadratic","root_part","sqrt","denom","WorkerCommands","TICK","RENDER","READY","INIT","WORLD_START","BALL_START","BALL_STOP","Pair$prototype$show","fantasy-land/extract","Pair$prototype$equals","Pair$prototype$lte","Pair$prototype$concat","Pair$prototype$ap","Pair$prototype$chain","Nothing$prototype","Nothing$prototype$show","Just$prototype","Just$prototype$show","just","Just$prototype$equals","Just$prototype$lte","Just$prototype$concat","eval","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","always2","isPrefix","candidate","separator","memberOf","strRepeat","times","sortedKeys","stripOutermostParens","toMarkdownList","trimTrailingSpaces","bool","wrap","parenthesize","q","stripNamespace","_Type","validate","propPath","extractor","BINARY","FUNCTION","INCONSISTENT","NO_ARGUMENTS","NULLARY","RECORD","UNARY","UNKNOWN","VARIABLE","Inconsistent","NoArguments","typeofEq","typeof_","functionUrl","NullaryTypeWithUrl","UnaryTypeWithUrl","_1","Array_","Array0","Array1","_2","Boolean_","Date_","Error_","isFinite","augmentThunk","Function_","_types","$keys","$types","outer","inner","RegExp_","HtmlElement","NegativeFiniteNumber","NegativeInteger","NegativeNumber","Number_","NonEmpty","NonZeroInteger","NonZeroValidNumber","nullable","Object_","PositiveFiniteNumber","PositiveInteger","PositiveNumber","members","EnumType","String_","Symbol_","Unchecked","_create","numbers","numArgs","expandUnknown","_determineActualTypes","seen$","fromUnaryType","$1","xprod","$2","isConsistent","determineActualTypesLoose","updateTypeVarMap","typeVarMap","typeVar","$typeVarMap","typeVarName","$entry","valuesByPath","isNullaryTypeVar","isValid","expandUnknownStrict","satisfactoryTypes","typeInfo","expType","recur","invalidValue","constraints","typeClasses","typeClassConstraintViolation","typeVarMap$","okTypes","typeVarConstraintViolation","offset","$1s","$2s","CheckedNullaryType","CheckedUnaryType","CheckedBinaryType","specialize","CheckedEnumType","fields","missing","CheckedRecordType","CheckedTypeVariable","CheckedUnaryTypeVariable","CheckedBinaryTypeVariable","invalidArgumentsCount","numArgsExpected","index_","constraintsRepr","$reprs","typeVarNames","showTypeWith","names","code","charCodeAt","fromCharCode","showTypeQuoted","showValuesAndTypes","pos","showType","typeSignature","arity","_underline","formatType3","underlineConstraint","formatType5","st","formatType4","label","delta","ceil","counter","carets","repr","parenthesized","resolvePropPath","formatType6","indexedPropPath","propPath_","indexedPropPath_","see","record","tvn","tc","values_","underlinedTypeVars","paths","$valuesByPath","assertRight","withTypeChecking","wrapFunctionCond","_typeVarMap","checkValue","wrapped","wrapNext","_values","expTypes","fromUncheckedUnaryType","typeConstructor","EPSILON","ARRAY_TYPE","Float32Array","RANDOM","random","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","a01","a02","a03","a12","a13","a23","mat4_invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4_adjoint","mat4_determinant","mat4_multiply","b0","b1","b2","b3","mat4_translate","mat4_scale","mat4_rotate","rad","axis","b12","b20","b21","b22","sin","cos","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","yx","zx","zy","frustum","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","PI","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","scale","mat4_exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","dist","sqrDist","vec3_len","sqrLen","vec","stride","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","vec4_random","vectorScale","v1","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","iy","iz","iw","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","GltfAnimationTargetPath","GltfAnimationInterpolation","GltfMaterialAlphaMode","GltfNodeKind","GltfPrimitiveDrawKind","isNil","fetchImage","crossOrigin","fluture","img","Image","addEventListener","URL","webkitURL","location","sameOrigin","__assign","fletch","endpoint","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","requestType","responseType","withCredentials","headers","setRequestHeader","abort","XhrLoader","response","_fetchOverride","_fetchUrlOverride","fetchArrayBufferUrl","fetchJsonUrl","BlobLoader","read","blob","fileReader","FileReader","onload","onerror","readAsArrayBuffer","readAsDataURL","readAsText","TRANSLATION","ROTATION","SCALE","WEIGHTS","LINEAR","STEP","CUBICSPLINE","OPAQUE","MASK","BLEND","MESH","SKIN","ELEMENTS","ARRAY","GltfIblExtensionName","GltfLightsExtensionName","GltfUnlitExtensionName","CameraKind","NodeKind","LightKind","WebGlConstants","PERSPECTIVE","ORTHOGRAPHIC","CAMERA","LIGHT","Ambient","Directional","Point","Spot","ACTIVE_ATTRIBUTES","ACTIVE_ATTRIBUTE_MAX_LENGTH","ACTIVE_TEXTURE","ACTIVE_UNIFORMS","ACTIVE_UNIFORM_MAX_LENGTH","ALIASED_LINE_WIDTH_RANGE","ALIASED_POINT_SIZE_RANGE","ALPHA","ALPHA_BITS","ALWAYS","ARRAY_BUFFER","ARRAY_BUFFER_BINDING","ATTACHED_SHADERS","BACK","BLEND_COLOR","BLEND_DST_ALPHA","BLEND_DST_RGB","BLEND_EQUATION","BLEND_EQUATION_ALPHA","BLEND_EQUATION_RGB","BLEND_SRC_ALPHA","BLEND_SRC_RGB","BLUE_BITS","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","BROWSER_DEFAULT_WEBGL","BUFFER_SIZE","BUFFER_USAGE","BYTE","CCW","CLAMP_TO_EDGE","COLOR_ATTACHMENT0","COLOR_BUFFER_BIT","COLOR_CLEAR_VALUE","COLOR_WRITEMASK","COMPILE_STATUS","COMPRESSED_TEXTURE_FORMATS","CONSTANT_ALPHA","CONSTANT_COLOR","CONTEXT_LOST_WEBGL","CULL_FACE","CULL_FACE_MODE","CURRENT_PROGRAM","CURRENT_VERTEX_ATTRIB","CW","DECR","DECR_WRAP","DELETE_STATUS","DEPTH_ATTACHMENT","DEPTH_BITS","DEPTH_BUFFER_BIT","DEPTH_CLEAR_VALUE","DEPTH_COMPONENT","DEPTH_COMPONENT16","DEPTH_FUNC","DEPTH_RANGE","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","DEPTH_TEST","DEPTH_WRITEMASK","DITHER","DONT_CARE","DST_ALPHA","DST_COLOR","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER_BINDING","EQUAL","FASTEST","FLOAT","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","FRAGMENT_SHADER","FRAMEBUFFER","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_BINDING","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_UNSUPPORTED","FRONT","FRONT_AND_BACK","FRONT_FACE","FUNC_ADD","FUNC_REVERSE_SUBTRACT","FUNC_SUBTRACT","GENERATE_MIPMAP_HINT","GEQUAL","GREATER","GREEN_BITS","HIGH_FLOAT","HIGH_INT","INCR","INCR_WRAP","INFO_LOG_LENGTH","INT","INT_VEC2","INT_VEC3","INT_VEC4","INVALID_ENUM","INVALID_FRAMEBUFFER_OPERATION","INVALID_OPERATION","INVALID_VALUE","INVERT","KEEP","LEQUAL","LESS","LINEAR_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINES","LINE_LOOP","LINE_STRIP","LINE_WIDTH","LINK_STATUS","LOW_FLOAT","LOW_INT","LUMINANCE","LUMINANCE_ALPHA","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_RENDERBUFFER_SIZE","MAX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_VARYING_VECTORS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VIEWPORT_DIMS","MEDIUM_FLOAT","MEDIUM_INT","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","NEVER","NICEST","NONE","NOTEQUAL","NO_ERROR","NUM_COMPRESSED_TEXTURE_FORMATS","ONE","ONE_MINUS_CONSTANT_ALPHA","ONE_MINUS_CONSTANT_COLOR","ONE_MINUS_DST_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_SRC_COLOR","OUT_OF_MEMORY","PACK_ALIGNMENT","POINTS","POLYGON_OFFSET_FACTOR","POLYGON_OFFSET_FILL","POLYGON_OFFSET_UNITS","RED_BITS","RENDERBUFFER","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_BINDING","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","RENDERBUFFER_RED_SIZE","RENDERBUFFER_STENCIL_SIZE","RENDERBUFFER_WIDTH","RENDERER","REPEAT","REPLACE","RGB","RGB5_A1","RGB565","RGBA","RGBA4","SAMPLER_2D","SAMPLER_CUBE","SAMPLES","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_BUFFERS","SAMPLE_COVERAGE","SAMPLE_COVERAGE_INVERT","SAMPLE_COVERAGE_VALUE","SCISSOR_BOX","SCISSOR_TEST","SHADER_COMPILER","SHADER_SOURCE_LENGTH","SHADER_TYPE","SHADING_LANGUAGE_VERSION","SHORT","SRC_ALPHA","SRC_ALPHA_SATURATE","SRC_COLOR","STATIC_DRAW","STENCIL_ATTACHMENT","STENCIL_BACK_FAIL","STENCIL_BACK_FUNC","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","STENCIL_BACK_WRITEMASK","STENCIL_BITS","STENCIL_BUFFER_BIT","STENCIL_CLEAR_VALUE","STENCIL_FAIL","STENCIL_FUNC","STENCIL_INDEX","STENCIL_INDEX8","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_REF","STENCIL_TEST","STENCIL_VALUE_MASK","STENCIL_WRITEMASK","STREAM_DRAW","SUBPIXEL_BITS","TEXTURE","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","TEXTURE4","TEXTURE5","TEXTURE6","TEXTURE7","TEXTURE8","TEXTURE9","TEXTURE10","TEXTURE11","TEXTURE12","TEXTURE13","TEXTURE14","TEXTURE15","TEXTURE16","TEXTURE17","TEXTURE18","TEXTURE19","TEXTURE20","TEXTURE21","TEXTURE22","TEXTURE23","TEXTURE24","TEXTURE25","TEXTURE26","TEXTURE27","TEXTURE28","TEXTURE29","TEXTURE30","TEXTURE31","TEXTURE_2D","TEXTURE_BINDING_2D","TEXTURE_BINDING_CUBE_MAP","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TRIANGLES","TRIANGLE_FAN","TRIANGLE_STRIP","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNSIGNED_BYTE","UNSIGNED_INT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","VALIDATE_STATUS","VENDOR","VERSION","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_NORMALIZED","VERTEX_ATTRIB_ARRAY_POINTER","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_SHADER","VIEWPORT","ZERO","createVec2","Float64Array","createVec4","createVec3","createMat4","createQuat","createIdentityMat4","mat4_namespaceObject","getTrsFromMatrix","matrix","scaledMatrix","rotation","getMatrixFromTrs","trs","getModelMatrix","parentModelMatrix","localMatrix","getNormalMatrix","modelMatrix","transpose","getViewMatrices","modelViewMatrix","modelViewProjectionMatrix","projection","updateTransform","normalMatrix","getCameraProjection","cam","kind","xmag","ymag","znear","zfar","aspectRatio","yfov","getCameraView","getCameraPosition","updateCameraWithTransform","filterNodeDeep","filterNodesDeep","forEachNode","forEachNodes","countNodes","findNode","nodesOrNode","targetNode","mapNode","mapNodeWithParent","mapNodesWithParent","mapNodes","updateNodeTransforms","_parent","_node","pModelMatrix","updateNodeListTransforms","createPointLight","interpolate_linear","v0","xs0","xs1","vec2_namespaceObject","vec3_namespaceObject","vec4_namespaceObject","findKeyframeBounds","arr","_withinBounds","pValue","nValue","_binarySearch","mid","GLTF_PARSE_ACCESSOR_TYPE_SIZE","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","GLTF_PARSE_COMPONENT_BYTE_SIZE","[object Object]","getComponentTypedData","buffer","componentType","Int8Array","Uint8Array","Int16Array","Uint16Array","Uint32Array","getTypedDataFromInfo","buffers","bufferViewIndex","ArrayBuffer","bufferLength","bufferIndex","byteOffset","GLTF_PARSE_getAccessorTypedData","gltf","sparse","typeCount","accessorType","sparseIndices","indices","sparseValues","indexOfValue","valueIndex","GLTF_PARSE_getAccessorDataInfo","accessorId","accessor","accessors","byteLength","bufferView","bufferViews","byteStride","GLTF_PARSE_animationPathToString","GLTF_PARSE_animationStringToPath","weights","GLTF_PARSE_interpolationLookup","linear","cubicspline","gltf_setAnimationTime","animation","bounds","keyframes","k0","k1","interpolation","targetPath","quat_namespaceObject","morphWeights","gltf_createAnimator","animations","totalTimes","lastTs","dt","nextTime","timeMax","timeMin","animationIds","GLTF_PARSE_attributeNames","HAS_PREPPED","prepWebGlRenderer","renderer","extras","aName","attributes","globalLocations","getExtension","createTextureSwitcher","gl","activeTextureMap","_switchTexture","samplerIndex","texture","cacheInfo","activeTexture","bindTexture","switchTexture","switchCubeTexture","createTextureFromTarget","createTexture","bindTarget","dataSize","setParameters","mipLevel","Element","texImage2D","width","createCubeTextureFromTarget","mipTarget","faceTarget","textureSetterSimple","_opts","isPowerOf2","flipY","pixelStorei","useMips","generateMipmap","texParameteri","wrapS","wrapT","filterMin","filterMag","createSimpleTextureFromTarget","alpha","nextHighestPowerOfTwo","defaultSampler","getBasePath","idx1","getIblConfig","extensionsUsed","extensions","getConfig","lights","getLight","originalLight","light","ambient","directional","point","spot","intensity","innerConeAngle","outerConeAngle","GltfExtensions","loadAssets","coreData","config","jsonData","basePath","imageUrls","brdf","cubeMaps","cubeMapName","urls","imageFutures","ldrs","ldr","imageMap","ibl","createData","assets","colorSpace","useLod","images","faces","mipLevels","faceIndex","createScene","originalScene","settings","originalNode","initialShaderConfig","shaderConfig","runtimeShaderConfig","shaderSource","defines","defineString","fragment","sceneConfig","nodeConfig","nPointLights","nDirectionalLights","nSpotLights","hasAmbient","warn","GLTF_PARSE_LoadDataAssets","glbBuffers","ext","image","mimeType","arrayBufferView","Blob","urlCreator","createObjectURL","bufferViewId","bufferId","loadImages","imageElements","GLTF_PARSE_CreateData","textures","textureMap","textureId","sampler","samplers","defaultColorSpace","materials","material","emissiveTexture","normalTexture","occlusionTexture","pbrMetallicRoughness","baseColorTexture","metallicRoughnessTexture","display","check","naturalWidth","naturalHeight","canvas","document","createElement","getContext","drawImage","wTexture","GLTF_PARSE_createTextures","bufferViewInfo","accessorLookup","indicesList","meshes","mesh","primitives","isElements","strategy","normalized","rendererBufferId","bvInfo","usagePattern","vaoIdLookup","GLTF_PARSE_createAttributes","animationId","channels","channel","toLowerCase","timeAccessor","timings","valuesAccessor","subarray","shaders","original","initConfig","utf8ArrayToStr","charCache","charFromCodePt","fromCodePoint","codePt","byte1","buffLen","getJsonFromArrayBuffer","aBuffer","bytes","TextDecoder","decode","getChunk","dv","DataView","chunkLength","getUint32","chunkType","chunkStart","chunkEnd","chunkData","GLTF_PARSE_getOriginalFromArrayBuffer","magic","GLTF_PARSE_isBinaryFile","gltfEndOffset","bin","endOffset","_vaoIdCounter","attributeShaderNameLookup","POSITION","NORMAL","TANGENT","TEXCOORD_0","COLOR_0","JOINTS_0","WEIGHTS_0","GLTF_PARSE_sortPrimitiveAttributeKeys","ORDER","oa","ob","GLTF_PARSE_getPrimitiveAttributeKeys","originalPrimitive","UNIFORM_TYPE","createUniforms","activateShader","uniformLocations","uniformValues","uniformSingleValues","uniformMatrixTranspose","getLocation","uName","program","getUniformLocation","validLocation","loc","_isEqual","_assignCacheValues","uType","Int32Array","_setSingleValue","setterFn","_setValues","_setMatrixValues","setters","uniform1f","uniform1fv","uniform1i","uniform1iv","uniform2f","uniform2fv","uniform2i","uniform2iv","uniform3f","uniform3fv","uniform3i","uniform3iv","uniform4f","uniform4fv","uniform4i","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","hasLocation","_activateShader","shaderId","useProgram","createShader","vShader","fShader","createProgram","WebGLShader","deleteShader","deleteProgram","loadShader","shaderType","sourceText","shader","compileShader","getShaderParameter","errorMessage","getShaderInfoLog","attachShader","bindAttribLocation","linkProgram","getProgramParameter","getProgramInfoLog","_compileShader","uniforms","baseArray","morphsArray","skinArray","lightsArray","hashBooleans32","updateRuntimeShaderConfig","getCoreRuntimeShaderConfig","getShaderSource","originalMeshId","originalPrimitiveId","hasNormalAttributes","hasTangentAttributes","hasUvAttributes","hasColorAttributes","hasBaseColorMap","hasNormalMap","hasEmissiveMap","hasMetalRoughnessMap","hasOcclusionMap","manualSRGB","fastSRGB","nSkinJoints","alphaMode","originalNodeId","shaderMorphVarLookup","MORPH_VARS","MORPH_FUNCS","morphIndex","weightIndex","aMorph","SKIN_JOINT_COUNT","skin","skins","joints","getCoreVertexShader","getCoreFragmentShader","GLTF_PARSE_createPrimitives","meshPrimitives","nodeId","primitiveIdx","vaoId","vao","elementBufferId","attributeKey","attributeName","getLocationInRenderer","sym","vertexArrays","_primitive","drawKind","drawMode","elementsId","attributeKeys","arrayCount","materialId","_m","metallicRoughnessValues","baseColorFactor","metallicFactor","roughnessFactor","baseColorSamplerIndex","metallicRoughnessSamplerIndex","normal","strength","occlusion","emissiveSamplerIndex","emissiveFactor","doubleSided","alphaCutoff","hasAttribute","attr","nMorphWeights","nPositionMorphs","nNormalMorphs","nTangentMorphs","getCoreInitialShaderConfig","GLTF_PARSE_getNodes","skinLookup","originalSkin","skinId","inverseBindMatrices","skeletonRootId","skinData","joint","inverseBindMatrix","skeleton","GLTF_PARSE_createSkins","getGltfNode","baseNode","nodeTrsProp","originalCamera","orthographic","cameras","cameraIndex","finalNode","renderScene","shaderGroupByAlpha","renderThunksByShader","meshList","lightList","skinMatrices","shaderHash","unlit","shaderKey","generateShader","shaderGroup","glToggle","diffuse","specular","scaleDiffBaseMR","scaleFGDSpec","scaleIBLAmbient","lightNode","assignMeshTexture","textureInfo","activate","elementsAccessor","drawElements","drawArrays","glDepthFunc","glBlendFunc","render","_render","shaderGroups","gltf_load","bridge","_allNodes","_data","updateShaderConfigs","getAllNodes","getData","getOriginalScene","sceneNumber","sceneList","getCameraNode","loadFile","gltf_serializeScene","gltf_parseScene","gltf_updatePrimitiveShaderConfig","updatedNodes","gltf_setJointTransforms","gltf_findNodeById","nodeOrNodes","fullTree","jointList","getJointList","getSkeletonRootTransform","inverseRootMatrix","jMat","meshNode","jointIds","delete","createAttributes","currentBuffer","currentTarget","_perShaderCache","_globalCache","activateElements","bindBuffer","getLocationInShader","getAttribLocation","activateData","vertexAttribPointer","enableVertexAttribArray","createWebGlBuffers","infoMap","bData","createBuffer","bufferData","makeFramebufferPicker","renderBuffer","createRenderbuffer","bindRenderbuffer","renderbufferStorage","frameBuffer","createFramebuffer","bindFramebuffer","framebufferTexture2D","framebufferRenderbuffer","unbind","readPixel","readout","readPixels","deleteFramebuffer","deleteRenderbuffer","deleteTexture","bits","createVertexArrays","_cache","currentSym","_bind","bindVertexArrayOES","bindVertexArray","_activate","force","createVertexArrayOES","createVertexArray","getVersionString","getParameter","_isNumber","chr","getMajorVersion","numberString","charAt","createWebGlRenderer","contextAttributes","_gl","lastScreenSize","flagMap","extensionMap","extName","depthFunc","_sFactor","_dFactor","textureSwitcher","resize","setAttribute","viewport","drawingBufferWidth","drawingBufferHeight","setting","flag","enable","disable","sFactor","dFactor","blendFunc","World_Sinks_FRP_1","sTick","frameTs","cMaybeTick","mapStreamTick","sSource","mTick","alarmUpdates","cTime","sSink","timerId","World_Actions_1","Time_FRP_1","Ball_Sinks_FRP_1","createBallFrp","cBall","cPhysicsLoop","sBounceAlarm","phys","nextBounceTime","cBounceAlarm","mBounceAlarm","mPhysics","bounceAlarm","createInitialPhysics","alarm","mPhys","onBounce","mBall","t0","getPosition","setLens","Kinematic3","Kinematic5","Kinematic4","Kinematic7","Ball_FRP_1","mergeUpdates","createWorldFrp","initialScenes","sPhysics","Direction","BEFORE","AFTER","INSIDE_AT_END","INSIDE_AT_START","rootIds","initRootIds","initNodes","rootId","createEmptyNodeIfNotExist","nodeKey","nodeListItem","getRootIds","getNodes","clone","getObject","flatten","extraPropsObject","level","hasParent","childrenCount","extraPropsObject_1","countChildren","startId","returnArray","idsList","moveIdBeforeId","moveId","beforeId","moveIdAfterId","afterId","moveIdIntoId","insideId","atStart","swapRootIdWithRootId","withRootId","leftIndex","findRootId","rightIndex","swapRootPositionWithRootPosition","swapRootPosition","withRootPosition","deleteId","rootDeleteId","nodeAndSubNodesDelete","nodeRefrencesDelete","insertIdBeforeId","insertId","foundRootIdIndex","insertIdIntoRoot","foundNodeIdIndex","findNodeId","insertIdIntoNode","insertIdAfterId","belowId","insertIdIntoId","nodeInsertAtEnd","rootInsertAtEnd","length_1","length_2","direction","sourceId","sourceRootIndex","targetId","targetRootIndex","rootDelete","nodeInsertAtStart","nodeDeleteAtIndex","swapArrayElements","indexA","indexB","toDeleteLater","nodeDelete","rootInsertAtStart","heap","valuesEqualsFunction","allowDuplicateValues","dict","allowDuplicate","values_1","v_1","LinkedDictionaryPair","unlink","HeadOrTailLinkedDictionaryPair","isHeadOrTailLinkedDictionaryPair","appendToTail","getLinkedDictionaryPair","oldPair","newPair","existingPair","crawlNode","toStrF","nCopies","copies","toSet","elements_1","Quadratic_1","Kinematic1","Kinematic2","dx","vSquared","root1","root2","Kinematic6","isBinary","an","Repr","INNERTYPE","OUTERTYPE","identifier","INNERNAME","OUTERNAME","Concurrently","isInner","isOuter","construct","proto","mzero","_head","_tail","_capacityMask","_list","_fromArray","peekAt","peekFront","peekBack","_growArray","_shrinkArray","removeOne","del_count","arg_len","arguments_index","leng","_copyArray","fullCopy","newArray","RSPACE","RCODE","RTABS","REOL","isCode","getPadding","fixIndentation","indentation","paddings","tabsize","RPAD","shown","fluture_1","Worker_Types_1","MESSAGE","loadWorker","worker","onInitial","cmd","removeEventListener","postMessage","initWorker","getCompileFlags","buildMode","buildVersion","isProduction","ctor","superCtor","super_","writable","configurable","TempCtor","fill","readUInt8","sanctuary_1","World_FRP_1"],"mappings":"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","file":"7ae20c5dc406d88b3d54.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 62);\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('sanctuary-type-classes'), require('inspect-f'), require('sanctuary-type-identifiers'), require('denque'), require('concurrify')) :\n\ttypeof define === 'function' && define.amd ? define(['sanctuary-type-classes', 'inspect-f', 'sanctuary-type-identifiers', 'denque', 'concurrify'], factory) :\n\t(global.Fluture = factory(global.sanctuaryTypeClasses,global.inspectf,global.sanctuaryTypeIdentifiers,global.Denque,global.concurrify));\n}(this, (function (Z,inspectf,type,Denque,concurrify) { 'use strict';\n\nZ = Z && Z.hasOwnProperty('default') ? Z['default'] : Z;\ninspectf = inspectf && inspectf.hasOwnProperty('default') ? inspectf['default'] : inspectf;\ntype = type && type.hasOwnProperty('default') ? type['default'] : type;\nDenque = Denque && Denque.hasOwnProperty('default') ? Denque['default'] : Denque;\nconcurrify = concurrify && concurrify.hasOwnProperty('default') ? concurrify['default'] : concurrify;\n\n/* istanbul ignore file: environment-specific */\n\n/* eslint-disable no-undef */\nconst scope = typeof self === 'object' ? self :\n                     typeof global === 'object' ? global :\n                     typeof window === 'object' ? window :\n                     {};\n/* eslint-enable no-undef */\n\nconst setImmediate = typeof scope.setImmediate === 'function' ?\n                            scope.setImmediate :\n                            function setImmediate(f, x){ return setTimeout(f, 0, x) };\n\nfunction noop(){}\nfunction moop(){ return this }\nvar show = Z.toString;\nfunction padf(sf, s){ return s.replace(/^/gm, sf).replace(sf, '') }\nfunction showf(f){ return padf('  ', inspectf(2, f)) }\n\nfunction mapArray(xs, f){\n  var l = xs.length, ys = new Array(l);\n  for(var i = 0; i < l; i++) ys[i] = f(xs[i], i, xs);\n  return ys;\n}\n\nfunction partial1(f, a){\n  return function bound1(b, c, d){\n    switch(arguments.length){\n      case 1: return f(a, b);\n      case 2: return f(a, b, c);\n      default: return f(a, b, c, d);\n    }\n  };\n}\n\nfunction partial2(f, a, b){\n  return function bound2(c, d){\n    return arguments.length === 1 ? f(a, b, c) : f(a, b, c, d);\n  };\n}\n\nfunction partial3(f, a, b, c){\n  return function bound3(d){\n    return f(a, b, c, d);\n  };\n}\n\nfunction immediately(f){\n  return function immediate(x){ return setImmediate(f, x) };\n}\n\nvar FL = {\n  map: 'fantasy-land/map',\n  bimap: 'fantasy-land/bimap',\n  chain: 'fantasy-land/chain',\n  chainRec: 'fantasy-land/chainRec',\n  ap: 'fantasy-land/ap',\n  of: 'fantasy-land/of',\n  zero: 'fantasy-land/zero'\n};\n\nvar ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\nvar namespace = 'fluture';\nvar name = 'Future';\nvar version = 3;\n\nvar $$type = namespace + '/' + name + '@' + version;\n\nfunction error(message){\n  throw new Error(message);\n}\n\nfunction typeError(message){\n  throw new TypeError(message);\n}\n\nfunction invalidArgument(it, at, expected, actual){\n  typeError(\n    it + ' expects its ' + ordinal[at] + ' argument to ' + expected + '\\n  Actual: ' + show(actual)\n  );\n}\n\nfunction invalidContext(it, actual){\n  typeError(\n    it + ' was invoked outside the context of a Future. You might want to use'\n  + ' a dispatcher instead\\n  Called on: ' + (show(actual))\n  );\n}\n\nfunction invalidNamespace(m, x){\n  return (\n    'The Future was not created by ' + namespace + '. '\n  + 'Make sure you transform other Futures to ' + namespace + ' Futures. '\n  + 'Got ' + (x ? ('a Future from ' + x) : 'an unscoped Future') + '.'\n  + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n  );\n}\n\nfunction invalidVersion(m, x){\n  return (\n    'The Future was created by ' + (x < version ? 'an older' : 'a newer')\n  + ' version of ' + namespace + '. '\n  + 'This means that one of the sources which creates Futures is outdated. '\n  + 'Update this source, or transform its created Futures to be compatible.'\n  + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n  );\n}\n\nfunction invalidFuture(it, at, m, s){\n  var id = type.parse(type(m));\n  var info = id.name === name ? '\\n' + (\n    id.namespace !== namespace ? invalidNamespace(m, id.namespace)\n  : id.version !== version ? invalidVersion(m, id.version)\n  : 'Nothing seems wrong. Contact the Fluture maintainers.') : '';\n  typeError(\n    it + ' expects ' + (ordinal[at] ? 'its ' + ordinal[at] + ' argument to be a valid Future' : at)\n  + '.' + info + '\\n  Actual: ' + (show(m)) + ' :: ' + (id.name) + (s || '')\n  );\n}\n\nfunction isFunction(f){\n  return typeof f === 'function';\n}\n\nfunction isThenable(m){\n  return m instanceof Promise || Boolean(m) && isFunction(m.then);\n}\n\nfunction isBoolean(f){\n  return typeof f === 'boolean';\n}\n\nfunction isNumber(f){\n  return typeof f === 'number';\n}\n\nfunction isUnsigned(n){\n  return (n === Infinity || isNumber(n) && n > 0 && n % 1 === 0);\n}\n\nfunction isObject(o){\n  return o !== null && typeof o === 'object';\n}\n\nfunction isIterator(i){\n  return isObject(i) && isFunction(i.next);\n}\n\nfunction isArray(x){\n  return Array.isArray(x);\n}\n\n/*eslint no-cond-assign:0, no-constant-condition:0 */\n\nfunction interpreter(rej, res){\n\n  //This is the primary queue of actions. All actions in here will be \"cold\",\n  //meaning they haven't had the chance yet to run concurrent computations.\n  var cold = new Denque(this._actions.size);\n\n  //This is the secondary queue of actions. All actions in here will be \"hot\",\n  //meaning they have already had a chance to run a concurrent computation.\n  var queue = new Denque(this._actions.size);\n\n  //These combined variables define our current state.\n  // future  = the future we are currently forking\n  // action  = the action to be informed when the future settles\n  // cancel  = the cancel function of the current future\n  // settled = a boolean indicating whether a new tick should start\n  // async   = a boolean indicating whether we are awaiting a result asynchronously\n  var future, action, cancel = noop, settled, async = true, it;\n\n  //This function is called with a future to use in the next tick.\n  //Here we \"flatten\" the actions of another Sequence into our own actions,\n  //this is the magic that allows for infinitely stack safe recursion because\n  //actions like ChainAction will return a new Sequence.\n  //If we settled asynchronously, we call drain() directly to run the next tick.\n  function settle(m){\n    settled = true;\n    future = m;\n\n    if(future._spawn){\n      var tail = future._actions;\n\n      while(!tail.isEmpty){\n        cold.unshift(tail.head);\n        tail = tail.tail;\n      }\n\n      future = future._spawn;\n    }\n\n    if(async) drain();\n  }\n\n  //This function serves as a rejection handler for our current future.\n  //It will tell the current action that the future rejected, and it will\n  //settle the current tick with the action's answer to that.\n  function rejected(x){\n    settle(action.rejected(x));\n  }\n\n  //This function serves as a resolution handler for our current future.\n  //It will tell the current action that the future resolved, and it will\n  //settle the current tick with the action's answer to that.\n  function resolved(x){\n    settle(action.resolved(x));\n  }\n\n  //This function is passed into actions when they are \"warmed up\".\n  //If the action decides that it has its result, without the need to await\n  //anything else, then it can call this function to force \"early termination\".\n  //When early termination occurs, all actions which were queued prior to the\n  //terminator will be skipped. If they were already hot, they will also receive\n  //a cancel signal so they can cancel their own concurrent computations, as\n  //their results are no longer needed.\n  function early(m, terminator){\n    cancel();\n    cold.clear();\n\n    if(async && action !== terminator){\n      action.cancel();\n      while((it = queue.shift()) && it !== terminator) it.cancel();\n    }\n\n    settle(m);\n  }\n\n  //This function serves to kickstart concurrent computations.\n  //Takes all actions from the cold queue *back-to-front*, and calls run() on\n  //each of them, passing them the \"early\" function. If any of them settles (by\n  //calling early()), we abort. After warming up all actions in the cold queue,\n  //we warm up the current action as well.\n  function warmupActions(){\n    while(it = cold.pop()){\n      it = it.run(early);\n      if(settled) return;\n      queue.unshift(it);\n    }\n\n    action = action.run(early);\n  }\n\n  //This function represents our main execution loop.\n  //When we refer to a \"tick\", we mean the execution of the body inside the\n  //primary while-loop of this function.\n  //Every tick follows the following algorithm:\n  // 1. We try to take an action from the cold queue, if we fail, go to step 2.\n  //      1a. We fork the future.\n  //      1b. We warmupActions() if the we haven't settled yet.\n  // 2. We try to take an action from the hot queue, if we fail, go to step 3.\n  //      2a. We fork the Future, if settles, we continue to the next tick.\n  // 3. If we couldn't take actions from either queues, we fork the Future into\n  //    the user provided continuations. This is the end of the interpretation.\n  // 4. If we did take an action from one of queues, but none of the steps\n  //    caused a settle(), it means we are asynchronously waiting for something\n  //    to settle and start the next tick, so we return from the function.\n  function drain(){\n    async = false;\n\n    while(true){\n      settled = false;\n      if(action = cold.shift()){\n        cancel = future._fork(rejected, resolved);\n        if(!settled) warmupActions();\n      }else if(action = queue.shift()){\n        cancel = future._fork(rejected, resolved);\n      }else break;\n      if(settled) continue;\n      async = true;\n      return;\n    }\n\n    cancel = future._fork(rej, res);\n  }\n\n  //Start the execution loop.\n  settle(this);\n\n  //Return a cancellation function. It will cancel the current Future, the\n  //current action, and all queued hot actions.\n  return function Sequence$cancel(){\n    cancel();\n    action && action.cancel();\n    while(it = queue.shift()) it.cancel();\n  };\n\n}\n\nvar empty = ({isEmpty: true, size: 0, head: null, tail: null});\n\nfunction cons(head, tail){\n  return {isEmpty: false, size: tail.size + 1, head: head, tail: tail};\n}\n\nfunction throwRejection(x){\n  error('Future#value was called on a rejected Future\\n  Actual: Future.reject(' + show(x) + ')');\n}\n\nfunction Future(computation){\n  if(!isFunction(computation)) invalidArgument('Future', 0, 'be a Function', computation);\n  return new Computation(computation);\n}\n\nfunction isFuture(x){\n  return x instanceof Future || type(x) === $$type;\n}\n\nFuture['@@type'] = $$type;\n\nFuture.prototype[FL.ap] = function Future$FL$ap(other){\n  return other._ap(this);\n};\n\nFuture.prototype[FL.map] = function Future$FL$map(mapper){\n  return this._map(mapper);\n};\n\nFuture.prototype[FL.bimap] = function Future$FL$bimap(lmapper, rmapper){\n  return this._bimap(lmapper, rmapper);\n};\n\nFuture.prototype[FL.chain] = function Future$FL$chain(mapper){\n  return this._chain(mapper);\n};\n\nFuture.prototype.ap = function Future$ap(other){\n  if(!isFuture(this)) invalidContext('Future#ap', this);\n  if(!isFuture(other)) invalidFuture('Future#ap', 0, other);\n  return this._ap(other);\n};\n\nFuture.prototype.map = function Future$map(mapper){\n  if(!isFuture(this)) invalidContext('Future#map', this);\n  if(!isFunction(mapper)) invalidArgument('Future#map', 0, 'to be a Function', mapper);\n  return this._map(mapper);\n};\n\nFuture.prototype.bimap = function Future$bimap(lmapper, rmapper){\n  if(!isFuture(this)) invalidContext('Future#bimap', this);\n  if(!isFunction(lmapper)) invalidArgument('Future#bimap', 0, 'to be a Function', lmapper);\n  if(!isFunction(rmapper)) invalidArgument('Future#bimap', 1, 'to be a Function', rmapper);\n  return this._bimap(lmapper, rmapper);\n};\n\nFuture.prototype.chain = function Future$chain(mapper){\n  if(!isFuture(this)) invalidContext('Future#chain', this);\n  if(!isFunction(mapper)) invalidArgument('Future#chain', 0, 'to be a Function', mapper);\n  return this._chain(mapper);\n};\n\nFuture.prototype.mapRej = function Future$mapRej(mapper){\n  if(!isFuture(this)) invalidContext('Future#mapRej', this);\n  if(!isFunction(mapper)) invalidArgument('Future#mapRej', 0, 'to be a Function', mapper);\n  return this._mapRej(mapper);\n};\n\nFuture.prototype.chainRej = function Future$chainRej(mapper){\n  if(!isFuture(this)) invalidContext('Future#chainRej', this);\n  if(!isFunction(mapper)) invalidArgument('Future#chainRej', 0, 'to be a Function', mapper);\n  return this._chainRej(mapper);\n};\n\nFuture.prototype.race = function Future$race(other){\n  if(!isFuture(this)) invalidContext('Future#race', this);\n  if(!isFuture(other)) invalidFuture('Future#race', 0, other);\n  return this._race(other);\n};\n\nFuture.prototype.both = function Future$both(other){\n  if(!isFuture(this)) invalidContext('Future#both', this);\n  if(!isFuture(other)) invalidFuture('Future#both', 0, other);\n  return this._both(other);\n};\n\nFuture.prototype.and = function Future$and(other){\n  if(!isFuture(this)) invalidContext('Future#and', this);\n  if(!isFuture(other)) invalidFuture('Future#and', 0, other);\n  return this._and(other);\n};\n\nFuture.prototype.or = function Future$or(other){\n  if(!isFuture(this)) invalidContext('Future#or', this);\n  if(!isFuture(other)) invalidFuture('Future#or', 0, other);\n  return this._or(other);\n};\n\nFuture.prototype.swap = function Future$swap(){\n  if(!isFuture(this)) invalidContext('Future#ap', this);\n  return this._swap();\n};\n\nFuture.prototype.fold = function Future$fold(lmapper, rmapper){\n  if(!isFuture(this)) invalidContext('Future#ap', this);\n  if(!isFunction(lmapper)) invalidArgument('Future#fold', 0, 'to be a Function', lmapper);\n  if(!isFunction(rmapper)) invalidArgument('Future#fold', 1, 'to be a Function', rmapper);\n  return this._fold(lmapper, rmapper);\n};\n\nFuture.prototype.finally = function Future$finally(other){\n  if(!isFuture(this)) invalidContext('Future#finally', this);\n  if(!isFuture(other)) invalidFuture('Future#finally', 0, other);\n  return this._finally(other);\n};\n\nFuture.prototype.lastly = function Future$lastly(other){\n  if(!isFuture(this)) invalidContext('Future#lastly', this);\n  if(!isFuture(other)) invalidFuture('Future#lastly', 0, other);\n  return this._finally(other);\n};\n\nFuture.prototype.fork = function Future$fork(rej, res){\n  if(!isFuture(this)) invalidContext('Future#fork', this);\n  if(!isFunction(rej)) invalidArgument('Future#fork', 0, 'to be a Function', rej);\n  if(!isFunction(res)) invalidArgument('Future#fork', 0, 'to be a Function', res);\n  return this._fork(rej, res);\n};\n\nFuture.prototype.value = function Future$value(res){\n  if(!isFuture(this)) invalidContext('Future#value', this);\n  if(!isFunction(res)) invalidArgument('Future#value', 0, 'to be a Function', res);\n  return this._fork(throwRejection, res);\n};\n\nFuture.prototype.done = function Future$done(callback){\n  if(!isFuture(this)) invalidContext('Future#done', this);\n  if(!isFunction(callback)) invalidArgument('Future#done', 0, 'to be a Function', callback);\n  return this._fork(function Future$done$rej(x){ callback(x); },\n                    function Future$done$res(x){ callback(null, x); });\n};\n\nFuture.prototype.promise = function Future$promise(){\n  var _this = this;\n  return new Promise(function Future$promise$computation(res, rej){\n    _this._fork(rej, res);\n  });\n};\n\nFuture.prototype.isRejected = function Future$isRejected(){\n  return false;\n};\n\nFuture.prototype.isResolved = function Future$isResolved(){\n  return false;\n};\n\nFuture.prototype.isSettled = function Future$isSettled(){\n  return this.isRejected() || this.isResolved();\n};\n\nFuture.prototype.extractLeft = function Future$extractLeft(){\n  return [];\n};\n\nFuture.prototype.extractRight = function Future$extractRight(){\n  return [];\n};\n\nvar Core = Object.create(Future.prototype);\n\nCore._ap = function Core$ap(other){\n  return new Sequence(this)._ap(other);\n};\n\nCore._map = function Core$map(mapper){\n  return new Sequence(this)._map(mapper);\n};\n\nCore._bimap = function Core$bimap(lmapper, rmapper){\n  return new Sequence(this)._bimap(lmapper, rmapper);\n};\n\nCore._chain = function Core$chain(mapper){\n  return new Sequence(this)._chain(mapper);\n};\n\nCore._mapRej = function Core$mapRej(mapper){\n  return new Sequence(this)._mapRej(mapper);\n};\n\nCore._chainRej = function Core$chainRej(mapper){\n  return new Sequence(this)._chainRej(mapper);\n};\n\nCore._race = function Core$race(other){\n  return new Sequence(this)._race(other);\n};\n\nCore._both = function Core$both(other){\n  return new Sequence(this)._both(other);\n};\n\nCore._and = function Core$and(other){\n  return new Sequence(this)._and(other);\n};\n\nCore._or = function Core$or(other){\n  return new Sequence(this)._or(other);\n};\n\nCore._swap = function Core$swap(){\n  return new Sequence(this)._swap();\n};\n\nCore._fold = function Core$fold(lmapper, rmapper){\n  return new Sequence(this)._fold(lmapper, rmapper);\n};\n\nCore._finally = function Core$finally(other){\n  return new Sequence(this)._finally(other);\n};\n\nfunction check$fork(f, c){\n  if(!(f === undefined || (isFunction(f) && f.length === 0))) typeError(\n    'Future expected its computation to return a nullary function or void'\n    + '\\n  Actual: ' + show(f) + '\\n  From calling: ' + showf(c)\n  );\n}\n\nfunction Computation(computation){\n  this._computation = computation;\n}\n\nComputation.prototype = Object.create(Core);\n\nComputation.prototype._fork = function Computation$_fork(rej, res){\n  var open = true;\n  var cancel = this._computation(function Computation$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }, function Computation$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  });\n  check$fork(cancel, this._computation);\n\n  return function Computation$cancel(){\n    if(open){\n      open = false;\n      cancel && cancel();\n    }\n  };\n};\n\nComputation.prototype.toString = function Computation$toString(){\n  return 'Future(' + showf(this._computation) + ')';\n};\n\nfunction Rejected(value){\n  this._value = value;\n}\n\nRejected.prototype = Object.create(Core);\n\nRejected.prototype._ap = moop;\nRejected.prototype._map = moop;\nRejected.prototype._chain = moop;\nRejected.prototype._race = moop;\nRejected.prototype._both = moop;\nRejected.prototype._and = moop;\n\nRejected.prototype._or = function Rejected$or(other){\n  return other;\n};\n\nRejected.prototype._finally = function Rejected$finally(other){\n  return other._and(this);\n};\n\nRejected.prototype._swap = function Rejected$swap(){\n  return new Resolved(this._value);\n};\n\nRejected.prototype._fork = function Rejected$_fork(rej){\n  rej(this._value);\n  return noop;\n};\n\nRejected.prototype.isRejected = function Rejected$isRejected(){\n  return true;\n};\n\nRejected.prototype.extractLeft = function Rejected$extractLeft(){\n  return [this._value];\n};\n\nRejected.prototype.toString = function Rejected$toString(){\n  return 'Future.reject(' + show(this._value) + ')';\n};\n\nfunction reject(x){\n  return new Rejected(x);\n}\n\nfunction Resolved(value){\n  this._value = value;\n}\n\nResolved.prototype = Object.create(Core);\n\nResolved.prototype._race = moop;\nResolved.prototype._mapRej = moop;\nResolved.prototype._or = moop;\n\nResolved.prototype._and = function Resolved$and(other){\n  return other;\n};\n\nResolved.prototype._both = function Resolved$both(other){\n  var left = this._value;\n  return other._map(function Resolved$both$mapper(right){\n    return [left, right];\n  });\n};\n\nResolved.prototype._swap = function Resolved$swap(){\n  return new Rejected(this._value);\n};\n\nResolved.prototype._finally = function Resolved$finally(other){\n  var value = this._value;\n  return other._map(function Resolved$finally$mapper(){\n    return value;\n  });\n};\n\nResolved.prototype._fork = function _fork(rej, res){\n  res(this._value);\n  return noop;\n};\n\nResolved.prototype.isResolved = function Resolved$isResolved(){\n  return true;\n};\n\nResolved.prototype.extractRight = function Resolved$extractRight(){\n  return [this._value];\n};\n\nResolved.prototype.toString = function Resolved$toString(){\n  return 'Future.of(' + show(this._value) + ')';\n};\n\nfunction of(x){\n  return new Resolved(x);\n}\n\nfunction Never(){\n  this._isNever = true;\n}\n\nNever.prototype = Object.create(Future.prototype);\n\nNever.prototype._ap = moop;\nNever.prototype._map = moop;\nNever.prototype._bimap = moop;\nNever.prototype._chain = moop;\nNever.prototype._mapRej = moop;\nNever.prototype._chainRej = moop;\nNever.prototype._both = moop;\nNever.prototype._or = moop;\nNever.prototype._swap = moop;\nNever.prototype._fold = moop;\nNever.prototype._finally = moop;\n\nNever.prototype._race = function Never$race(other){\n  return other;\n};\n\nNever.prototype._fork = function Never$_fork(){\n  return noop;\n};\n\nNever.prototype.toString = function Never$toString(){\n  return 'Future.never';\n};\n\nvar never = new Never();\n\nfunction isNever(x){\n  return isFuture(x) && x._isNever === true;\n}\n\nfunction Eager(future){\n  var _this = this;\n  _this.rej = noop;\n  _this.res = noop;\n  _this.rejected = false;\n  _this.resolved = false;\n  _this.value = null;\n  _this.cancel = future._fork(function Eager$reject(x){\n    _this.value = x;\n    _this.rejected = true;\n    _this.cancel = noop;\n    _this.rej(x);\n  }, function Eager$resolve(x){\n    _this.value = x;\n    _this.resolved = true;\n    _this.cancel = noop;\n    _this.res(x);\n  });\n}\n\nEager.prototype = Object.create(Core);\n\nEager.prototype._fork = function Eager$_fork(rej, res){\n  if(this.rejected) rej(this.value);\n  else if(this.resolved) res(this.value);\n  else{\n    this.rej = rej;\n    this.res = res;\n  }\n  return this.cancel;\n};\n\nfunction check$ap(f){\n  return isFunction(f) ? f : typeError(\n    'Future#ap expects its first argument to be a Future of a Function'\n    + '\\n  Actual: Future.of(' + show(f) + ')'\n  );\n}\n\nfunction check$chain(m, f, x){\n  return isFuture(m) ? m : invalidFuture(\n    'Future#chain',\n    'the function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nfunction check$chainRej(m, f, x){\n  return isFuture(m) ? m : invalidFuture(\n    'Future#chainRej',\n    'the function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nvar Action = {\n  rejected: function Action$rejected(x){ this.cancel(); return new Rejected(x) },\n  resolved: function Action$resolved(x){ this.cancel(); return new Resolved(x) },\n  run: function Action$run(){ return this },\n  cancel: function Action$cancel(){}\n};\n\nfunction ApAction(other){ this.other = other; }\nApAction.prototype = Object.create(Action);\n\nApAction.prototype.resolved = function ApAction$resolved(f){\n  check$ap(f);\n  return this.other._map(function ApAction$resolved$mapper(x){ return f(x) });\n};\n\nApAction.prototype.toString = function ApAction$toString(){\n  return 'ap(' + this.other.toString() + ')';\n};\n\nfunction MapAction(mapper){ this.mapper = mapper; }\nMapAction.prototype = Object.create(Action);\n\nMapAction.prototype.resolved = function MapAction$resolved(x){\n  return new Resolved(this.mapper(x));\n};\n\nMapAction.prototype.toString = function MapAction$toString(){\n  return 'map(' + showf(this.mapper) + ')';\n};\n\nfunction BimapAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\nBimapAction.prototype = Object.create(Action);\n\nBimapAction.prototype.rejected = function BimapAction$rejected(x){\n  return new Rejected(this.lmapper(x));\n};\n\nBimapAction.prototype.resolved = function BimapAction$resolved(x){\n  return new Resolved(this.rmapper(x));\n};\n\nBimapAction.prototype.toString = function BimapAction$toString(){\n  return 'bimap(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n};\n\nfunction ChainAction(mapper){ this.mapper = mapper; }\nChainAction.prototype = Object.create(Action);\n\nChainAction.prototype.resolved = function ChainAction$resolved(x){\n  return check$chain(this.mapper(x), this.mapper, x);\n};\n\nChainAction.prototype.toString = function ChainAction$toString(){\n  return 'chain(' + showf(this.mapper) + ')';\n};\n\nfunction MapRejAction(mapper){ this.mapper = mapper; }\nMapRejAction.prototype = Object.create(Action);\n\nMapRejAction.prototype.rejected = function MapRejAction$rejected(x){\n  return new Rejected(this.mapper(x));\n};\n\nMapRejAction.prototype.toString = function MapRejAction$toString(){\n  return 'mapRej(' + showf(this.mapper) + ')';\n};\n\nfunction ChainRejAction(mapper){ this.mapper = mapper; }\nChainRejAction.prototype = Object.create(Action);\n\nChainRejAction.prototype.rejected = function ChainRejAction$rejected(x){\n  return check$chainRej(this.mapper(x), this.mapper, x);\n};\n\nChainRejAction.prototype.toString = function ChainRejAction$toString(){\n  return 'chainRej(' + showf(this.mapper) + ')';\n};\n\nfunction SwapAction(){}\nSwapAction.prototype = Object.create(Action);\n\nSwapAction.prototype.rejected = function SwapAction$rejected(x){\n  return new Resolved(x);\n};\n\nSwapAction.prototype.resolved = function SwapAction$resolved(x){\n  return new Rejected(x);\n};\n\nSwapAction.prototype.toString = function SwapAction$toString(){\n  return 'swap()';\n};\n\nfunction FoldAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\nFoldAction.prototype = Object.create(Action);\n\nFoldAction.prototype.rejected = function FoldAction$rejected(x){\n  return new Resolved(this.lmapper(x));\n};\n\nFoldAction.prototype.resolved = function FoldAction$resolved(x){\n  return new Resolved(this.rmapper(x));\n};\n\nFoldAction.prototype.toString = function FoldAction$toString(){\n  return 'fold(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n};\n\nfunction FinallyAction(other){ this.other = other; }\nFinallyAction.prototype = Object.create(Action);\n\nFinallyAction.prototype.rejected = function FinallyAction$rejected(x){\n  return this.other._and(new Rejected(x));\n};\n\nFinallyAction.prototype.resolved = function FinallyAction$resolved(x){\n  return this.other._map(function FoldAction$resolved$mapper(){ return x });\n};\n\nFinallyAction.prototype.cancel = function FinallyAction$cancel(){\n  this.other._fork(noop, noop)();\n};\n\nFinallyAction.prototype.toString = function FinallyAction$toString(){\n  return 'finally(' + this.other.toString() + ')';\n};\n\nfunction AndAction(other){ this.other = other; }\nAndAction.prototype = Object.create(Action);\n\nAndAction.prototype.resolved = function AndAction$resolved(){\n  return this.other;\n};\n\nAndAction.prototype.toString = function AndAction$toString(){\n  return 'and(' + this.other.toString() + ')';\n};\n\nfunction OrAction(other){ this.other = other; }\nOrAction.prototype = Object.create(Action);\n\nOrAction.prototype.rejected = function OrAction$rejected(){\n  return this.other;\n};\n\nOrAction.prototype.toString = function OrAction$toString(){\n  return 'or(' + this.other.toString() + ')';\n};\n\nfunction RaceAction(other){ this.other = other; }\nRaceAction.prototype = Object.create(Action);\n\nRaceAction.prototype.run = function RaceAction$run(early){\n  return new RaceActionState(early, new Eager(this.other));\n};\n\nRaceAction.prototype.toString = function RaceAction$toString(){\n  return 'race(' + this.other.toString() + ')';\n};\n\nfunction BothAction(other){ this.other = other; }\nBothAction.prototype = Object.create(Action);\n\nBothAction.prototype.resolved = function BothAction$resolved(x){\n  return this.other._map(function BothAction$resolved$mapper(y){ return [x, y] });\n};\n\nBothAction.prototype.run = function BothAction$run(early){\n  return new BothActionState(early, new Eager(this.other));\n};\n\nBothAction.prototype.toString = function BothAction$toString(){\n  return 'both(' + this.other.toString() + ')';\n};\n\nfunction RaceActionState(early, other){\n  var _this = this;\n  _this.other = other;\n  _this.cancel = other._fork(\n    function RaceActionState$rej(x){ early(new Rejected(x), _this); },\n    function RaceActionState$res(x){ early(new Resolved(x), _this); }\n  );\n}\n\nRaceActionState.prototype = Object.create(RaceAction.prototype);\n\nfunction BothActionState(early, other){\n  var _this = this;\n  _this.other = other;\n  _this.cancel = other._fork(\n    function BothActionState$rej(x){ early(new Rejected(x), _this); },\n    noop\n  );\n}\n\nBothActionState.prototype = Object.create(BothAction.prototype);\n\nfunction Sequence(spawn, actions){\n  this._spawn = spawn;\n  this._actions = actions || empty;\n}\n\nSequence.prototype = Object.create(Future.prototype);\n\nSequence.prototype._transform = function Sequence$_transform(action){\n  return new Sequence(this._spawn, cons(action, this._actions));\n};\n\nSequence.prototype._ap = function Sequence$ap(other){\n  return this._transform(new ApAction(other));\n};\n\nSequence.prototype._map = function Sequence$map(mapper){\n  return this._transform(new MapAction(mapper));\n};\n\nSequence.prototype._bimap = function Sequence$bimap(lmapper, rmapper){\n  return this._transform(new BimapAction(lmapper, rmapper));\n};\n\nSequence.prototype._chain = function Sequence$chain(mapper){\n  return this._transform(new ChainAction(mapper));\n};\n\nSequence.prototype._mapRej = function Sequence$mapRej(mapper){\n  return this._transform(new MapRejAction(mapper));\n};\n\nSequence.prototype._chainRej = function Sequence$chainRej(mapper){\n  return this._transform(new ChainRejAction(mapper));\n};\n\nSequence.prototype._race = function Sequence$race(other){\n  return isNever(other) ? this : this._transform(new RaceAction(other));\n};\n\nSequence.prototype._both = function Sequence$both(other){\n  return this._transform(new BothAction(other));\n};\n\nSequence.prototype._and = function Sequence$and(other){\n  return this._transform(new AndAction(other));\n};\n\nSequence.prototype._or = function Sequence$or(other){\n  return this._transform(new OrAction(other));\n};\n\nSequence.prototype._swap = function Sequence$swap(){\n  return this._transform(new SwapAction);\n};\n\nSequence.prototype._fold = function Sequence$fold(lmapper, rmapper){\n  return this._transform(new FoldAction(lmapper, rmapper));\n};\n\nSequence.prototype._finally = function Sequence$finally(other){\n  return this._transform(new FinallyAction(other));\n};\n\nSequence.prototype._fork = interpreter;\n\nSequence.prototype.toString = function Sequence$toString(){\n  var str = '', tail = this._actions;\n\n  while(!tail.isEmpty){\n    str = '.' + tail.head.toString() + str;\n    tail = tail.tail;\n  }\n\n  return this._spawn.toString() + str;\n};\n\nfunction Next(x){\n  return {done: false, value: x};\n}\n\nfunction Done(x){\n  return {done: true, value: x};\n}\n\nfunction isIteration(x){\n  return isObject(x) && isBoolean(x.done);\n}\n\nvar Undetermined = 0;\nvar Synchronous = 1;\nvar Asynchronous = 2;\n\nfunction ChainRec(step, init){\n  this._step = step;\n  this._init = init;\n}\n\nChainRec.prototype = Object.create(Core);\n\nChainRec.prototype._fork = function ChainRec$_fork(rej, res){\n\n  var _step = this._step;\n  var _init = this._init;\n  var timing = Undetermined, cancel = noop, state = Next(_init);\n\n  function resolved(it){\n    state = it;\n    timing = timing === Undetermined ? Synchronous : drain();\n  }\n\n  function drain(){\n    while(!state.done){\n      timing = Undetermined;\n      var m = _step(Next, Done, state.value);\n      cancel = m._fork(rej, resolved);\n\n      if(timing !== Synchronous){\n        timing = Asynchronous;\n        return;\n      }\n    }\n\n    res(state.value);\n  }\n\n  drain();\n\n  return function Future$chainRec$cancel(){ cancel(); };\n\n};\n\nChainRec.prototype.toString = function ChainRec$toString(){\n  return 'Future.chainRec(' + showf(this._step) + ', ' + show(this._init) + ')';\n};\n\nfunction chainRec(step, init){\n  return new ChainRec(step, init);\n}\n\nfunction ap$mval(mval, mfunc){\n  if(!Z.Apply.test(mfunc)) invalidArgument('Future.ap', 1, 'be an Apply', mfunc);\n  return Z.ap(mval, mfunc);\n}\n\nfunction ap(mval, mfunc){\n  if(!Z.Apply.test(mval)) invalidArgument('Future.ap', 0, 'be an Apply', mval);\n  if(arguments.length === 1) return partial1(ap$mval, mval);\n  return ap$mval(mval, mfunc);\n}\n\nfunction alt$left(left, right){\n  if(!Z.Alt.test(right)) invalidArgument('alt', 1, 'be an Alt', right);\n  return Z.alt(left, right);\n}\n\nfunction alt(left, right){\n  if(!Z.Alt.test(left)) invalidArgument('alt', 0, 'be an Alt', left);\n  if(arguments.length === 1) return partial1(alt$left, left);\n  return alt$left(left, right);\n}\n\nfunction map$mapper(mapper, m){\n  if(!Z.Functor.test(m)) invalidArgument('Future.map', 1, 'be a Functor', m);\n  return Z.map(mapper, m);\n}\n\nfunction map(mapper, m){\n  if(!isFunction(mapper)) invalidArgument('Future.map', 0, 'be a Function', mapper);\n  if(arguments.length === 1) return partial1(map$mapper, mapper);\n  return map$mapper(mapper, m);\n}\n\nfunction bimap$lmapper$rmapper(lmapper, rmapper, m){\n  if(!Z.Bifunctor.test(m)) invalidArgument('Future.bimap', 2, 'be a Bifunctor', m);\n  return Z.bimap(lmapper, rmapper, m);\n}\n\nfunction bimap$lmapper(lmapper, rmapper, m){\n  if(!isFunction(rmapper)) invalidArgument('Future.bimap', 1, 'be a Function', rmapper);\n  if(arguments.length === 2) return partial2(bimap$lmapper$rmapper, lmapper, rmapper);\n  return bimap$lmapper$rmapper(lmapper, rmapper, m);\n}\n\nfunction bimap(lmapper, rmapper, m){\n  if(!isFunction(lmapper)) invalidArgument('Future.bimap', 0, 'be a Function', lmapper);\n  if(arguments.length === 1) return partial1(bimap$lmapper, lmapper);\n  if(arguments.length === 2) return bimap$lmapper(lmapper, rmapper);\n  return bimap$lmapper(lmapper, rmapper, m);\n}\n\nfunction chain$chainer(chainer, m){\n  if(!Z.Chain.test(m)) invalidArgument('Future.chain', 1, 'be a Chain', m);\n  return Z.chain(chainer, m);\n}\n\nfunction chain(chainer, m){\n  if(!isFunction(chainer)) invalidArgument('Future.chain', 0, 'be a Function', chainer);\n  if(arguments.length === 1) return partial1(chain$chainer, chainer);\n  return chain$chainer(chainer, m);\n}\n\nfunction mapRej$mapper(mapper, m){\n  if(!isFuture(m)) invalidFuture('Future.mapRej', 1, m);\n  return m.mapRej(mapper);\n}\n\nfunction mapRej(mapper, m){\n  if(!isFunction(mapper)) invalidArgument('Future.mapRej', 0, 'be a Function', mapper);\n  if(arguments.length === 1) return partial1(mapRej$mapper, mapper);\n  return mapRej$mapper(mapper, m);\n}\n\nfunction chainRej$chainer(chainer, m){\n  if(!isFuture(m)) invalidFuture('Future.chainRej', 1, m);\n  return m.chainRej(chainer);\n}\n\nfunction chainRej(chainer, m){\n  if(!isFunction(chainer)) invalidArgument('Future.chainRej', 0, 'be a Function', chainer);\n  if(arguments.length === 1) return partial1(chainRej$chainer, chainer);\n  return chainRej$chainer(chainer, m);\n}\n\nfunction lastly$right(right, left){\n  if(!isFuture(left)) invalidFuture('Future.finally', 1, left);\n  return left.finally(right);\n}\n\nfunction lastly(right, left){\n  if(!isFuture(right)) invalidFuture('Future.finally', 0, right);\n  if(arguments.length === 1) return partial1(lastly$right, right);\n  return lastly$right(right, left);\n}\n\nfunction and$left(left, right){\n  if(!isFuture(right)) invalidFuture('Future.and', 1, right);\n  return left.and(right);\n}\n\nfunction and(left, right){\n  if(!isFuture(left)) invalidFuture('Future.and', 0, left);\n  if(arguments.length === 1) return partial1(and$left, left);\n  return and$left(left, right);\n}\n\nfunction both$left(left, right){\n  if(!isFuture(right)) invalidFuture('Future.both', 1, right);\n  return left.both(right);\n}\n\nfunction both(left, right){\n  if(!isFuture(left)) invalidFuture('Future.both', 0, left);\n  if(arguments.length === 1) return partial1(both$left, left);\n  return both$left(left, right);\n}\n\nfunction or$left(left, right){\n  if(!isFuture(right)) invalidFuture('Future.or', 1, right);\n  return left.or(right);\n}\n\nfunction or(left, right){\n  if(!isFuture(left)) invalidFuture('Future.or', 0, left);\n  if(arguments.length === 1) return partial1(or$left, left);\n  return or$left(left, right);\n}\n\nfunction race$right(right, left){\n  if(!isFuture(left)) invalidFuture('Future.race', 1, left);\n  return left.race(right);\n}\n\nfunction race(right, left){\n  if(!isFuture(right)) invalidFuture('Future.race', 0, right);\n  if(arguments.length === 1) return partial1(race$right, right);\n  return race$right(right, left);\n}\n\nfunction swap(m){\n  if(!isFuture(m)) invalidFuture('Future.swap', 0, m);\n  return m.swap();\n}\n\nfunction fold$f$g(f, g, m){\n  if(!isFuture(m)) invalidFuture('Future.fold', 2, m);\n  return m.fold(f, g);\n}\n\nfunction fold$f(f, g, m){\n  if(!isFunction(g)) invalidArgument('Future.fold', 1, 'be a function', g);\n  if(arguments.length === 2) return partial2(fold$f$g, f, g);\n  return fold$f$g(f, g, m);\n}\n\nfunction fold(f, g, m){\n  if(!isFunction(f)) invalidArgument('Future.fold', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(fold$f, f);\n  if(arguments.length === 2) return fold$f(f, g);\n  return fold$f(f, g, m);\n}\n\nfunction done$callback(callback, m){\n  if(!isFuture(m)) invalidFuture('Future.done', 1, m);\n  return m.done(callback);\n}\n\nfunction done(callback, m){\n  if(!isFunction(callback)) invalidArgument('Future.done', 0, 'be a Function', callback);\n  if(arguments.length === 1) return partial1(done$callback, callback);\n  return done$callback(callback, m);\n}\n\nfunction fork$f$g(f, g, m){\n  if(!isFuture(m)) invalidFuture('Future.fork', 2, m);\n  return m._fork(f, g);\n}\n\nfunction fork$f(f, g, m){\n  if(!isFunction(g)) invalidArgument('Future.fork', 1, 'be a function', g);\n  if(arguments.length === 2) return partial2(fork$f$g, f, g);\n  return fork$f$g(f, g, m);\n}\n\nfunction fork(f, g, m){\n  if(!isFunction(f)) invalidArgument('Future.fork', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(fork$f, f);\n  if(arguments.length === 2) return fork$f(f, g);\n  return fork$f(f, g, m);\n}\n\nfunction promise(m){\n  if(!isFuture(m)) invalidFuture('Future.promise', 0, m);\n  return m.promise();\n}\n\nfunction value$cont(cont, m){\n  if(!isFuture(m)) invalidFuture('Future.value', 1, m);\n  return m.value(cont);\n}\n\nfunction value(cont, m){\n  if(!isFunction(cont)) invalidArgument('Future.value', 0, 'be a Function', cont);\n  if(arguments.length === 1) return partial1(value$cont, cont);\n  return value$cont(cont, m);\n}\n\nfunction extractLeft(m){\n  if(!isFuture(m)) invalidFuture('Future.extractLeft', 0, m);\n  return m.extractLeft();\n}\n\nfunction extractRight(m){\n  if(!isFuture(m)) invalidFuture('Future.extractRight', 0, m);\n  return m.extractRight();\n}\n\nfunction check$ap$f(f){\n  if(!isFunction(f)) typeError(\n    'Future#ap expects its first argument to be a Future of a Function'\n    + '\\n  Actual: Future.of(' + show(f) + ')'\n  );\n}\n\nfunction ParallelAp(mval, mfunc){\n  this._mval = mval;\n  this._mfunc = mfunc;\n}\n\nParallelAp.prototype = Object.create(Core);\n\nParallelAp.prototype._fork = function ParallelAp$fork(rej, res){\n  var func, val, okval = false, okfunc = false, rejected = false, c1, c2;\n\n  function ParallelAp$rej(x){\n    if(!rejected){\n      rejected = true;\n      rej(x);\n    }\n  }\n\n  c1 = this._mval._fork(ParallelAp$rej, function ParallelAp$fork$resVal(x){\n    c1 = noop;\n    if(!okval) return void (okfunc = true, val = x);\n    res(func(x));\n  });\n  c2 = this._mfunc._fork(ParallelAp$rej, function ParallelAp$fork$resFunc(f){\n    c2 = noop;\n    check$ap$f(f);\n    if(!okfunc) return void (okval = true, func = f);\n    res(f(val));\n  });\n\n  return function ParallelAp$fork$cancel(){\n    c1();\n    c2();\n  };\n};\n\nParallelAp.prototype.toString = function ParallelAp$toString(){\n  return 'new ParallelAp(' + this._mval.toString() + ', ' + this._mfunc.toString() + ')';\n};\n\nfunction parallelAp(mval, mfunc){\n  return new ParallelAp(mval, mfunc);\n}\n\nfunction After$race(other){\n  return other.isSettled()\n       ? other\n       : isNever(other)\n       ? this\n       : typeof other._time === 'number'\n       ? other._time < this._time ? other : this\n       : Core._race.call(this, other);\n}\n\nfunction After(time, value){\n  this._time = time;\n  this._value = value;\n}\n\nAfter.prototype = Object.create(Core);\n\nAfter.prototype._race = After$race;\n\nAfter.prototype._swap = function After$swap(){\n  return new RejectAfter(this._time, this._value);\n};\n\nAfter.prototype._fork = function After$_fork(rej, res){\n  var id = setTimeout(res, this._time, this._value);\n  return function After$cancel(){ clearTimeout(id); };\n};\n\nAfter.prototype.extractRight = function After$extractRight(){\n  return [this._value];\n};\n\nAfter.prototype.toString = function After$toString(){\n  return 'Future.after(' + show(this._time) + ', ' + show(this._value) + ')';\n};\n\nfunction RejectAfter(time, value){\n  this._time = time;\n  this._value = value;\n}\n\nRejectAfter.prototype = Object.create(Core);\n\nRejectAfter.prototype._race = After$race;\n\nRejectAfter.prototype._swap = function RejectAfter$swap(){\n  return new After(this._time, this._value);\n};\n\nRejectAfter.prototype._fork = function RejectAfter$_fork(rej){\n  var id = setTimeout(rej, this._time, this._value);\n  return function RejectAfter$cancel(){ clearTimeout(id); };\n};\n\nRejectAfter.prototype.extractLeft = function RejectAfter$extractLeft(){\n  return [this._value];\n};\n\nRejectAfter.prototype.toString = function RejectAfter$toString(){\n  return 'Future.rejectAfter(' + show(this._time) + ', ' + show(this._value) + ')';\n};\n\nfunction after$time(time, value){\n  return time === Infinity ? never : new After(time, value);\n}\n\nfunction after(time, value){\n  if(!isUnsigned(time)) invalidArgument('Future.after', 0, 'be a positive integer', time);\n  if(arguments.length === 1) return partial1(after$time, time);\n  return after$time(time, value);\n}\n\nfunction rejectAfter$time(time, reason){\n  return time === Infinity ? never : new RejectAfter(time, reason);\n}\n\nfunction rejectAfter(time, reason){\n  if(!isUnsigned(time)) invalidArgument('Future.rejectAfter', 0, 'be a positive integer', time);\n  if(arguments.length === 1) return partial1(rejectAfter$time, time);\n  return rejectAfter$time(time, reason);\n}\n\nfunction Attempt(fn){\n  this._fn = fn;\n}\n\nAttempt.prototype = Object.create(Core);\n\nAttempt.prototype._fork = function Attempt$fork(rej, res){\n  var r;\n  try{ r = this._fn(); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nAttempt.prototype.toString = function Attempt$toString(){\n  return 'Future.try(' + showf(this._fn) + ')';\n};\n\nfunction attempt(f){\n  if(!isFunction(f)) invalidArgument('Future.try', 0, 'be a function', f);\n  return new Attempt(f);\n}\n\nvar Cold = Cached.Cold = 0;\nvar Pending = Cached.Pending = 1;\nvar Rejected$1 = Cached.Rejected = 2;\nvar Resolved$1 = Cached.Resolved = 3;\n\nfunction Queued(rej, res){\n  this[Rejected$1] = rej;\n  this[Resolved$1] = res;\n}\n\nfunction Cached(pure){\n  this._pure = pure;\n  this.reset();\n}\n\nCached.prototype = Object.create(Core);\n\nCached.prototype.isRejected = function Cached$isRejected(){\n  return this._state === Rejected$1;\n};\n\nCached.prototype.isResolved = function Cached$isResolved(){\n  return this._state === Resolved$1;\n};\n\nCached.prototype.extractLeft = function Cached$extractLeft(){\n  return this.isRejected() ? [this._value] : [];\n};\n\nCached.prototype.extractRight = function Cached$extractRight(){\n  return this.isResolved() ? [this._value] : [];\n};\n\nCached.prototype._addToQueue = function Cached$addToQueue(rej, res){\n  var _this = this;\n  if(_this._state > Pending) return noop;\n  var i = _this._queue.push(new Queued(rej, res)) - 1;\n  _this._queued = _this._queued + 1;\n\n  return function Cached$removeFromQueue(){\n    if(_this._state > Pending) return;\n    _this._queue[i] = undefined;\n    _this._queued = _this._queued - 1;\n    if(_this._queued === 0) _this.reset();\n  };\n};\n\nCached.prototype._drainQueue = function Cached$drainQueue(){\n  if(this._state <= Pending) return;\n  if(this._queued === 0) return;\n  var queue = this._queue;\n  var length = queue.length;\n  var state = this._state;\n  var value = this._value;\n\n  for(var i = 0; i < length; i++){\n    queue[i] && queue[i][state](value);\n    queue[i] = undefined;\n  }\n\n  this._queue = undefined;\n  this._queued = 0;\n};\n\nCached.prototype.reject = function Cached$reject(reason){\n  if(this._state > Pending) return;\n  this._value = reason;\n  this._state = Rejected$1;\n  this._drainQueue();\n};\n\nCached.prototype.resolve = function Cached$resolve(value){\n  if(this._state > Pending) return;\n  this._value = value;\n  this._state = Resolved$1;\n  this._drainQueue();\n};\n\nCached.prototype.run = function Cached$run(){\n  var _this = this;\n  if(_this._state > Cold) return;\n  _this._state = Pending;\n  _this._cancel = _this._pure._fork(\n    function Cached$fork$rej(x){ _this.reject(x); },\n    function Cached$fork$res(x){ _this.resolve(x); }\n  );\n};\n\nCached.prototype.reset = function Cached$reset(){\n  if(this._state === Cold) return;\n  if(this._state > Pending) this._cancel();\n  this._cancel = noop;\n  this._queue = [];\n  this._queued = 0;\n  this._value = undefined;\n  this._state = Cold;\n};\n\nCached.prototype._fork = function Cached$_fork(rej, res){\n  var cancel = noop;\n\n  switch(this._state){\n    case Pending: cancel = this._addToQueue(rej, res); break;\n    case Rejected$1: rej(this._value); break;\n    case Resolved$1: res(this._value); break;\n    default: cancel = this._addToQueue(rej, res); this.run();\n  }\n\n  return cancel;\n};\n\nCached.prototype.toString = function Cached$toString(){\n  return 'Future.cache(' + this._pure.toString() + ')';\n};\n\nfunction cache(m){\n  if(!isFuture(m)) invalidFuture('Future.cache', 0, m);\n  return new Cached(m);\n}\n\nfunction Encase(fn, a){\n  this._fn = fn;\n  this._a = a;\n}\n\nEncase.prototype = Object.create(Core);\n\nEncase.prototype._fork = function Encase$fork(rej, res){\n  var r;\n  try{ r = this._fn(this._a); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nEncase.prototype.toString = function Encase$toString(){\n  return 'Future.encase(' + showf(this._fn) + ', ' + show(this._a) + ')';\n};\n\nfunction encase(f, x){\n  if(!isFunction(f)) invalidArgument('Future.encase', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(encase, f);\n  return new Encase(f, x);\n}\n\nfunction Encase2(fn, a, b){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n}\n\nEncase2.prototype = Object.create(Core);\n\nEncase2.prototype._fork = function Encase2$fork(rej, res){\n  var r;\n  try{ r = this._fn(this._a, this._b); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nEncase2.prototype.toString = function Encase2$toString(){\n  return 'Future.encase2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n};\n\nfunction encase2(f, x, y){\n  if(!isFunction(f)) invalidArgument('Future.encase2', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encase2, f);\n    case 2: return partial2(encase2, f, x);\n    default: return new Encase2(f, x, y);\n  }\n}\n\nfunction Encase3(fn, a, b, c){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n  this._c = c;\n}\n\nEncase3.prototype = Object.create(Core);\n\nEncase3.prototype._fork = function Encase3$fork(rej, res){\n  var r;\n  try{ r = this._fn(this._a, this._b, this._c); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nEncase3.prototype.toString = function Encase3$toString(){\n  return 'Future.encase3('\n       + showf(this._fn)\n       + ', '\n       + show(this._a)\n       + ', '\n       + show(this._b)\n       + ', '\n       + show(this._c)\n       + ')';\n};\n\nfunction encase3(f, x, y, z){\n  if(!isFunction(f)) invalidArgument('Future.encase3', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encase3, f);\n    case 2: return partial2(encase3, f, x);\n    case 3: return partial3(encase3, f, x, y);\n    default: return new Encase3(f, x, y, z);\n  }\n}\n\nfunction EncaseN(fn, a){\n  this._fn = fn;\n  this._a = a;\n}\n\nEncaseN.prototype = Object.create(Core);\n\nEncaseN.prototype._fork = function EncaseN$fork(rej, res){\n  var open = true;\n  this._fn(this._a, function EncaseN$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function EncaseN$cancel(){ open = false; };\n};\n\nEncaseN.prototype.toString = function EncaseN$toString(){\n  return 'Future.encaseN(' + showf(this._fn) + ', ' + show(this._a) + ')';\n};\n\nfunction encaseN(f, x){\n  if(!isFunction(f)) invalidArgument('Future.encaseN', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(encaseN, f);\n  return new EncaseN(f, x);\n}\n\nfunction EncaseN2(fn, a, b){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n}\n\nEncaseN2.prototype = Object.create(Core);\n\nEncaseN2.prototype._fork = function EncaseN2$fork(rej, res){\n  var open = true;\n  this._fn(this._a, this._b, function EncaseN2$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function EncaseN2$cancel(){ open = false; };\n};\n\nEncaseN2.prototype.toString = function EncaseN2$toString(){\n  return 'Future.encaseN2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n};\n\nfunction encaseN2(f, x, y){\n  if(!isFunction(f)) invalidArgument('Future.encaseN2', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseN2, f);\n    case 2: return partial2(encaseN2, f, x);\n    default: return new EncaseN2(f, x, y);\n  }\n}\n\nfunction EncaseN$1(fn, a, b, c){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n  this._c = c;\n}\n\nEncaseN$1.prototype = Object.create(Core);\n\nEncaseN$1.prototype._fork = function EncaseN$3$fork(rej, res){\n  var open = true;\n  this._fn(this._a, this._b, this._c, function EncaseN$3$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function EncaseN$3$cancel(){ open = false; };\n};\n\nEncaseN$1.prototype.toString = function EncaseN$3$toString(){\n  return 'Future.encaseN3('\n       + showf(this._fn)\n       + ', '\n       + show(this._a)\n       + ', '\n       + show(this._b)\n       + ', '\n       + show(this._c)\n       + ')';\n};\n\nfunction encaseN3(f, x, y, z){\n  if(!isFunction(f)) invalidArgument('Future.encaseN3', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseN3, f);\n    case 2: return partial2(encaseN3, f, x);\n    case 3: return partial3(encaseN3, f, x, y);\n    default: return new EncaseN$1(f, x, y, z);\n  }\n}\n\nfunction check$promise(p, f, a){\n  return isThenable(p) ? p : typeError(\n    'Future.encaseP expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n    + '\\n  With: ' + (show(a))\n  );\n}\n\nfunction EncaseP(fn, a){\n  this._fn = fn;\n  this._a = a;\n}\n\nEncaseP.prototype = Object.create(Core);\n\nEncaseP.prototype._fork = function EncaseP$fork(rej, res){\n  var _fn = this._fn;\n  var _a = this._a;\n  var open = true;\n  check$promise(_fn(_a), _fn, _a).then(immediately(function EncaseP$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function EncaseP$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function EncaseP$cancel(){ open = false; };\n};\n\nEncaseP.prototype.toString = function EncaseP$toString(){\n  return 'Future.encaseP(' + showf(this._fn) + ', ' + show(this._a) + ')';\n};\n\nfunction encaseP(f, x){\n  if(!isFunction(f)) invalidArgument('Future.encaseP', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(encaseP, f);\n  return new EncaseP(f, x);\n}\n\nfunction check$promise$1(p, f, a, b){\n  return isThenable(p) ? p : typeError(\n    'Future.encaseP2 expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n    + '\\n  With 1: ' + (show(a))\n    + '\\n  With 2: ' + (show(b))\n  );\n}\n\nfunction EncaseP2(fn, a, b){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n}\n\nEncaseP2.prototype = Object.create(Core);\n\nEncaseP2.prototype._fork = function EncaseP2$fork(rej, res){\n  var _fn = this._fn;\n  var _a = this._a;\n  var _b = this._b;\n  var open = true;\n  check$promise$1(_fn(_a, _b), _fn, _a, _b).then(immediately(function EncaseP2$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function EncaseP2$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function EncaseP2$cancel(){ open = false; };\n};\n\nEncaseP2.prototype.toString = function EncaseP2$toString(){\n  return 'Future.encaseP2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n};\n\nfunction encaseP2(f, x, y){\n  if(!isFunction(f)) invalidArgument('Future.encaseP2', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseP2, f);\n    case 2: return partial2(encaseP2, f, x);\n    default: return new EncaseP2(f, x, y);\n  }\n}\n\nfunction check$promise$2(p, f, a, b, c){\n  return isThenable(p) ? p : typeError(\n    'Future.encaseP3 expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n    + '\\n  With 1: ' + (show(a))\n    + '\\n  With 2: ' + (show(b))\n    + '\\n  With 3: ' + (show(c))\n  );\n}\n\nfunction EncaseP3(fn, a, b, c){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n  this._c = c;\n}\n\nEncaseP3.prototype = Object.create(Core);\n\nEncaseP3.prototype._fork = function EncaseP3$fork(rej, res){\n  var _fn = this._fn;\n  var _a = this._a;\n  var _b = this._b;\n  var _c = this._c;\n  var open = true;\n  check$promise$2(_fn(_a, _b, _c), _fn, _a, _b, _c).then(immediately(function EncaseP3$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function EncaseP3$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function EncaseP3$cancel(){ open = false; };\n};\n\nEncaseP3.prototype.toString = function EncaseP3$toString(){\n  return 'Future.encaseP3('\n       + showf(this._fn)\n       + ', '\n       + show(this._a)\n       + ', '\n       + show(this._b)\n       + ', '\n       + show(this._c)\n       + ')';\n};\n\nfunction encaseP3(f, x, y, z){\n  if(!isFunction(f)) invalidArgument('Future.encaseP3', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseP3, f);\n    case 2: return partial2(encaseP3, f, x);\n    case 3: return partial3(encaseP3, f, x, y);\n    default: return new EncaseP3(f, x, y, z);\n  }\n}\n\n/*eslint consistent-return: 0*/\n\nfunction check$iterator(g){\n  return isIterator(g) ? g : invalidArgument(\n    'Future.do', 0, 'return an iterator, maybe you forgot the \"*\"', g\n  );\n}\n\nfunction check$iteration(o){\n  if(!isIteration(o)) typeError(\n    'Future.do was given an invalid generator:'\n    + ' Its iterator did not return a valid iteration from iterator.next()'\n    + '\\n  Actual: ' + show(o)\n  );\n  if(o.done || isFuture(o.value)) return o;\n  return invalidFuture(\n    'Future.do',\n    'the iterator to produce only valid Futures',\n    o.value,\n    '\\n  Tip: If you\\'re using a generator, make sure you always yield a Future'\n  );\n}\n\nfunction Go(generator){\n  this._generator = generator;\n}\n\nGo.prototype = Object.create(Core);\n\nGo.prototype._fork = function Go$_fork(rej, res){\n\n  var iterator = check$iterator(this._generator());\n\n  var timing = Undetermined, cancel = noop, state, value;\n\n  function resolved(x){\n    value = x;\n    if(timing === Asynchronous) return drain();\n    timing = Synchronous;\n    state = check$iteration(iterator.next(value));\n  }\n\n  function drain(){\n    state = check$iteration(iterator.next(value));\n\n    while(!state.done){\n      timing = Undetermined;\n      cancel = state.value._fork(rej, resolved);\n\n      if(timing !== Synchronous){\n        timing = Asynchronous;\n        return;\n      }\n    }\n\n    res(state.value);\n  }\n\n  drain();\n\n  return function Go$cancel(){ cancel(); };\n\n};\n\nGo.prototype.toString = function Go$toString(){\n  return 'Future.do(' + showf(this._generator) + ')';\n};\n\nfunction go(generator){\n  if(!isFunction(generator)) invalidArgument('Future.do', 0, 'be a Function', generator);\n  return new Go(generator);\n}\n\nfunction check$dispose(m, f, x){\n  if(!isFuture(m)) invalidFuture(\n    'Future.hook',\n    'the first function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nfunction check$consume(m, f, x){\n  if(!isFuture(m)) invalidFuture(\n    'Future.hook',\n    'the second function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nfunction Hook(acquire, dispose, consume){\n  this._acquire = acquire;\n  this._dispose = dispose;\n  this._consume = consume;\n}\n\nHook.prototype = Object.create(Core);\n\nHook.prototype._fork = function Hook$fork(rej, res){\n\n  var _acquire = this._acquire, _dispose = this._dispose, _consume = this._consume;\n  var cancel, cancelAcquire = noop, cancelConsume = noop, resource, value, cont = noop;\n\n  function Hook$done(){\n    cont(value);\n  }\n\n  function Hook$dispose(){\n    var disposal = _dispose(resource);\n    check$dispose(disposal, _dispose, resource);\n    cancel = disposal._fork(rej, Hook$done);\n    return cancel;\n  }\n\n  function Hook$cancelConsuption(){\n    cancelConsume();\n    Hook$dispose()();\n  }\n\n  function Hook$consumptionRejected(x){\n    cont = rej;\n    value = x;\n    Hook$dispose();\n  }\n\n  function Hook$consumptionResolved(x){\n    cont = res;\n    value = x;\n    Hook$dispose();\n  }\n\n  function Hook$acquireResolved(x){\n    resource = x;\n    var consumption = _consume(resource);\n    check$consume(consumption, _consume, resource);\n    cancel = Hook$cancelConsuption;\n    cancelConsume = consumption._fork(Hook$consumptionRejected, Hook$consumptionResolved);\n  }\n\n  cancelAcquire = _acquire._fork(rej, Hook$acquireResolved);\n\n  cancel = cancel || cancelAcquire;\n\n  return function Hook$fork$cancel(){ cancel(); };\n\n};\n\nHook.prototype.toString = function Hook$toString(){\n  return 'Future.hook('\n       + this._acquire.toString()\n       + ', '\n       + showf(this._dispose)\n       + ', '\n       + showf(this._consume)\n       + ')';\n};\n\nfunction hook$acquire$cleanup(acquire, cleanup, consume){\n  if(!isFunction(consume)) invalidArgument('Future.hook', 2, 'be a Future', consume);\n  return new Hook(acquire, cleanup, consume);\n}\n\nfunction hook$acquire(acquire, cleanup, consume){\n  if(!isFunction(cleanup)) invalidArgument('Future.hook', 1, 'be a function', cleanup);\n  if(arguments.length === 2) return partial2(hook$acquire$cleanup, acquire, cleanup);\n  return hook$acquire$cleanup(acquire, cleanup, consume);\n}\n\nfunction hook(acquire, cleanup, consume){\n  if(!isFuture(acquire)) invalidFuture('Future.hook', 0, acquire);\n  if(arguments.length === 1) return partial1(hook$acquire, acquire);\n  if(arguments.length === 2) return hook$acquire(acquire, cleanup);\n  return hook$acquire(acquire, cleanup, consume);\n}\n\nfunction Node(fn){\n  this._fn = fn;\n}\n\nNode.prototype = Object.create(Core);\n\nNode.prototype._fork = function Node$fork(rej, res){\n  var open = true;\n  this._fn(function Node$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function Node$cancel(){ open = false; };\n};\n\nNode.prototype.toString = function Node$toString(){\n  return 'Future.node(' + showf(this._fn) + ')';\n};\n\nfunction node(f){\n  if(!isFunction(f)) invalidArgument('Future.node', 0, 'be a function', f);\n  return new Node(f);\n}\n\nfunction check$parallel(m, i){\n  return isFuture(m) ? m : invalidFuture(\n    'Future.parallel',\n    'its second argument to be an array of valid Futures. '\n  + 'The value at position ' + i + ' in the array is not a Future',\n    m\n  );\n}\n\nfunction Parallel(max, futures){\n  this._futures = futures;\n  this._length = futures.length;\n  this._max = Math.min(this._length, max);\n}\n\nParallel.prototype = Object.create(Core);\n\nParallel.prototype._fork = function Parallel$_fork(rej, res){\n\n  var _futures = this._futures, _length = this._length, _max = this._max;\n  var cancels = new Array(_length), out = new Array(_length);\n  var cursor = 0, running = 0, blocked = false;\n\n  function Parallel$cancel(){\n    cursor = _length;\n    for(var n = 0; n < _length; n++) cancels[n] && cancels[n]();\n  }\n\n  function Parallel$run(idx){\n    running++;\n    cancels[idx] = _futures[idx]._fork(function Parallel$rej(reason){\n      cancels[idx] = noop;\n      Parallel$cancel();\n      rej(reason);\n    }, function Parallel$res(value){\n      cancels[idx] = noop;\n      out[idx] = value;\n      running--;\n      if(cursor === _length && running === 0) res(out);\n      else if(blocked) Parallel$drain();\n    });\n  }\n\n  function Parallel$drain(){\n    blocked = false;\n    while(cursor < _length && running < _max) Parallel$run(cursor++);\n    blocked = true;\n  }\n\n  Parallel$drain();\n\n  return Parallel$cancel;\n\n};\n\nParallel.prototype.toString = function Parallel$toString(){\n  return 'Future.parallel(' + this._max + ', ' + show(this._futures) + ')';\n};\n\nvar emptyArray = new Resolved([]);\n\nfunction parallel$max(max, xs){\n  if(!isArray(xs)) invalidArgument('Future.parallel', 1, 'be an array', xs);\n  var futures = mapArray(xs, check$parallel);\n  return futures.length === 0 ? emptyArray : new Parallel(max, futures);\n}\n\nfunction parallel(max, xs){\n  if(!isUnsigned(max)) invalidArgument('Future.parallel', 0, 'be a positive integer', max);\n  if(arguments.length === 1) return partial1(parallel$max, max);\n  return parallel$max(max, xs);\n}\n\nfunction check$promise$3(p, f){\n  return isThenable(p) ? p : typeError(\n    'Future.tryP expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + show(p) + '\\n  From calling: ' + showf(f)\n  );\n}\n\nfunction TryP(fn){\n  this._fn = fn;\n}\n\nTryP.prototype = Object.create(Core);\n\nTryP.prototype._fork = function TryP$fork(rej, res){\n  var open = true;\n  check$promise$3(this._fn(), this._fn).then(immediately(function TryP$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function TryP$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function TryP$cancel(){ open = false; };\n};\n\nTryP.prototype.toString = function TryP$toString(){\n  return 'Future.tryP(' + show(this._fn) + ')';\n};\n\nfunction tryP(f){\n  if(!isFunction(f)) invalidArgument('Future.tryP', 0, 'be a function', f);\n  return new TryP(f);\n}\n\nif(typeof Object.create !== 'function') error('Please polyfill Object.create to use Fluture');\nif(typeof Object.assign !== 'function') error('Please polyfill Object.assign to use Fluture');\nif(typeof Array.isArray !== 'function') error('Please polyfill Array.isArray to use Fluture');\n\nFuture.of = Future[FL.of] = of;\nFuture.chainRec = Future[FL.chainRec] = chainRec;\nFuture.reject = reject;\nFuture.ap = ap;\nFuture.map = map;\nFuture.bimap = bimap;\nFuture.chain = chain;\n\nvar Par = concurrify(Future, never, race, parallelAp);\nPar.of = Par[FL.of];\nPar.zero = Par[FL.zero];\nPar.map = map;\nPar.ap = ap;\nPar.alt = alt;\n\nfunction isParallel(x){\n  return x instanceof Par || type(x) === Par['@@type'];\n}\n\nfunction seq(par){\n  if(!isParallel(par)) invalidArgument('Future.seq', 0, 'to be a Par', par);\n  return par.sequential;\n}\n\n\n\n\nvar Fluture = Object.freeze({\n\tFuture: Future,\n\tdefault: Future,\n\tPar: Par,\n\tisParallel: isParallel,\n\tseq: seq,\n\tisFuture: isFuture,\n\treject: reject,\n\tof: of,\n\tnever: never,\n\tisNever: isNever,\n\tafter: after,\n\trejectAfter: rejectAfter,\n\tattempt: attempt,\n\ttry: attempt,\n\tcache: cache,\n\tencase: encase,\n\tencase2: encase2,\n\tencase3: encase3,\n\tencaseN: encaseN,\n\tencaseN2: encaseN2,\n\tencaseN3: encaseN3,\n\tencaseP: encaseP,\n\tencaseP2: encaseP2,\n\tencaseP3: encaseP3,\n\tgo: go,\n\tdo: go,\n\thook: hook,\n\tnode: node,\n\tparallel: parallel,\n\ttryP: tryP,\n\tap: ap,\n\talt: alt,\n\tmap: map,\n\tbimap: bimap,\n\tchain: chain,\n\tmapRej: mapRej,\n\tchainRej: chainRej,\n\tlastly: lastly,\n\tfinally: lastly,\n\tand: and,\n\tboth: both,\n\tor: or,\n\trace: race,\n\tswap: swap,\n\tfold: fold,\n\tdone: done,\n\tfork: fork,\n\tpromise: promise,\n\tvalue: value,\n\textractLeft: extractLeft,\n\textractRight: extractRight\n});\n\nvar index_cjs = Object.assign(Future, Fluture);\n\nreturn index_cjs;\n\n})));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexports.has = function (obj, prop) {\n    return _hasOwnProperty.call(obj, prop);\n};\n/**\n * Default function to compare element order.\n * @function\n */\nfunction defaultCompare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a === b) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nexports.defaultCompare = defaultCompare;\n/**\n * Default function to test equality.\n * @function\n */\nfunction defaultEquals(a, b) {\n    return a === b;\n}\nexports.defaultEquals = defaultEquals;\n/**\n * Default function to convert an object to a string.\n * @function\n */\nfunction defaultToString(item) {\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\nexports.defaultToString = defaultToString;\n/**\n* Joins all the properies of the object using the provided join string\n*/\nfunction makeString(item, join) {\n    if (join === void 0) { join = ','; }\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return item.toString();\n    }\n    else {\n        var toret = '{';\n        var first = true;\n        for (var prop in item) {\n            if (exports.has(item, prop)) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    toret = toret + join;\n                }\n                toret = toret + prop + ':' + item[prop];\n            }\n        }\n        return toret + '}';\n    }\n}\nexports.makeString = makeString;\n/**\n * Checks if the given argument is a function.\n * @function\n */\nfunction isFunction(func) {\n    return (typeof func) === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Checks if the given argument is undefined.\n * @function\n */\nfunction isUndefined(obj) {\n    return (typeof obj) === 'undefined';\n}\nexports.isUndefined = isUndefined;\n/**\n * Checks if the given argument is a string.\n * @function\n */\nfunction isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Reverses a compare function.\n * @function\n */\nfunction reverseCompareFunction(compareFunction) {\n    if (isUndefined(compareFunction) || !isFunction(compareFunction)) {\n        return function (a, b) {\n            if (a < b) {\n                return 1;\n            }\n            else if (a === b) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        };\n    }\n    else {\n        return function (d, v) {\n            return compareFunction(d, v) * -1;\n        };\n    }\n}\nexports.reverseCompareFunction = reverseCompareFunction;\n/**\n * Returns an equal function given a compare function.\n * @function\n */\nfunction compareToEquals(compareFunction) {\n    return function (a, b) {\n        return compareFunction(a, b) === 0;\n    };\n}\nexports.compareToEquals = compareToEquals;\n//# sourceMappingURL=util.js.map","//. # sanctuary-show\n//.\n//. Haskell has a `show` function which can be applied to a compatible value to\n//. produce a descriptive string representation of that value. The idea is that\n//. the string representation should, if possible, be an expression which would\n//. produce the original value if evaluated.\n//.\n//. This library provides a similar [`show`](#show) function.\n//.\n//. In general, this property should hold: `eval (show (x)) = x`. In some cases\n//. parens are necessary to ensure correct interpretation (`{}`, for example,\n//. is an empty block rather than an empty object in some contexts). Thus the\n//. property is more accurately stated `eval ('(' + show (x) + ')') = x`.\n//.\n//. One can make values of a custom type compatible with [`show`](#show) by\n//. defining a `@@show` method. For example:\n//.\n//. ```javascript\n//. //# Maybe#@@show :: Maybe a ~> () -> String\n//. //.\n//. //. ```javascript\n//. //. > show (Nothing)\n//. //. 'Nothing'\n//. //.\n//. //. > show (Just (['foo', 'bar', 'baz']))\n//. //. 'Just ([\"foo\", \"bar\", \"baz\"])'\n//. //. ```\n//. Maybe.prototype['@@show'] = function() {\n//.   return this.isNothing ? 'Nothing' : 'Just (' + show (this.value) + ')';\n//. };\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryShow = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$show :: String\n  var $$show = '@@show';\n\n  //  seen :: Array Any\n  var seen = [];\n\n  //  entry :: Object -> String -> String\n  function entry(o) {\n    return function(k) {\n      return show(k) + ': ' + show(o[k]);\n    };\n  }\n\n  //# show :: Showable a => a -> String\n  //.\n  //. Returns a useful string representation of the given value.\n  //.\n  //. Dispatches to the value's `@@show` method if present.\n  //.\n  //. Where practical, `show (eval ('(' + show (x) + ')')) = show (x)`.\n  //.\n  //. ```javascript\n  //. > show (null)\n  //. 'null'\n  //.\n  //. > show (undefined)\n  //. 'undefined'\n  //.\n  //. > show (true)\n  //. 'true'\n  //.\n  //. > show (new Boolean (false))\n  //. 'new Boolean (false)'\n  //.\n  //. > show (-0)\n  //. '-0'\n  //.\n  //. > show (NaN)\n  //. 'NaN'\n  //.\n  //. > show (new Number (Infinity))\n  //. 'new Number (Infinity)'\n  //.\n  //. > show ('foo\\n\"bar\"\\nbaz\\n')\n  //. '\"foo\\\\n\\\\\"bar\\\\\"\\\\nbaz\\\\n\"'\n  //.\n  //. > show (new String (''))\n  //. 'new String (\"\")'\n  //.\n  //. > show (['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > show ([[[[[0]]]]])\n  //. '[[[[[0]]]]]'\n  //.\n  //. > show ({x: [1, 2], y: [3, 4], z: [5, 6]})\n  //. '{\"x\": [1, 2], \"y\": [3, 4], \"z\": [5, 6]}'\n  //. ```\n  function show(x) {\n    if (seen.indexOf(x) >= 0) return '<Circular>';\n\n    switch (Object.prototype.toString.call(x)) {\n\n      case '[object Boolean]':\n        return typeof x === 'object' ?\n          'new Boolean (' + show(x.valueOf()) + ')' :\n          x.toString();\n\n      case '[object Number]':\n        return typeof x === 'object' ?\n          'new Number (' + show(x.valueOf()) + ')' :\n          1 / x === -Infinity ? '-0' : x.toString(10);\n\n      case '[object String]':\n        return typeof x === 'object' ?\n          'new String (' + show(x.valueOf()) + ')' :\n          JSON.stringify(x);\n\n      case '[object Date]':\n        return 'new Date (' +\n               show(isNaN(x.valueOf()) ? NaN : x.toISOString()) +\n               ')';\n\n      case '[object Error]':\n        return 'new ' + x.name + ' (' + show(x.message) + ')';\n\n      case '[object Arguments]':\n        return 'function () { return arguments; } (' +\n               Array.prototype.map.call(x, show).join(', ') +\n               ')';\n\n      case '[object Array]':\n        seen.push(x);\n        try {\n          return '[' + x.map(show).concat(\n            Object.keys(x)\n            .sort()\n            .filter(function(k) { return !/^\\d+$/.test(k); })\n            .map(entry(x))\n          ).join(', ') + ']';\n        } finally {\n          seen.pop();\n        }\n\n      case '[object Object]':\n        seen.push(x);\n        try {\n          return (\n            $$show in x &&\n            (x.constructor == null || x.constructor.prototype !== x) ?\n              x[$$show]() :\n              '{' + Object.keys(x).sort().map(entry(x)).join(', ') + '}'\n          );\n        } finally {\n          seen.pop();\n        }\n\n      default:\n        return String(x);\n\n    }\n  }\n\n  return show;\n\n}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary = /** @class */ (function () {\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function Dictionary(toStrFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStrFunction || util.defaultToString;\n    }\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (util.isUndefined(pair)) {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (util.isUndefined(previousElement)) {\n            this.nElements++;\n            ret = undefined;\n        }\n        else {\n            ret = previousElement.value;\n        }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (!util.isUndefined(previousElement)) {\n            delete this.table[k];\n            this.nElements--;\n            return previousElement.value;\n        }\n        return undefined;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    Dictionary.prototype.keys = function () {\n        var array = [];\n        for (var name_1 in this.table) {\n            if (util.has(this.table, name_1)) {\n                var pair = this.table[name_1];\n                array.push(pair.key);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    Dictionary.prototype.values = function () {\n        var array = [];\n        for (var name_2 in this.table) {\n            if (util.has(this.table, name_2)) {\n                var pair = this.table[name_2];\n                array.push(pair.value);\n            }\n        }\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this dictionary.\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    Dictionary.prototype.forEach = function (callback) {\n        for (var name_3 in this.table) {\n            if (util.has(this.table, name_3)) {\n                var pair = this.table[name_3];\n                var ret = callback(pair.key, pair.value);\n                if (ret === false) {\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        return !util.isUndefined(this.getValue(key));\n    };\n    /**\n    * Removes all mappings from this dictionary.\n    * @this {collections.Dictionary}\n    */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    Dictionary.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    Dictionary.prototype.toString = function () {\n        var toret = '{';\n        this.forEach(function (k, v) {\n            toret += \"\\n\\t\" + k + \" : \" + v;\n        });\n        return toret + '\\n}';\n    };\n    return Dictionary;\n}()); // End of dictionary\nexports.default = Dictionary;\n//# sourceMappingURL=Dictionary.js.map","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. sanctuary-type-identifiers comprises:\n//.\n//.   - an npm and browser -compatible package for deriving the\n//.     _type identifier_ of a JavaScript value; and\n//.   - a specification which authors may follow to specify type\n//.     identifiers for their types.\n//.\n//. ### Specification\n//.\n//. For a type to be compatible with the algorithm:\n//.\n//.   - every member of the type MUST have a `constructor` property\n//.     pointing to an object known as the _type representative_;\n//.\n//.   - the type representative MUST have a `@@type` property\n//.     (the _type identifier_); and\n//.\n//.   - the type identifier MUST be a string primitive and SHOULD have\n//.     format `'<namespace>/<name>[@<version>]'`, where:\n//.\n//.       - `<namespace>` MUST consist of one or more characters, and\n//.         SHOULD equal the name of the npm package which defines the\n//.         type (including [scope][3] where appropriate);\n//.\n//.       - `<name>` MUST consist of one or more characters, and SHOULD\n//.         be the unique name of the type; and\n//.\n//.       - `<version>` MUST consist of one or more digits, and SHOULD\n//.         represent the version of the type.\n//.\n//. If the type identifier does not conform to the format specified above,\n//. it is assumed that the entire string represents the _name_ of the type;\n//. _namespace_ will be `null` and _version_ will be `0`.\n//.\n//. If the _version_ is not given, it is assumed to be `0`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  pattern :: RegExp\n  var pattern = new RegExp(\n    '^'\n  + '([\\\\s\\\\S]+)'   //  <namespace>\n  + '/'             //  SOLIDUS (U+002F)\n  + '([\\\\s\\\\S]+?)'  //  <name>\n  + '(?:'           //  optional non-capturing group {\n  +   '@'           //    COMMERCIAL AT (U+0040)\n  +   '([0-9]+)'    //    <version>\n  + ')?'            //  }\n  + '$'\n  );\n\n  //. ### Usage\n  //.\n  //. ```javascript\n  //. const type = require('sanctuary-type-identifiers');\n  //. ```\n  //.\n  //. ```javascript\n  //. > function Identity(x) {\n  //. .   if (!(this instanceof Identity)) return new Identity(x);\n  //. .   this.value = x;\n  //. . }\n  //. . Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. > type.parse(type(Identity(0)))\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  //.\n  //. ### API\n  //.\n  //# type :: Any -> String\n  //.\n  //. Takes any value and returns a string which identifies its type. If the\n  //. value conforms to the [specification][4], the custom type identifier is\n  //. returned.\n  //.\n  //. ```javascript\n  //. > type(null)\n  //. 'Null'\n  //.\n  //. > type(true)\n  //. 'Boolean'\n  //.\n  //. > type(Identity(0))\n  //. 'my-package/Identity@1'\n  //. ```\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  //# type.parse :: String -> { namespace :: Nullable String, name :: String, version :: Number }\n  //.\n  //. Takes any string and parses it according to the [specification][4],\n  //. returning an object with `namespace`, `name`, and `version` fields.\n  //.\n  //. ```javascript\n  //. > type.parse('my-package/List@2')\n  //. {namespace: 'my-package', name: 'List', version: 2}\n  //.\n  //. > type.parse('nonsense!')\n  //. {namespace: null, name: 'nonsense!', version: 0}\n  //.\n  //. > type.parse(Identity['@@type'])\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  type.parse = function parse(s) {\n    var groups = pattern.exec(s);\n    return {\n      namespace: groups == null || groups[1] == null ? null : groups[1],\n      name:      groups == null                      ? s    : groups[2],\n      version:   groups == null || groups[3] == null ? 0    : Number(groups[3])\n    };\n  };\n\n  return type;\n\n}));\n\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: https://docs.npmjs.com/misc/scope\n//. [4]: #specification\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\n/**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */\nfunction indexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\n/**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */\nfunction lastIndexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = length - 1; i >= 0; i--) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.lastIndexOf = lastIndexOf;\n/**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */\nfunction contains(array, item, equalsFunction) {\n    return indexOf(array, item, equalsFunction) >= 0;\n}\nexports.contains = contains;\n/**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */\nfunction remove(array, item, equalsFunction) {\n    var index = indexOf(array, item, equalsFunction);\n    if (index < 0) {\n        return false;\n    }\n    array.splice(index, 1);\n    return true;\n}\nexports.remove = remove;\n/**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */\nfunction frequency(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    var freq = 0;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            freq++;\n        }\n    }\n    return freq;\n}\nexports.frequency = frequency;\n/**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */\nfunction equals(array1, array2, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    var length = array1.length;\n    for (var i = 0; i < length; i++) {\n        if (!equals(array1[i], array2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equals = equals;\n/**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */\nfunction copy(array) {\n    return array.concat();\n}\nexports.copy = copy;\n/**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */\nfunction swap(array, i, j) {\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        return false;\n    }\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return true;\n}\nexports.swap = swap;\nfunction toString(array) {\n    return '[' + array.toString() + ']';\n}\nexports.toString = toString;\n/**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */\nfunction forEach(array, callback) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var ele = array_1[_i];\n        if (callback(ele) === false) {\n            return;\n        }\n    }\n}\nexports.forEach = forEach;\n//# sourceMappingURL=arrays.js.map","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '8.2.1';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$toString :: Null ~> () -> String\n  function Null$prototype$toString() {\n    return 'null';\n  }\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$toString :: Undefined ~> () -> String\n  function Undefined$prototype$toString() {\n    return 'undefined';\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$toString :: Boolean ~> () -> String\n  function Boolean$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Boolean(' + toString(this.valueOf()) + ')' :\n      this.toString();\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$toString :: Number ~> () -> String\n  function Number$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Number(' + toString(this.valueOf()) + ')' :\n      1 / this === -Infinity ? '-0' : this.toString(10);\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$toString :: Date ~> () -> String\n  function Date$prototype$toString() {\n    var x = isNaN(this.valueOf()) ? NaN : this.toISOString();\n    return 'new Date(' + toString(x) + ')';\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$toString :: String ~> () -> String\n  function String$prototype$toString() {\n    return typeof this === 'object' ?\n      'new String(' + toString(this.valueOf()) + ')' :\n      JSON.stringify(this);\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$toString :: Array a ~> () -> String\n  function Array$prototype$toString() {\n    var reprs = this.map(toString);\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      if (!/^\\d+$/.test(k)) {\n        reprs.push(toString(k) + ': ' + toString(this[k]));\n      }\n    }\n    return '[' + reprs.join(', ') + ']';\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$toString :: Arguments ~> String\n  function Arguments$prototype$toString() {\n    var args = Array.prototype.map.call(this, toString).join(', ');\n    return '(function () { return arguments; }(' + args + '))';\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$toString :: Error ~> () -> String\n  function Error$prototype$toString() {\n    return 'new ' + this.name + '(' + toString(this.message) + ')';\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$toString :: StrMap a ~> () -> String\n  function Object$prototype$toString() {\n    var reprs = [];\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      reprs.push(toString(k) + ': ' + toString(this[k]));\n    }\n    return '{' + reprs.join(', ') + '}';\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'toString':                 Null$prototype$toString,\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'toString':                 Undefined$prototype$toString,\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'toString':                 Boolean$prototype$toString,\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'toString':                 Number$prototype$toString,\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'toString':                 Date$prototype$toString,\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'toString':                 String$prototype$toString,\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'toString':                 Array$prototype$toString,\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'toString':                 Arguments$prototype$toString,\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'toString':                 Error$prototype$toString,\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'toString':                 Object$prototype$toString,\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# toString :: a -> String\n  //.\n  //. Returns a useful string representation of its argument.\n  //.\n  //. Dispatches to the argument's `toString` method if appropriate.\n  //.\n  //. Where practical, `equals(eval(toString(x)), x) = true`.\n  //.\n  //. `toString` implementations are provided for the following built-in types:\n  //. Null, Undefined, Boolean, Number, Date, String, Array, Arguments, Error,\n  //. and Object.\n  //.\n  //. ```javascript\n  //. > toString(-0)\n  //. '-0'\n  //.\n  //. > toString(['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > toString({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > toString(Cons(1, Cons(2, Cons(3, Nil))))\n  //. 'Cons(1, Cons(2, Cons(3, Nil)))'\n  //. ```\n  var toString = (function() {\n    //  $seen :: Array Any\n    var $seen = [];\n\n    function call(method, x) {\n      $seen.push(x);\n      try { return method.call(x); } finally { $seen.pop(); }\n    }\n\n    return function toString(x) {\n      if ($seen.indexOf(x) >= 0) return '<Circular>';\n\n      var xType = type(x);\n      if (xType === 'Object') {\n        var result;\n        try { result = call(x.toString, x); } catch (err) {}\n        if (result != null && result !== '[object Object]') return result;\n      }\n\n      return call(implPath([xType, 'prototype', 'toString']) || x.toString, x);\n    };\n  }());\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    toString: toString,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*    #######\n   ####     ####\n ####   ###   ####\n#####   ###########   sanctuary\n########   ########   noun\n###########   #####   1 [ mass noun ] refuge from unsafe JavaScript\n ####   ###   ####\n   ####     ####\n      #######    */\n\n//. # Sanctuary\n//.\n//. [![npm](https://img.shields.io/npm/v/sanctuary.svg)](https://www.npmjs.com/package/sanctuary)\n//. [![CircleCI](https://img.shields.io/circleci/project/github/sanctuary-js/sanctuary/master.svg)](https://circleci.com/gh/sanctuary-js/sanctuary/tree/master)\n//. [![Gitter](https://img.shields.io/gitter/room/badges/shields.svg)](https://gitter.im/sanctuary-js/sanctuary)\n//.\n//. Sanctuary is a JavaScript functional programming library inspired by\n//. [Haskell][] and [PureScript][]. It's stricter than [Ramda][], and\n//. provides a similar suite of functions.\n//.\n//. Sanctuary promotes programs composed of simple, pure functions. Such\n//. programs are easier to comprehend, test, and maintain &ndash; they are\n//. also a pleasure to write.\n//.\n//. Sanctuary provides two data types, [Maybe][] and [Either][], both of\n//. which are compatible with [Fantasy Land][]. Thanks to these data types\n//. even Sanctuary functions which may fail, such as [`head`](#head), are\n//. composable.\n//.\n//. Sanctuary makes it possible to write safe code without null checks.\n//. In JavaScript it's trivial to introduce a possible run-time type error:\n//.\n//.     words[0].toUpperCase()\n//.\n//. If `words` is `[]` we'll get a familiar error at run-time:\n//.\n//.     TypeError: Cannot read property 'toUpperCase' of undefined\n//.\n//. Sanctuary gives us a fighting chance of avoiding such errors. We might\n//. write:\n//.\n//.     S.map (S.toUpper) (S.head (words))\n//.\n//. Sanctuary is designed to work in Node.js and in ES5-compatible browsers.\n//.\n//. ## Ramda\n//.\n//. [Ramda][] provides several functions which return problematic values\n//. such as `undefined`, `Infinity`, or `NaN` when applied to unsuitable\n//. inputs. These are known as [partial functions][]. Partial functions\n//. necessitate the use of guards or null checks. In order to safely use\n//. `R.head`, for example, one must ensure that the array is non-empty:\n//.\n//.     if (R.isEmpty (xs)) {\n//.       // ...\n//.     } else {\n//.       return f (R.head (xs));\n//.     }\n//.\n//. Using the Maybe type renders such guards (and null checks) unnecessary.\n//. Changing functions such as `R.head` to return Maybe values was proposed\n//. in [ramda/ramda#683][], but was considered too much of a stretch for\n//. JavaScript programmers. Sanctuary was released the following month,\n//. in January 2015, as a companion library to Ramda.\n//.\n//. In addition to broadening in scope in the years since its release,\n//. Sanctuary's philosophy has diverged from Ramda's in several respects.\n//.\n//. ### Totality\n//.\n//. Every Sanctuary function is defined for every value which is a member of\n//. the function's input type. Such functions are known as [total functions][].\n//. Ramda, on the other hand, contains a number of [partial functions][].\n//.\n//. ### Information preservation\n//.\n//. Certain Sanctuary functions preserve more information than their Ramda\n//. counterparts. Examples:\n//.\n//.     |> R.tail ([])                      |> S.tail ([])\n//.     []                                  Nothing\n//.\n//.     |> R.tail (['foo'])                 |> S.tail (['foo'])\n//.     []                                  Just ([])\n//.\n//.     |> R.replace (/^x/) ('') ('abc')    |> S.stripPrefix ('x') ('abc')\n//.     'abc'                               Nothing\n//.\n//.     |> R.replace (/^x/) ('') ('xabc')   |> S.stripPrefix ('x') ('xabc')\n//.     'abc'                               Just ('abc')\n//.\n//. ### Invariants\n//.\n//. Sanctuary performs rigorous [type checking][] of inputs and outputs, and\n//. throws a descriptive error if a type error is encountered. This allows bugs\n//. to be caught and fixed early in the development cycle.\n//.\n//. Ramda operates on the [garbage in, garbage out][GIGO] principal. Functions\n//. are documented to take arguments of particular types, but these invariants\n//. are not enforced. The problem with this approach in a language as\n//. permissive as JavaScript is that there's no guarantee that garbage input\n//. will produce garbage output ([ramda/ramda#1413][]). Ramda performs ad hoc\n//. type checking in some such cases ([ramda/ramda#1419][]).\n//.\n//. Sanctuary can be configured to operate in garbage in, garbage out mode.\n//. Ramda cannot be configured to enforce its invariants.\n//.\n//. ### Currying\n//.\n//. Sanctuary functions are curried. There is, for example, exactly one way to\n//. apply `S.reduce` to `S.add`, `0`, and `xs`:\n//.\n//.   - `S.reduce (S.add) (0) (xs)`\n//.\n//. Ramda functions are also curried, but in a complex manner. There are four\n//. ways to apply `R.reduce` to `R.add`, `0`, and `xs`:\n//.\n//.   - `R.reduce (R.add) (0) (xs)`\n//.   - `R.reduce (R.add) (0, xs)`\n//.   - `R.reduce (R.add, 0) (xs)`\n//.   - `R.reduce (R.add, 0, xs)`\n//.\n//. Ramda supports all these forms because curried functions enable partial\n//. application, one of the library's tenets, but `f(x)(y)(z)` is considered\n//. too unfamiliar and too unattractive to appeal to JavaScript programmers.\n//.\n//. Sanctuary's developers prefer a simple, unfamiliar construct to a complex,\n//. familiar one. Familiarity can be acquired; complexity is intrinsic.\n//.\n//. The lack of breathing room in `f(x)(y)(z)` impairs readability. The simple\n//. solution to this problem, proposed in [#438][], is to include a space when\n//. applying a function: `f (x) (y) (z)`.\n//.\n//. Ramda also provides a special placeholder value, [`R.__`][], which removes\n//. the restriction that a function must be applied to its arguments in order.\n//. The following expressions are equivalent:\n//.\n//.   - `R.reduce (R.__, 0, xs) (R.add)`\n//.   - `R.reduce (R.add, R.__, xs) (0)`\n//.   - `R.reduce (R.__, 0) (R.add) (xs)`\n//.   - `R.reduce (R.__, 0) (R.add, xs)`\n//.   - `R.reduce (R.__, R.__, xs) (R.add) (0)`\n//.   - `R.reduce (R.__, R.__, xs) (R.add, 0)`\n//.\n//. ### Variadic functions\n//.\n//. Ramda provides several functions which take any number of arguments. These\n//. are known as [variadic functions][]. Additionally, Ramda provides several\n//. functions which take variadic functions as arguments. Although natural in\n//. a dynamically typed language, variadic functions are at odds with the type\n//. notation Ramda and Sanctuary both use, leading to some indecipherable type\n//. signatures such as this one:\n//.\n//.     R.lift :: (*... -> *...) -> ([*]... -> [*])\n//.\n//. Sanctuary has no variadic functions, nor any functions which take variadic\n//. functions as arguments. Sanctuary provides two \"lift\" functions, each with\n//. a helpful type signature:\n//.\n//.     S.lift2 :: Apply f => (a -> b -> c) -> f a -> f b -> f c\n//.     S.lift3 :: Apply f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d\n//.\n//. ### Implicit context\n//.\n//. Ramda provides [`R.bind`][] and [`R.invoker`][] for working with methods.\n//. Additionally, many Ramda functions use `Function#call` or `Function#apply`\n//. to preserve context. Sanctuary makes no allowances for `this`.\n//.\n//. ### Transducers\n//.\n//. Several Ramda functions act as transducers. Sanctuary provides no support\n//. for transducers.\n//.\n//. ### Modularity\n//.\n//. Whereas Ramda has no dependencies, Sanctuary has a modular design:\n//. [sanctuary-def][] provides type checking, [sanctuary-type-classes][]\n//. provides Fantasy Land functions and type classes, [sanctuary-show][]\n//. provides string representations, and algebraic data types are provided\n//. by [sanctuary-either][], [sanctuary-maybe][], and [sanctuary-pair][].\n//. Not only does this approach reduce the complexity of Sanctuary itself,\n//. but it allows these components to be reused in other contexts.\n//.\n//. ## Types\n//.\n//. Sanctuary uses Haskell-like type signatures to describe the types of\n//. values, including functions. `'foo'`, for example, is a member of `String`;\n//. `[1, 2, 3]` is a member of `Array Number`. The double colon (`::`) is used\n//. to mean \"is a member of\", so one could write:\n//.\n//.     'foo' :: String\n//.     [1, 2, 3] :: Array Number\n//.\n//. An identifier may appear to the left of the double colon:\n//.\n//.     Math.PI :: Number\n//.\n//. The arrow (`->`) is used to express a function's type:\n//.\n//.     Math.abs :: Number -> Number\n//.\n//. That states that `Math.abs` is a unary function which takes an argument\n//. of type `Number` and returns a value of type `Number`.\n//.\n//. Some functions are parametrically polymorphic: their types are not fixed.\n//. Type variables are used in the representations of such functions:\n//.\n//.     S.I :: a -> a\n//.\n//. `a` is a type variable. Type variables are not capitalized, so they\n//. are differentiable from type identifiers (which are always capitalized).\n//. By convention type variables have single-character names. The signature\n//. above states that `S.I` takes a value of any type and returns a value of\n//. the same type. Some signatures feature multiple type variables:\n//.\n//.     S.K :: a -> b -> a\n//.\n//. It must be possible to replace all occurrences of `a` with a concrete type.\n//. The same applies for each other type variable. For the function above, the\n//. types with which `a` and `b` are replaced may be different, but needn't be.\n//.\n//. Since all Sanctuary functions are curried (they accept their arguments\n//. one at a time), a binary function is represented as a unary function which\n//. returns a unary function: `* -> * -> *`. This aligns neatly with Haskell,\n//. which uses curried functions exclusively. In JavaScript, though, we may\n//. wish to represent the types of functions with arities less than or greater\n//. than one. The general form is `(<input-types>) -> <output-type>`, where\n//. `<input-types>` comprises zero or more comma–space (<code>, </code>)\n//. -separated type representations:\n//.\n//.   - `() -> String`\n//.   - `(a, b) -> a`\n//.   - `(a, b, c) -> d`\n//.\n//. `Number -> Number` can thus be seen as shorthand for `(Number) -> Number`.\n//.\n//. The question mark (`?`) is used to represent types which include `null`\n//. and `undefined` as members. `String?`, for example, represents the type\n//. comprising `null`, `undefined`, and all strings.\n//.\n//. Sanctuary embraces types. JavaScript doesn't support algebraic data types,\n//. but these can be simulated by providing a group of data constructors which\n//. return values with the same set of methods. A value of the Either type, for\n//. example, is created via the Left constructor or the Right constructor.\n//.\n//. It's necessary to extend Haskell's notation to describe implicit arguments\n//. to the *methods* provided by Sanctuary's types. In `x.map(y)`, for example,\n//. the `map` method takes an implicit argument `x` in addition to the explicit\n//. argument `y`. The type of the value upon which a method is invoked appears\n//. at the beginning of the signature, separated from the arguments and return\n//. value by a squiggly arrow (`~>`). The type of the `fantasy-land/map` method\n//. of the Maybe type is written `Maybe a ~> (a -> b) -> Maybe b`. One could\n//. read this as:\n//.\n//. _When the `fantasy-land/map` method is invoked on a value of type `Maybe a`\n//. (for any type `a`) with an argument of type `a -> b` (for any type `b`),\n//. it returns a value of type `Maybe b`._\n//.\n//. The squiggly arrow is also used when representing non-function properties.\n//. `Maybe a ~> Boolean`, for example, represents a Boolean property of a value\n//. of type `Maybe a`.\n//.\n//. Sanctuary supports type classes: constraints on type variables. Whereas\n//. `a -> a` implicitly supports every type, `Functor f => (a -> b) -> f a ->\n//. f b` requires that `f` be a type which satisfies the requirements of the\n//. Functor type class. Type-class constraints appear at the beginning of a\n//. type signature, separated from the rest of the signature by a fat arrow\n//. (`=>`).\n//.\n//. ## Type checking\n//.\n//. Sanctuary functions are defined via [sanctuary-def][] to provide run-time\n//. type checking. This is tremendously useful during development: type errors\n//. are reported immediately, avoiding circuitous stack traces (at best) and\n//. silent failures due to type coercion (at worst). For example:\n//.\n//. ```javascript\n//. S.add (2) (true);\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: FiniteNumber -> FiniteNumber -> FiniteNumber\n//. //                          ^^^^^^^^^^^^\n//. //                               1\n//. //\n//. //   1)  true :: Boolean\n//. //\n//. //   The value at position 1 is not a member of ‘FiniteNumber’.\n//. //\n//. //   See v:sanctuary-js/sanctuary-def#FiniteNumber for information about the sanctuary-def/FiniteNumber type.\n//. ```\n//.\n//. Compare this to the behaviour of Ramda's unchecked equivalent:\n//.\n//. ```javascript\n//. R.add (2) (true);\n//. // => 3\n//. ```\n//.\n//. There is a performance cost to run-time type checking. Type checking is\n//. disabled by default if `process.env.NODE_ENV` is `'production'`. If this\n//. rule is unsuitable for a given program, one may use [`create`](#create)\n//. to create a Sanctuary module based on a different rule. For example:\n//.\n//. ```javascript\n//. const S = sanctuary.create ({\n//.   checkTypes: localStorage.getItem ('SANCTUARY_CHECK_TYPES') === 'true',\n//.   env: sanctuary.env,\n//. });\n//. ```\n//.\n//. Occasionally one may wish to perform an operation which is not type safe,\n//. such as mapping over an object with heterogeneous values. This is possible\n//. via selective use of [`unchecked`](#unchecked) functions.\n//.\n//. ## Installation\n//.\n//. `npm install sanctuary` will install Sanctuary for use in Node.js.\n//.\n//. Running Sanctuary in the browser is more involved. One must include a\n//. `<script>` for each dependency in addition to one for Sanctuary itself:\n//.\n//. ```html\n//. <script src=\"vendor/sanctuary-show.js\"></script>\n//. <script src=\"vendor/sanctuary-type-identifiers.js\"></script>\n//. <script src=\"vendor/sanctuary-type-classes.js\"></script>\n//. <script src=\"vendor/sanctuary-either.js\"></script>\n//. <script src=\"vendor/sanctuary-maybe.js\"></script>\n//. <script src=\"vendor/sanctuary-pair.js\"></script>\n//. <script src=\"vendor/sanctuary-def.js\"></script>\n//. <script src=\"vendor/sanctuary.js\"></script>\n//. ```\n//.\n//. To ensure compatibility one should use the dependency versions specified\n//. in __package.json__.\n//.\n//. For convenience one could define aliases for various modules:\n//.\n//. ```javascript\n//. const S = window.sanctuary;\n//. const $ = window.sanctuaryDef;\n//. // ...\n//. ```\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-def'),\n                        require ('sanctuary-either'),\n                        require ('sanctuary-maybe'),\n                        require ('sanctuary-pair'),\n                        require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'),\n                        require ('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-def',\n             'sanctuary-either',\n             'sanctuary-maybe',\n             'sanctuary-pair',\n             'sanctuary-show',\n             'sanctuary-type-classes',\n             'sanctuary-type-identifiers'],\n            f);\n  } else {\n    self.sanctuary = f (self.sanctuaryDef,\n                        self.sanctuaryEither,\n                        self.sanctuaryMaybe,\n                        self.sanctuaryPair,\n                        self.sanctuaryShow,\n                        self.sanctuaryTypeClasses,\n                        self.sanctuaryTypeIdentifiers);\n  }\n\n} (function($, Either, Maybe, Pair, show, Z, type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* eslint-disable no-unused-vars */\n    var Descending = __doctest.require ('sanctuary-descending');\n    var Nil = (__doctest.require ('./test/internal/List')).Nil;\n    var Cons = (__doctest.require ('./test/internal/List')).Cons;\n    var Sum = __doctest.require ('./test/internal/Sum');\n    var S = (function(S) {\n      //  DescendingType :: Type -> Type\n      var DescendingType = $.UnaryType\n        ('sanctuary/Descending')\n        ('')\n        (typeEq (Descending['@@type']))\n        (B (of (Array)) (Z.extract));\n\n      var S_ = S.create ({\n        checkTypes: true,\n        env: S.env.concat ([\n          DescendingType ($.Unknown),\n          (__doctest.require ('./test/internal/List')).Type ($.Unknown),\n          Sum.Type\n        ])\n      });\n      S_.env = S.env;  // see S.env doctest\n      return S_;\n    } (require ('.')));\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  Left :: a -> Either a b\n  var Left = Either.Left;\n\n  //  Right :: b -> Either a b\n  var Right = Either.Right;\n\n  //  Nothing :: Maybe a\n  var Nothing = Maybe.Nothing;\n\n  //  Just :: a -> Maybe a\n  var Just = Maybe.Just;\n\n  //  B :: (b -> c) -> (a -> b) -> a -> c\n  function B(f) {\n    return function(g) {\n      return function(x) {\n        return f (g (x));\n      };\n    };\n  }\n\n  //  C :: (a -> b -> c) -> b -> a -> c\n  function C(f) {\n    return function(y) {\n      return function(x) {\n        return f (x) (y);\n      };\n    };\n  }\n\n  //  Fn :: Type -> Type -> Type\n  function Fn(x) {\n    return function(y) {\n      return $.Function ([x, y]);\n    };\n  }\n\n  //  get_ :: String -> a -> Maybe b\n  function get_(key) {\n    return B (function(obj) { return key in obj ? Just (obj[key]) : Nothing; })\n             (toObject);\n  }\n\n  //  invoke0 :: String -> a -> b\n  function invoke0(name) {\n    return function(target) {\n      return target[name] ();\n    };\n  }\n\n  //  invoke1 :: String -> a -> b -> c\n  function invoke1(name) {\n    return function(x) {\n      return function(target) {\n        return target[name] (x);\n      };\n    };\n  }\n\n  //  toObject :: a -> Object\n  function toObject(x) {\n    return x == null ? Object.create (null) : Object (x);\n  }\n\n  //  typeEq :: String -> a -> Boolean\n  function typeEq(typeIdent) {\n    return function(x) {\n      return type (x) === typeIdent;\n    };\n  }\n\n  //  value :: { value :: a } -> a\n  function value(r) {\n    return r.value;\n  }\n\n  //  :: Type\n  var a = $.TypeVariable ('a');\n  var b = $.TypeVariable ('b');\n  var c = $.TypeVariable ('c');\n  var d = $.TypeVariable ('d');\n  var e = $.TypeVariable ('e');\n  var g = $.TypeVariable ('g');\n  var l = $.TypeVariable ('l');\n  var r = $.TypeVariable ('r');\n\n  //  :: Type -> Type\n  var f = $.UnaryTypeVariable ('f');\n  var m = $.UnaryTypeVariable ('m');\n  var t = $.UnaryTypeVariable ('t');\n  var w = $.UnaryTypeVariable ('w');\n\n  //  :: Type -> Type -> Type\n  var p = $.BinaryTypeVariable ('p');\n  var s = $.BinaryTypeVariable ('s');\n\n  //  $Either :: Type -> Type -> Type\n  var $Either = $.BinaryType\n    ('sanctuary/Either')\n    ('https://github.com/sanctuary-js/sanctuary-either')\n    (typeEq ('sanctuary-either/Either@1'))\n    (either (of (Array)) (K ([])))\n    (either (K ([])) (of (Array)));\n\n  //  $Maybe :: Type -> Type\n  var $Maybe = $.UnaryType\n    ('sanctuary/Maybe')\n    ('https://github.com/sanctuary-js/sanctuary-maybe')\n    (typeEq ('sanctuary-maybe/Maybe@1'))\n    (maybe ([]) (of (Array)));\n\n  //  $Pair :: Type -> Type -> Type\n  var $Pair = $.BinaryType\n    ('sanctuary/Pair')\n    ('https://github.com/sanctuary-js/sanctuary-pair')\n    (typeEq ('sanctuary-pair/Pair@1'))\n    (function(pair) { return [pair.fst]; })\n    (function(pair) { return [pair.snd]; });\n\n  //  TypeRep :: Type -> Type\n  var TypeRep = $.UnaryType\n    ('sanctuary/TypeRep')\n    ('https://github.com/fantasyland/fantasy-land#type-representatives')\n    (function(x) {\n       return $.AnyFunction._test (x) ||\n              x != null && $.String._test (x['@@type']);\n     })\n    (K ([]));\n\n  //  Options :: Type\n  var Options = $.RecordType ({checkTypes: $.Boolean, env: $.Array ($.Any)});\n\n  var _ = {};\n\n  //. ### Configure\n\n  //# create :: { checkTypes :: Boolean, env :: Array Type } -> Module\n  //.\n  //. Takes an options record and returns a Sanctuary module. `checkTypes`\n  //. specifies whether to enable type checking. The module's polymorphic\n  //. functions (such as [`I`](#I)) require each value associated with a\n  //. type variable to be a member of at least one type in the environment.\n  //.\n  //. A well-typed application of a Sanctuary function will produce the same\n  //. result regardless of whether type checking is enabled. If type checking\n  //. is enabled, a badly typed application will produce an exception with a\n  //. descriptive error message.\n  //.\n  //. The following snippet demonstrates defining a custom type and using\n  //. `create` to produce a Sanctuary module which is aware of that type:\n  //.\n  //. ```javascript\n  //. const {create, env} = require ('sanctuary');\n  //. const $ = require ('sanctuary-def');\n  //. const type = require ('sanctuary-type-identifiers');\n  //.\n  //. //    Identity :: a -> Identity a\n  //. const Identity = x => {\n  //.   const identity = Object.create (Identity$prototype);\n  //.   identity.value = x;\n  //.   return identity;\n  //. };\n  //.\n  //. Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. const Identity$prototype = {\n  //.   'constructor': Identity,\n  //.   '@@show': function() { return `Identity (${S.show (this.value)})`; },\n  //.   'fantasy-land/map': function(f) { return Identity (f (this.value)); },\n  //. };\n  //.\n  //. //    IdentityType :: Type -> Type\n  //. const IdentityType = $.UnaryType\n  //.   (Identity['@@type'])\n  //.   ('http://example.com/my-package#Identity')\n  //.   (x => type (x) === Identity['@@type'])\n  //.   (identity => [identity.value]);\n  //.\n  //. const S = create ({\n  //.   checkTypes: process.env.NODE_ENV !== 'production',\n  //.   env: env.concat ([IdentityType ($.Unknown)]),\n  //. });\n  //.\n  //. S.map (S.sub (1)) (Identity (43));\n  //. // => Identity (42)\n  //. ```\n  //.\n  //. See also [`env`](#env).\n  function create(opts) {\n    var def = $.create (opts);\n    var S = {\n      env: opts.env,\n      is: def ('is') ({}) ([$.Type, $.Any, $.Boolean]) ($.test (opts.env)),\n      MaybeType: $Maybe,\n      Maybe: Maybe,\n      Nothing: Nothing,\n      EitherType: $Either,\n      Either: Either,\n      PairType: $Pair\n    };\n    (Object.keys (_)).forEach (function(name) {\n      S[name] = def (name) (_[name].consts) (_[name].types) (_[name].impl);\n    });\n    S.unchecked = opts.checkTypes ? create ({checkTypes: false, env: opts.env})\n                                  : S;\n    return S;\n  }\n  _.create = {\n    consts: {},\n    types: [Options, $.Object],\n    impl: create\n  };\n\n  //# env :: Array Type\n  //.\n  //. The Sanctuary module's environment (`(S.create ({checkTypes, env})).env`\n  //. is a reference to `env`). Useful in conjunction with [`create`](#create).\n  //.\n  //. ```javascript\n  //. > S.env\n  //. [ $.AnyFunction,\n  //. . $.Arguments,\n  //. . $.Array ($.Unknown),\n  //. . $.Boolean,\n  //. . $.Date,\n  //. . $.Error,\n  //. . $.HtmlElement,\n  //. . $.Null,\n  //. . $.Number,\n  //. . $.Object,\n  //. . $.RegExp,\n  //. . $.StrMap ($.Unknown),\n  //. . $.String,\n  //. . $.Symbol,\n  //. . $.Undefined,\n  //. . $.FiniteNumber,\n  //. . $.NonZeroFiniteNumber,\n  //. . S.EitherType ($.Unknown) ($.Unknown),\n  //. . $.Function ([$.Unknown, $.Unknown]),\n  //. . $.GlobalRegExp,\n  //. . $.NonGlobalRegExp,\n  //. . $.Integer,\n  //. . $.NonNegativeInteger,\n  //. . S.MaybeType ($.Unknown),\n  //. . $.Array2 ($.Unknown) ($.Unknown),\n  //. . S.PairType ($.Unknown) ($.Unknown),\n  //. . $.RegexFlags,\n  //. . $.Type,\n  //. . $.TypeClass,\n  //. . $.ValidDate,\n  //. . $.ValidNumber ]\n  //. ```\n\n  //# unchecked :: Module\n  //.\n  //. A complete Sanctuary module which performs no type checking. This is\n  //. useful as it permits operations which Sanctuary's type checking would\n  //. disallow, such as mapping over an object with heterogeneous values.\n  //.\n  //. See also [`create`](#create).\n  //.\n  //. ```javascript\n  //. > S.unchecked.map (S.show) ({x: 'foo', y: true, z: 42})\n  //. {x: '\"foo\"', y: 'true', z: '42'}\n  //. ```\n  //.\n  //. Opting out of type checking may cause type errors to go unnoticed.\n  //.\n  //. ```javascript\n  //. > S.unchecked.add (2) ('2')\n  //. '22'\n  //. ```\n\n  //. ### Classify\n\n  //# type :: Any -> { namespace :: Maybe String, name :: String, version :: NonNegativeInteger }\n  //.\n  //. Returns the result of parsing the [type identifier][] of the given value.\n  //.\n  //. ```javascript\n  //. > S.type (S.Just (42))\n  //. {namespace: Just ('sanctuary-maybe'), name: 'Maybe', version: 1}\n  //.\n  //. > S.type ([1, 2, 3])\n  //. {namespace: Nothing, name: 'Array', version: 0}\n  //. ```\n  function type_(x) {\n    var r = type.parse (type (x));\n    r.namespace = toMaybe (r.namespace);\n    return r;\n  }\n  _.type = {\n    consts: {},\n    types: [$.Any,\n            $.RecordType ({namespace: $Maybe ($.String),\n                           name: $.String,\n                           version: $.NonNegativeInteger})],\n    impl: type_\n  };\n\n  //# is :: Type -> Any -> Boolean\n  //.\n  //. Returns `true` [iff][] the given value is a member of the specified type.\n  //. See [`$.test`][] for details.\n  //.\n  //. ```javascript\n  //. > S.is ($.Array ($.Integer)) ([1, 2, 3])\n  //. true\n  //.\n  //. > S.is ($.Array ($.Integer)) ([1, 2, 3.14])\n  //. false\n  //. ```\n\n  //. ### Showable\n\n  //# show :: Any -> String\n  //.\n  //. Alias of [`show`][].\n  //.\n  //. ```javascript\n  //. > S.show (-0)\n  //. '-0'\n  //.\n  //. > S.show (['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > S.show ({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > S.show (S.Left (S.Right (S.Just (S.Nothing))))\n  //. 'Left (Right (Just (Nothing)))'\n  //. ```\n  _.show = {\n    consts: {},\n    types: [$.Any, $.String],\n    impl: show\n  };\n\n  //. ### Fantasy Land\n  //.\n  //. Sanctuary is compatible with the [Fantasy Land][] specification.\n\n  //# equals :: Setoid a => a -> a -> Boolean\n  //.\n  //. Curried version of [`Z.equals`][] which requires two arguments of the\n  //. same type.\n  //.\n  //. To compare values of different types first use [`create`](#create) to\n  //. create a Sanctuary module with type checking disabled, then use that\n  //. module's `equals` function.\n  //.\n  //. ```javascript\n  //. > S.equals (0) (-0)\n  //. true\n  //.\n  //. > S.equals (NaN) (NaN)\n  //. true\n  //.\n  //. > S.equals (S.Just ([1, 2, 3])) (S.Just ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (S.Just ([1, 2, 3])) (S.Just ([1, 2, 4]))\n  //. false\n  //. ```\n  _.equals = {\n    consts: {a: [Z.Setoid]},\n    types: [a, a, $.Boolean],\n    impl: curry2 (Z.equals)\n  };\n\n  //# lt :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is less than the first\n  //. according to [`Z.lt`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.lt (3)) ([1, 2, 3, 4, 5])\n  //. [1, 2]\n  //. ```\n  function lt(y) {\n    return function(x) {\n      return Z.lt (x, y);\n    };\n  }\n  _.lt = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: lt\n  };\n\n  //# lte :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is less than or equal to\n  //. the first according to [`Z.lte`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (3)) ([1, 2, 3, 4, 5])\n  //. [1, 2, 3]\n  //. ```\n  function lte(y) {\n    return function(x) {\n      return Z.lte (x, y);\n    };\n  }\n  _.lte = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: lte\n  };\n\n  //# gt :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is greater than the first\n  //. according to [`Z.gt`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.gt (3)) ([1, 2, 3, 4, 5])\n  //. [4, 5]\n  //. ```\n  function gt(y) {\n    return function(x) {\n      return Z.gt (x, y);\n    };\n  }\n  _.gt = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: gt\n  };\n\n  //# gte :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is greater than or equal\n  //. to the first according to [`Z.gte`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.gte (3)) ([1, 2, 3, 4, 5])\n  //. [3, 4, 5]\n  //. ```\n  function gte(y) {\n    return function(x) {\n      return Z.gte (x, y);\n    };\n  }\n  _.gte = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: gte\n  };\n\n  //# min :: Ord a => a -> a -> a\n  //.\n  //. Returns the smaller of its two arguments (according to [`Z.lte`][]).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > S.min (10) (2)\n  //. 2\n  //.\n  //. > S.min (new Date ('1999-12-31')) (new Date ('2000-01-01'))\n  //. new Date ('1999-12-31')\n  //.\n  //. > S.min ('10') ('2')\n  //. '10'\n  //. ```\n  _.min = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, a],\n    impl: curry2 (Z.min)\n  };\n\n  //# max :: Ord a => a -> a -> a\n  //.\n  //. Returns the larger of its two arguments (according to [`Z.lte`][]).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > S.max (10) (2)\n  //. 10\n  //.\n  //. > S.max (new Date ('1999-12-31')) (new Date ('2000-01-01'))\n  //. new Date ('2000-01-01')\n  //.\n  //. > S.max ('10') ('2')\n  //. '2'\n  //. ```\n  _.max = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, a],\n    impl: curry2 (Z.max)\n  };\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.id`][].\n  //.\n  //. ```javascript\n  //. > S.id (Function) (42)\n  //. 42\n  //. ```\n  _.id = {\n    consts: {c: [Z.Category]},\n    types: [TypeRep (c), c],\n    impl: Z.id\n  };\n\n  //# concat :: Semigroup a => a -> a -> a\n  //.\n  //. Curried version of [`Z.concat`][].\n  //.\n  //. ```javascript\n  //. > S.concat ('abc') ('def')\n  //. 'abcdef'\n  //.\n  //. > S.concat ([1, 2, 3]) ([4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > S.concat ({x: 1, y: 2}) ({y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > S.concat (S.Just ([1, 2, 3])) (S.Just ([4, 5, 6]))\n  //. Just ([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat (Sum (18)) (Sum (24))\n  //. Sum (42)\n  //. ```\n  _.concat = {\n    consts: {a: [Z.Semigroup]},\n    types: [a, a, a],\n    impl: curry2 (Z.concat)\n  };\n\n  //# empty :: Monoid a => TypeRep a -> a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.empty`][].\n  //.\n  //. ```javascript\n  //. > S.empty (String)\n  //. ''\n  //.\n  //. > S.empty (Array)\n  //. []\n  //.\n  //. > S.empty (Object)\n  //. {}\n  //.\n  //. > S.empty (Sum)\n  //. Sum (0)\n  //. ```\n  _.empty = {\n    consts: {a: [Z.Monoid]},\n    types: [TypeRep (a), a],\n    impl: Z.empty\n  };\n\n  //# invert :: Group g => g -> g\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.invert`][].\n  //.\n  //. ```javascript\n  //. > S.invert (Sum (5))\n  //. Sum (-5)\n  //. ```\n  _.invert = {\n    consts: {g: [Z.Group]},\n    types: [g, g],\n    impl: Z.invert\n  };\n\n  //# filter :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.filter`][]. Discards every element which does not\n  //. satisfy the predicate.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > S.filter (S.odd) ([1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > S.filter (S.odd) ({x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > S.filter (S.odd) (S.Nothing)\n  //. Nothing\n  //.\n  //. > S.filter (S.odd) (S.Just (0))\n  //. Nothing\n  //.\n  //. > S.filter (S.odd) (S.Just (1))\n  //. Just (1)\n  //. ```\n  function filter(pred) {\n    return function(filterable) {\n      return Z.filter (pred, filterable);\n    };\n  }\n  _.filter = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: filter\n  };\n\n  //# reject :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.reject`][]. Discards every element which satisfies\n  //. the predicate.\n  //.\n  //. See also [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > S.reject (S.odd) ([1, 2, 3])\n  //. [2]\n  //.\n  //. > S.reject (S.odd) ({x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > S.reject (S.odd) (S.Nothing)\n  //. Nothing\n  //.\n  //. > S.reject (S.odd) (S.Just (0))\n  //. Just (0)\n  //.\n  //. > S.reject (S.odd) (S.Just (1))\n  //. Nothing\n  //. ```\n  _.reject = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: curry2 (Z.reject)\n  };\n\n  //# takeWhile :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.takeWhile`][]. Discards the first element which\n  //. does not satisfy the predicate, and all subsequent elements.\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > S.takeWhile (S.odd) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. [3, 3, 3, 7]\n  //.\n  //. > S.takeWhile (S.even) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. []\n  //. ```\n  _.takeWhile = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: curry2 (Z.takeWhile)\n  };\n\n  //# dropWhile :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.dropWhile`][]. Retains the first element which\n  //. does not satisfy the predicate, and all subsequent elements.\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > S.dropWhile (S.odd) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. [6, 3, 5, 4]\n  //.\n  //. > S.dropWhile (S.even) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. [3, 3, 3, 7, 6, 3, 5, 4]\n  //. ```\n  _.dropWhile = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: curry2 (Z.dropWhile)\n  };\n\n  //# map :: Functor f => (a -> b) -> f a -> f b\n  //.\n  //. Curried version of [`Z.map`][].\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) ([1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > S.map (Math.sqrt) ({x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > S.map (Math.sqrt) (S.Just (9))\n  //. Just (3)\n  //.\n  //. > S.map (Math.sqrt) (S.Right (9))\n  //. Right (3)\n  //.\n  //. > S.map (Math.sqrt) (S.Pair (99980001) (99980001))\n  //. Pair (99980001) (9999)\n  //. ```\n  //.\n  //. Replacing `Functor f => f` with `Function x` produces the B combinator\n  //. from combinatory logic (i.e. [`compose`](#compose)):\n  //.\n  //.     Functor f => (a -> b) -> f a -> f b\n  //.     (a -> b) -> Function x a -> Function x b\n  //.     (a -> c) -> Function x a -> Function x c\n  //.     (b -> c) -> Function x b -> Function x c\n  //.     (b -> c) -> Function a b -> Function a c\n  //.     (b -> c) -> (a -> b) -> (a -> c)\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) (S.add (1)) (99)\n  //. 10\n  //. ```\n  function map(f) {\n    return function(functor) {\n      return Z.map (f, functor);\n    };\n  }\n  _.map = {\n    consts: {f: [Z.Functor]},\n    types: [Fn (a) (b), f (a), f (b)],\n    impl: map\n  };\n\n  //# flip :: Functor f => f (a -> b) -> a -> f b\n  //.\n  //. Curried version of [`Z.flip`][]. Maps over the given functions, applying\n  //. each to the given value.\n  //.\n  //. Replacing `Functor f => f` with `Function x` produces the C combinator\n  //. from combinatory logic:\n  //.\n  //.     Functor f => f (a -> b) -> a -> f b\n  //.     Function x (a -> b) -> a -> Function x b\n  //.     Function x (a -> c) -> a -> Function x c\n  //.     Function x (b -> c) -> b -> Function x c\n  //.     Function a (b -> c) -> b -> Function a c\n  //.     (a -> b -> c) -> b -> a -> c\n  //.\n  //. ```javascript\n  //. > S.flip (S.concat) ('!') ('foo')\n  //. 'foo!'\n  //.\n  //. > S.flip ([Math.floor, Math.ceil]) (1.5)\n  //. [1, 2]\n  //.\n  //. > S.flip ({floor: Math.floor, ceil: Math.ceil}) (1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > S.flip (Cons (Math.floor) (Cons (Math.ceil) (Nil))) (1.5)\n  //. Cons (1) (Cons (2) (Nil))\n  //. ```\n  _.flip = {\n    consts: {f: [Z.Functor]},\n    types: [f (Fn (a) (b)), a, f (b)],\n    impl: curry2 (Z.flip)\n  };\n\n  //# bimap :: Bifunctor f => (a -> b) -> (c -> d) -> f a c -> f b d\n  //.\n  //. Curried version of [`Z.bimap`][].\n  //.\n  //. ```javascript\n  //. > S.bimap (S.toUpper) (Math.sqrt) (S.Pair ('foo') (64))\n  //. Pair ('FOO') (8)\n  //.\n  //. > S.bimap (S.toUpper) (Math.sqrt) (S.Left ('foo'))\n  //. Left ('FOO')\n  //.\n  //. > S.bimap (S.toUpper) (Math.sqrt) (S.Right (64))\n  //. Right (8)\n  //. ```\n  _.bimap = {\n    consts: {p: [Z.Bifunctor]},\n    types: [Fn (a) (b), Fn (c) (d), p (a) (c), p (b) (d)],\n    impl: curry3 (Z.bimap)\n  };\n\n  //# mapLeft :: Bifunctor f => (a -> b) -> f a c -> f b c\n  //.\n  //. Curried version of [`Z.mapLeft`][]. Maps the given function over the left\n  //. side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > S.mapLeft (S.toUpper) (S.Pair ('foo') (64))\n  //. Pair ('FOO') (64)\n  //.\n  //. > S.mapLeft (S.toUpper) (S.Left ('foo'))\n  //. Left ('FOO')\n  //.\n  //. > S.mapLeft (S.toUpper) (S.Right (64))\n  //. Right (64)\n  //. ```\n  _.mapLeft = {\n    consts: {p: [Z.Bifunctor]},\n    types: [Fn (a) (b), p (a) (c), p (b) (c)],\n    impl: curry2 (Z.mapLeft)\n  };\n\n  //# promap :: Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d\n  //.\n  //. Curried version of [`Z.promap`][].\n  //.\n  //. ```javascript\n  //. > S.promap (Math.abs) (S.add (1)) (Math.sqrt) (-100)\n  //. 11\n  //. ```\n  _.promap = {\n    consts: {p: [Z.Profunctor]},\n    types: [Fn (a) (b), Fn (c) (d), p (b) (c), p (a) (d)],\n    impl: curry3 (Z.promap)\n  };\n\n  //# alt :: Alt f => f a -> f a -> f a\n  //.\n  //. Curried version of [`Z.alt`][].\n  //.\n  //. ```javascript\n  //. > S.alt (S.Nothing) (S.Just (1))\n  //. Just (1)\n  //.\n  //. > S.alt (S.Just (2)) (S.Just (3))\n  //. Just (2)\n  //.\n  //. > S.alt (S.Left ('X')) (S.Right (1))\n  //. Right (1)\n  //.\n  //. > S.alt (S.Right (2)) (S.Right (3))\n  //. Right (2)\n  //. ```\n  _.alt = {\n    consts: {f: [Z.Alt]},\n    types: [f (a), f (a), f (a)],\n    impl: curry2 (Z.alt)\n  };\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.zero`][].\n  //.\n  //. ```javascript\n  //. > S.zero (Array)\n  //. []\n  //.\n  //. > S.zero (Object)\n  //. {}\n  //.\n  //. > S.zero (S.Maybe)\n  //. Nothing\n  //. ```\n  _.zero = {\n    consts: {f: [Z.Plus]},\n    types: [TypeRep ($.TypeVariable ('f')), f (a)],\n    impl: Z.zero\n  };\n\n  //# reduce :: Foldable f => (b -> a -> b) -> b -> f a -> b\n  //.\n  //. Takes a curried binary function, an initial value, and a [Foldable][],\n  //. and applies the function to the initial value and the Foldable's first\n  //. value, then applies the function to the result of the previous\n  //. application and the Foldable's second value. Repeats this process\n  //. until each of the Foldable's values has been used. Returns the initial\n  //. value if the Foldable is empty; the result of the final application\n  //. otherwise.\n  //.\n  //. ```javascript\n  //. > S.reduce (S.add) (0) ([1, 2, 3, 4, 5])\n  //. 15\n  //.\n  //. > S.reduce (xs => x => S.prepend (x) (xs)) ([]) ([1, 2, 3, 4, 5])\n  //. [5, 4, 3, 2, 1]\n  //. ```\n  function reduce(f) {\n    return function(initial) {\n      return function(foldable) {\n        return Z.reduce (function(y, x) { return f (y) (x); },\n                         initial,\n                         foldable);\n      };\n    };\n  }\n  _.reduce = {\n    consts: {f: [Z.Foldable]},\n    types: [Fn (a) (Fn (b) (a)), a, f (b), a],\n    impl: reduce\n  };\n\n  //# traverse :: (Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)\n  //.\n  //. Curried version of [`Z.traverse`][].\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (S.Just ('foo bar baz'))\n  //. [Just ('foo'), Just ('bar'), Just ('baz')]\n  //.\n  //. > S.traverse (Array) (S.words) (S.Nothing)\n  //. [Nothing]\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) (['A', 'B', 'C'])\n  //. Just ([10, 11, 12])\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) (['A', 'B', 'C', 'X'])\n  //. Nothing\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) ({a: 'A', b: 'B', c: 'C'})\n  //. Just ({a: 10, b: 11, c: 12})\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) ({a: 'A', b: 'B', c: 'C', x: 'X'})\n  //. Nothing\n  //. ```\n  _.traverse = {\n    consts: {f: [Z.Applicative], t: [Z.Traversable]},\n    types: [TypeRep ($.TypeVariable ('f')), Fn (a) (f (b)), t (a), f (t (b))],\n    impl: curry3 (Z.traverse)\n  };\n\n  //# sequence :: (Applicative f, Traversable t) => TypeRep f -> t (f a) -> f (t a)\n  //.\n  //. Curried version of [`Z.sequence`][]. Inverts the given `t (f a)`\n  //. to produce an `f (t a)`.\n  //.\n  //. ```javascript\n  //. > S.sequence (Array) (S.Just ([1, 2, 3]))\n  //. [Just (1), Just (2), Just (3)]\n  //.\n  //. > S.sequence (S.Maybe) ([S.Just (1), S.Just (2), S.Just (3)])\n  //. Just ([1, 2, 3])\n  //.\n  //. > S.sequence (S.Maybe) ([S.Just (1), S.Just (2), S.Nothing])\n  //. Nothing\n  //.\n  //. > S.sequence (S.Maybe) ({a: S.Just (1), b: S.Just (2), c: S.Just (3)})\n  //. Just ({a: 1, b: 2, c: 3})\n  //.\n  //. > S.sequence (S.Maybe) ({a: S.Just (1), b: S.Just (2), c: S.Nothing})\n  //. Nothing\n  //. ```\n  _.sequence = {\n    consts: {f: [Z.Applicative], t: [Z.Traversable]},\n    types: [TypeRep ($.TypeVariable ('f')), t (f (a)), f (t (a))],\n    impl: curry2 (Z.sequence)\n  };\n\n  //# ap :: Apply f => f (a -> b) -> f a -> f b\n  //.\n  //. Curried version of [`Z.ap`][].\n  //.\n  //. ```javascript\n  //. > S.ap ([Math.sqrt, x => x * x]) ([1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > S.ap ({x: Math.sqrt, y: S.add (1), z: S.sub (1)}) ({w: 4, x: 4, y: 4})\n  //. {x: 2, y: 5}\n  //.\n  //. > S.ap (S.Just (Math.sqrt)) (S.Just (64))\n  //. Just (8)\n  //. ```\n  //.\n  //. Replacing `Apply f => f` with `Function x` produces the S combinator\n  //. from combinatory logic:\n  //.\n  //.     Apply f => f (a -> b) -> f a -> f b\n  //.     Function x (a -> b) -> Function x a -> Function x b\n  //.     Function x (a -> c) -> Function x a -> Function x c\n  //.     Function x (b -> c) -> Function x b -> Function x c\n  //.     Function a (b -> c) -> Function a b -> Function a c\n  //.     (a -> b -> c) -> (a -> b) -> (a -> c)\n  //.\n  //. ```javascript\n  //. > S.ap (s => n => s.slice (0, n)) (s => Math.ceil (s.length / 2)) ('Haskell')\n  //. 'Hask'\n  //. ```\n  _.ap = {\n    consts: {f: [Z.Apply]},\n    types: [f (Fn (a) (b)), f (a), f (b)],\n    impl: curry2 (Z.ap)\n  };\n\n  //# lift2 :: Apply f => (a -> b -> c) -> f a -> f b -> f c\n  //.\n  //. Promotes a curried binary function to a function which operates on two\n  //. [Apply][]s.\n  //.\n  //. ```javascript\n  //. > S.lift2 (S.add) (S.Just (2)) (S.Just (3))\n  //. Just (5)\n  //.\n  //. > S.lift2 (S.add) (S.Just (2)) (S.Nothing)\n  //. Nothing\n  //.\n  //. > S.lift2 (S.and) (S.Just (true)) (S.Just (true))\n  //. Just (true)\n  //.\n  //. > S.lift2 (S.and) (S.Just (true)) (S.Just (false))\n  //. Just (false)\n  //. ```\n  _.lift2 = {\n    consts: {f: [Z.Apply]},\n    types: [Fn (a) (Fn (b) (c)), f (a), f (b), f (c)],\n    impl: curry3 (Z.lift2)\n  };\n\n  //# lift3 :: Apply f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d\n  //.\n  //. Promotes a curried ternary function to a function which operates on three\n  //. [Apply][]s.\n  //.\n  //. ```javascript\n  //. > S.lift3 (S.reduce) (S.Just (S.add)) (S.Just (0)) (S.Just ([1, 2, 3]))\n  //. Just (6)\n  //.\n  //. > S.lift3 (S.reduce) (S.Just (S.add)) (S.Just (0)) (S.Nothing)\n  //. Nothing\n  //. ```\n  _.lift3 = {\n    consts: {f: [Z.Apply]},\n    types: [Fn (a) (Fn (b) (Fn (c) (d))), f (a), f (b), f (c), f (d)],\n    impl: curry4 (Z.lift3)\n  };\n\n  //# apFirst :: Apply f => f a -> f b -> f a\n  //.\n  //. Curried version of [`Z.apFirst`][]. Combines two effectful actions,\n  //. keeping only the result of the first. Equivalent to Haskell's `(<*)`\n  //. function.\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > S.apFirst ([1, 2]) ([3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > S.apFirst (S.Just (1)) (S.Just (2))\n  //. Just (1)\n  //. ```\n  _.apFirst = {\n    consts: {f: [Z.Apply]},\n    types: [f (a), f (b), f (a)],\n    impl: curry2 (Z.apFirst)\n  };\n\n  //# apSecond :: Apply f => f a -> f b -> f b\n  //.\n  //. Curried version of [`Z.apSecond`][]. Combines two effectful actions,\n  //. keeping only the result of the second. Equivalent to Haskell's `(*>)`\n  //. function.\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > S.apSecond ([1, 2]) ([3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > S.apSecond (S.Just (1)) (S.Just (2))\n  //. Just (2)\n  //. ```\n  _.apSecond = {\n    consts: {f: [Z.Apply]},\n    types: [f (a), f (b), f (b)],\n    impl: curry2 (Z.apSecond)\n  };\n\n  //# of :: Applicative f => TypeRep f -> a -> f a\n  //.\n  //. Curried version of [`Z.of`][].\n  //.\n  //. ```javascript\n  //. > S.of (Array) (42)\n  //. [42]\n  //.\n  //. > S.of (Function) (42) (null)\n  //. 42\n  //.\n  //. > S.of (S.Maybe) (42)\n  //. Just (42)\n  //.\n  //. > S.of (S.Either) (42)\n  //. Right (42)\n  //. ```\n  function of(typeRep) {\n    return function(x) {\n      return Z.of (typeRep, x);\n    };\n  }\n  _.of = {\n    consts: {f: [Z.Applicative]},\n    types: [TypeRep ($.TypeVariable ('f')), a, f (a)],\n    impl: of\n  };\n\n  //# chain :: Chain m => (a -> m b) -> m a -> m b\n  //.\n  //. Curried version of [`Z.chain`][].\n  //.\n  //. ```javascript\n  //. > S.chain (x => [x, x]) ([1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > S.chain (n => s => s.slice (0, n)) (s => Math.ceil (s.length / 2)) ('slice')\n  //. 'sli'\n  //.\n  //. > S.chain (S.parseInt (10)) (S.Just ('123'))\n  //. Just (123)\n  //.\n  //. > S.chain (S.parseInt (10)) (S.Just ('XXX'))\n  //. Nothing\n  //. ```\n  _.chain = {\n    consts: {m: [Z.Chain]},\n    types: [Fn (a) (m (b)), m (a), m (b)],\n    impl: curry2 (Z.chain)\n  };\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.join`][].\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. ```javascript\n  //. > S.join ([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > S.join ([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > S.join (S.Just (S.Just (1)))\n  //. Just (1)\n  //.\n  //. > S.join (S.Pair ('foo') (S.Pair ('bar') ('baz')))\n  //. Pair ('foobar') ('baz')\n  //. ```\n  //.\n  //. Replacing `Chain m => m` with `Function x` produces the W combinator\n  //. from combinatory logic:\n  //.\n  //.     Chain m => m (m a) -> m a\n  //.     Function x (Function x a) -> Function x a\n  //.     (x -> x -> a) -> (x -> a)\n  //.\n  //. ```javascript\n  //. > S.join (S.concat) ('abc')\n  //. 'abcabc'\n  //. ```\n  _.join = {\n    consts: {m: [Z.Chain]},\n    types: [m (m (a)), m (a)],\n    impl: Z.join\n  };\n\n  //# chainRec :: ChainRec m => TypeRep m -> (a -> m (Either a b)) -> a -> m b\n  //.\n  //. Performs a [`chain`](#chain)-like computation with constant stack usage.\n  //. Similar to [`Z.chainRec`][], but curried and more convenient due to the\n  //. use of the Either type to indicate completion (via a Right).\n  //.\n  //. ```javascript\n  //. > S.chainRec (Array)\n  //. .            (s => s.length === 2 ? S.map (S.Right) ([s + '!', s + '?'])\n  //. .                                 : S.map (S.Left) ([s + 'o', s + 'n']))\n  //. .            ('')\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep) {\n    return function(f) {\n      return function(x) {\n        return Z.chainRec (typeRep, step, x);\n      };\n      function step(next, done, x) {\n        return Z.map (either (next) (done), f (x));\n      }\n    };\n  }\n  _.chainRec = {\n    consts: {m: [Z.ChainRec]},\n    types: [TypeRep ($.TypeVariable ('m')),\n            Fn (a) (m ($Either (a) (b))),\n            a,\n            m (b)],\n    impl: chainRec\n  };\n\n  //# extend :: Extend w => (w a -> b) -> w a -> w b\n  //.\n  //. Curried version of [`Z.extend`][].\n  //.\n  //. ```javascript\n  //. > S.extend (S.joinWith ('')) (['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > S.extend (f => f ([3, 4])) (S.reverse) ([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  _.extend = {\n    consts: {w: [Z.Extend]},\n    types: [Fn (w (a)) (b), w (a), w (b)],\n    impl: curry2 (Z.extend)\n  };\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.duplicate`][].\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. ```javascript\n  //. > S.duplicate (S.Just (1))\n  //. Just (Just (1))\n  //.\n  //. > S.duplicate ([1])\n  //. [[1]]\n  //.\n  //. > S.duplicate ([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > S.duplicate (S.reverse) ([1, 2]) ([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  _.duplicate = {\n    consts: {w: [Z.Extend]},\n    types: [w (a), w (w (a))],\n    impl: Z.duplicate\n  };\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.extract`][].\n  //.\n  //. ```javascript\n  //. > S.extract (S.Pair ('foo') ('bar'))\n  //. 'bar'\n  //. ```\n  _.extract = {\n    consts: {w: [Z.Comonad]},\n    types: [w (a), a],\n    impl: Z.extract\n  };\n\n  //# contramap :: Contravariant f => (b -> a) -> f a -> f b\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.contramap`][].\n  //.\n  //. ```javascript\n  //. > S.contramap (s => s.length) (Math.sqrt) ('Sanctuary')\n  //. 3\n  //. ```\n  _.contramap = {\n    consts: {f: [Z.Contravariant]},\n    types: [Fn (b) (a), f (a), f (b)],\n    impl: curry2 (Z.contramap)\n  };\n\n  //. ### Combinator\n\n  //# I :: a -> a\n  //.\n  //. The I combinator. Returns its argument. Equivalent to Haskell's `id`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.I ('foo')\n  //. 'foo'\n  //. ```\n  function I(x) {\n    return x;\n  }\n  _.I = {\n    consts: {},\n    types: [a, a],\n    impl: I\n  };\n\n  //# K :: a -> b -> a\n  //.\n  //. The K combinator. Takes two values and returns the first. Equivalent to\n  //. Haskell's `const` function.\n  //.\n  //. ```javascript\n  //. > S.K ('foo') ('bar')\n  //. 'foo'\n  //.\n  //. > S.map (S.K (42)) (S.range (0) (5))\n  //. [42, 42, 42, 42, 42]\n  //. ```\n  function K(x) {\n    return function(y) {\n      return x;\n    };\n  }\n  _.K = {\n    consts: {},\n    types: [a, b, a],\n    impl: K\n  };\n\n  //# T :: a -> (a -> b) -> b\n  //.\n  //. The T ([thrush][]) combinator. Takes a value and a function, and returns\n  //. the result of applying the function to the value. Equivalent to Haskell's\n  //. `(&)` function.\n  //.\n  //. ```javascript\n  //. > S.T (42) (S.add (1))\n  //. 43\n  //.\n  //. > S.map (S.T (100)) ([S.add (1), Math.sqrt])\n  //. [101, 10]\n  //. ```\n  function T(x) {\n    return function(f) {\n      return f (x);\n    };\n  }\n  _.T = {\n    consts: {},\n    types: [a, Fn (a) (b), b],\n    impl: T\n  };\n\n  //. ### Function\n\n  //# curry2 :: ((a, b) -> c) -> a -> b -> c\n  //.\n  //. Curries the given binary function.\n  //.\n  //. ```javascript\n  //. > S.map (S.curry2 (Math.pow) (10)) ([1, 2, 3])\n  //. [10, 100, 1000]\n  //. ```\n  function curry2(f) {\n    return function(x) {\n      return function(y) {\n        return f (x, y);\n      };\n    };\n  }\n  _.curry2 = {\n    consts: {},\n    types: [$.Function ([a, b, c]), a, b, c],\n    impl: curry2\n  };\n\n  //# curry3 :: ((a, b, c) -> d) -> a -> b -> c -> d\n  //.\n  //. Curries the given ternary function.\n  //.\n  //. ```javascript\n  //. > const replaceString = S.curry3 ((what, replacement, string) =>\n  //. .   string.replace (what, replacement)\n  //. . )\n  //.\n  //. > replaceString ('banana') ('orange') ('banana icecream')\n  //. 'orange icecream'\n  //. ```\n  function curry3(f) {\n    return function(x) {\n      return function(y) {\n        return function(z) {\n          return f (x, y, z);\n        };\n      };\n    };\n  }\n  _.curry3 = {\n    consts: {},\n    types: [$.Function ([a, b, c, d]), a, b, c, d],\n    impl: curry3\n  };\n\n  //# curry4 :: ((a, b, c, d) -> e) -> a -> b -> c -> d -> e\n  //.\n  //. Curries the given quaternary function.\n  //.\n  //. ```javascript\n  //. > const createRect = S.curry4 ((x, y, width, height) =>\n  //. .   ({x, y, width, height})\n  //. . )\n  //.\n  //. > createRect (0) (0) (10) (10)\n  //. {x: 0, y: 0, width: 10, height: 10}\n  //. ```\n  function curry4(f) {\n    return function(w) {\n      return function(x) {\n        return function(y) {\n          return function(z) {\n            return f (w, x, y, z);\n          };\n        };\n      };\n    };\n  }\n  _.curry4 = {\n    consts: {},\n    types: [$.Function ([a, b, c, d, e]), a, b, c, d, e],\n    impl: curry4\n  };\n\n  //# curry5 :: ((a, b, c, d, e) -> f) -> a -> b -> c -> d -> e -> f\n  //.\n  //. Curries the given quinary function.\n  //.\n  //. ```javascript\n  //. > const toUrl = S.curry5 ((protocol, creds, hostname, port, pathname) =>\n  //. .   protocol + '//' +\n  //. .   S.maybe ('') (S.flip (S.concat) ('@')) (creds) +\n  //. .   hostname +\n  //. .   S.maybe ('') (S.concat (':')) (port) +\n  //. .   pathname\n  //. . )\n  //.\n  //. > toUrl ('https:') (S.Nothing) ('example.com') (S.Just ('443')) ('/foo/bar')\n  //. 'https://example.com:443/foo/bar'\n  //. ```\n  function curry5(f) {\n    return function(v) {\n      return function(w) {\n        return function(x) {\n          return function(y) {\n            return function(z) {\n              return f (v, w, x, y, z);\n            };\n          };\n        };\n      };\n    };\n  }\n  _.curry5 = {\n    consts: {},\n    types: [$.Function ([a, b, c, d, e, r]), a, b, c, d, e, r],\n    impl: curry5\n  };\n\n  //. ### Composition\n\n  //# compose :: Semigroupoid s => s b c -> s a b -> s a c\n  //.\n  //. Curried version of [`Z.compose`][].\n  //.\n  //. When specialized to Function, `compose` composes two unary functions,\n  //. from right to left (this is the B combinator from combinatory logic).\n  //.\n  //. The generalized type signature indicates that `compose` is compatible\n  //. with any [Semigroupoid][].\n  //.\n  //. See also [`pipe`](#pipe).\n  //.\n  //. ```javascript\n  //. > S.compose (Math.sqrt) (S.add (1)) (99)\n  //. 10\n  //. ```\n  _.compose = {\n    consts: {s: [Z.Semigroupoid]},\n    types: [s (b) (c), s (a) (b), s (a) (c)],\n    impl: curry2 (Z.compose)\n  };\n\n  //# pipe :: Foldable f => f (Any -> Any) -> a -> b\n  //.\n  //. Takes a sequence of functions assumed to be unary and a value of any\n  //. type, and returns the result of applying the sequence of transformations\n  //. to the initial value.\n  //.\n  //. In general terms, `pipe` performs left-to-right composition of a sequence\n  //. of functions. `pipe ([f, g, h]) (x)` is equivalent to `h (g (f (x)))`.\n  //.\n  //. ```javascript\n  //. > S.pipe ([S.add (1), Math.sqrt, S.sub (1)]) (99)\n  //. 9\n  //. ```\n  function pipe(fs) {\n    return function(x) {\n      return reduce (T) (x) (fs);\n    };\n  }\n  _.pipe = {\n    consts: {f: [Z.Foldable]},\n    types: [f (Fn ($.Any) ($.Any)), a, b],\n    impl: pipe\n  };\n\n  //# pipeK :: (Foldable f, Chain m) => f (Any -> m Any) -> m a -> m b\n  //.\n  //. Takes a sequence of functions assumed to be unary which return values\n  //. with a [Chain][], and a value of that Chain, and returns the result\n  //. of applying the sequence of transformations to the initial value.\n  //.\n  //. In general terms, `pipeK` performs left-to-right [Kleisli][] composition\n  //. of an sequence of functions. `pipeK ([f, g, h]) (x)` is equivalent to\n  //. `chain (h) (chain (g) (chain (f) (x)))`.\n  //.\n  //. ```javascript\n  //. > S.pipeK ([S.tail, S.tail, S.head]) (S.Just ([1, 2, 3, 4]))\n  //. Just (3)\n  //. ```\n  function pipeK(fs) {\n    return function(x) {\n      return Z.reduce (function(x, f) { return Z.chain (f, x); }, x, fs);\n    };\n  }\n  _.pipeK = {\n    consts: {f: [Z.Foldable], m: [Z.Chain]},\n    types: [f (Fn ($.Any) (m ($.Any))), m (a), m (b)],\n    impl: pipeK\n  };\n\n  //# on :: (b -> b -> c) -> (a -> b) -> a -> a -> c\n  //.\n  //. Takes a binary function `f`, a unary function `g`, and two\n  //. values `x` and `y`. Returns `f (g (x)) (g (y))`.\n  //.\n  //. This is the P combinator from combinatory logic.\n  //.\n  //. ```javascript\n  //. > S.on (S.concat) (S.reverse) ([1, 2, 3]) ([4, 5, 6])\n  //. [3, 2, 1, 6, 5, 4]\n  //. ```\n  function on(f) {\n    return function(g) {\n      return function(x) {\n        return function(y) {\n          return f (g (x)) (g (y));\n        };\n      };\n    };\n  }\n  _.on = {\n    consts: {},\n    types: [Fn (b) (Fn (b) (c)), Fn (a) (b), a, a, c],\n    impl: on\n  };\n\n  //. ### Pair type\n  //.\n  //. Pair is the canonical product type: a value of type `Pair a b` always\n  //. contains exactly two values: one of type `a`; one of type `b`.\n  //.\n  //. The implementation is provided by [sanctuary-pair][].\n\n  //# PairType :: Type -> Type -> Type\n  //.\n  //. A [`BinaryType`][BinaryType] for use with [sanctuary-def][].\n\n  //# Pair :: a -> b -> Pair a b\n  //.\n  //. Pair's sole data constructor. Additionally, it serves as the\n  //. Pair [type representative][].\n  //.\n  //. ```javascript\n  //. > S.Pair ('foo') (42)\n  //. Pair ('foo') (42)\n  //. ```\n  _.Pair = {\n    consts: {},\n    types: [a, b, $Pair (a) (b)],\n    impl: Pair\n  };\n\n  //# fst :: Pair a b -> a\n  //.\n  //. `fst (Pair (x) (y))` is equivalent to `x`.\n  //.\n  //. ```javascript\n  //. > S.fst (S.Pair ('foo') (42))\n  //. 'foo'\n  //. ```\n  _.fst = {\n    consts: {},\n    types: [$Pair (a) (b), a],\n    impl: Pair.fst\n  };\n\n  //# snd :: Pair a b -> b\n  //.\n  //. `snd (Pair (x) (y))` is equivalent to `y`.\n  //.\n  //. ```javascript\n  //. > S.snd (S.Pair ('foo') (42))\n  //. 42\n  //. ```\n  _.snd = {\n    consts: {},\n    types: [$Pair (a) (b), b],\n    impl: Pair.snd\n  };\n\n  //# swap :: Pair a b -> Pair b a\n  //.\n  //. `swap (Pair (x) (y))` is equivalent to `Pair (y) (x)`.\n  //.\n  //. ```javascript\n  //. > S.swap (S.Pair ('foo') (42))\n  //. Pair (42) ('foo')\n  //. ```\n  _.swap = {\n    consts: {},\n    types: [$Pair (a) (b), $Pair (b) (a)],\n    impl: Pair.swap\n  };\n\n  //. ### Maybe type\n  //.\n  //. The Maybe type represents optional values: a value of type `Maybe a` is\n  //. either Nothing (the empty value) or a Just whose value is of type `a`.\n  //.\n  //. The implementation is provided by [sanctuary-maybe][].\n\n  //# MaybeType :: Type -> Type\n  //.\n  //. A [`UnaryType`][UnaryType] for use with [sanctuary-def][].\n\n  //# Maybe :: TypeRep Maybe\n  //.\n  //. Maybe [type representative][].\n\n  //# Nothing :: Maybe a\n  //.\n  //. The empty value of type `Maybe a`.\n  //.\n  //. ```javascript\n  //. > S.Nothing\n  //. Nothing\n  //. ```\n\n  //# Just :: a -> Maybe a\n  //.\n  //. Constructs a value of type `Maybe a` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > S.Just (42)\n  //. Just (42)\n  //. ```\n  _.Just = {\n    consts: {},\n    types: [a, $Maybe (a)],\n    impl: Just\n  };\n\n  //# isNothing :: Maybe a -> Boolean\n  //.\n  //. Returns `true` if the given Maybe is Nothing; `false` if it is a Just.\n  //.\n  //. ```javascript\n  //. > S.isNothing (S.Nothing)\n  //. true\n  //.\n  //. > S.isNothing (S.Just (42))\n  //. false\n  //. ```\n  function isNothing(maybe) {\n    return maybe.isNothing;\n  }\n  _.isNothing = {\n    consts: {},\n    types: [$Maybe (a), $.Boolean],\n    impl: isNothing\n  };\n\n  //# isJust :: Maybe a -> Boolean\n  //.\n  //. Returns `true` if the given Maybe is a Just; `false` if it is Nothing.\n  //.\n  //. ```javascript\n  //. > S.isJust (S.Just (42))\n  //. true\n  //.\n  //. > S.isJust (S.Nothing)\n  //. false\n  //. ```\n  function isJust(maybe) {\n    return maybe.isJust;\n  }\n  _.isJust = {\n    consts: {},\n    types: [$Maybe (a), $.Boolean],\n    impl: isJust\n  };\n\n  //# fromMaybe :: a -> Maybe a -> a\n  //.\n  //. Takes a default value and a Maybe, and returns the Maybe's value\n  //. if the Maybe is a Just; the default value otherwise.\n  //.\n  //. See also [`fromMaybe_`](#fromMaybe_) and\n  //. [`maybeToNullable`](#maybeToNullable).\n  //.\n  //. ```javascript\n  //. > S.fromMaybe (0) (S.Just (42))\n  //. 42\n  //.\n  //. > S.fromMaybe (0) (S.Nothing)\n  //. 0\n  //. ```\n  _.fromMaybe = {\n    consts: {},\n    types: [a, $Maybe (a), a],\n    impl: C (maybe) (I)\n  };\n\n  //# fromMaybe_ :: (() -> a) -> Maybe a -> a\n  //.\n  //. Variant of [`fromMaybe`](#fromMaybe) which takes a thunk so the default\n  //. value is only computed if required.\n  //.\n  //. ```javascript\n  //. > function fib(n) { return n <= 1 ? n : fib (n - 2) + fib (n - 1); }\n  //.\n  //. > S.fromMaybe_ (() => fib (30)) (S.Just (1000000))\n  //. 1000000\n  //.\n  //. > S.fromMaybe_ (() => fib (30)) (S.Nothing)\n  //. 832040\n  //. ```\n  _.fromMaybe_ = {\n    consts: {},\n    types: [$.Thunk (a), $Maybe (a), a],\n    impl: C (maybe_) (I)\n  };\n\n  //# maybeToNullable :: Maybe a -> Nullable a\n  //.\n  //. Returns the given Maybe's value if the Maybe is a Just; `null` otherwise.\n  //. [Nullable][] is defined in [sanctuary-def][].\n  //.\n  //. See also [`fromMaybe`](#fromMaybe).\n  //.\n  //. ```javascript\n  //. > S.maybeToNullable (S.Just (42))\n  //. 42\n  //.\n  //. > S.maybeToNullable (S.Nothing)\n  //. null\n  //. ```\n  function maybeToNullable(maybe) {\n    return maybe.isJust ? maybe.value : null;\n  }\n  _.maybeToNullable = {\n    consts: {},\n    types: [$Maybe (a), $.Nullable (a)],\n    impl: maybeToNullable\n  };\n\n  //# toMaybe :: a? -> Maybe a\n  //.\n  //. Takes a value and returns Nothing if the value is `null` or `undefined`;\n  //. Just the value otherwise.\n  //.\n  //. ```javascript\n  //. > S.toMaybe (null)\n  //. Nothing\n  //.\n  //. > S.toMaybe (42)\n  //. Just (42)\n  //. ```\n  function toMaybe(x) {\n    return x == null ? Nothing : Just (x);\n  }\n  _.toMaybe = {\n    consts: {},\n    types: [a, $Maybe (a)],\n    impl: toMaybe\n  };\n\n  //# maybe :: b -> (a -> b) -> Maybe a -> b\n  //.\n  //. Takes a value of any type, a function, and a Maybe. If the Maybe is\n  //. a Just, the return value is the result of applying the function to\n  //. the Just's value. Otherwise, the first argument is returned.\n  //.\n  //. See also [`maybe_`](#maybe_).\n  //.\n  //. ```javascript\n  //. > S.maybe (0) (S.prop ('length')) (S.Just ('refuge'))\n  //. 6\n  //.\n  //. > S.maybe (0) (S.prop ('length')) (S.Nothing)\n  //. 0\n  //. ```\n  function maybe(x) {\n    return function(f) {\n      return function(maybe) {\n        return maybe.isJust ? f (maybe.value) : x;\n      };\n    };\n  }\n  _.maybe = {\n    consts: {},\n    types: [b, Fn (a) (b), $Maybe (a), b],\n    impl: maybe\n  };\n\n  //# maybe_ :: (() -> b) -> (a -> b) -> Maybe a -> b\n  //.\n  //. Variant of [`maybe`](#maybe) which takes a thunk so the default value\n  //. is only computed if required.\n  //.\n  //. ```javascript\n  //. > function fib(n) { return n <= 1 ? n : fib (n - 2) + fib (n - 1); }\n  //.\n  //. > S.maybe_ (() => fib (30)) (Math.sqrt) (S.Just (1000000))\n  //. 1000\n  //.\n  //. > S.maybe_ (() => fib (30)) (Math.sqrt) (S.Nothing)\n  //. 832040\n  //. ```\n  function maybe_(thunk) {\n    return function(f) {\n      return function(maybe) {\n        return maybe.isJust ? f (maybe.value) : thunk ();\n      };\n    };\n  }\n  _.maybe_ = {\n    consts: {},\n    types: [$.Thunk (b), Fn (a) (b), $Maybe (a), b],\n    impl: maybe_\n  };\n\n  //# justs :: (Filterable f, Functor f) => f (Maybe a) -> f a\n  //.\n  //. Discards each element which is Nothing, and unwraps each element which is\n  //. a Just. Related to Haskell's `catMaybes` function.\n  //.\n  //. See also [`lefts`](#lefts) and [`rights`](#rights).\n  //.\n  //. ```javascript\n  //. > S.justs ([S.Just ('foo'), S.Nothing, S.Just ('baz')])\n  //. ['foo', 'baz']\n  //. ```\n  function justs(maybes) {\n    return map (value) (filter (isJust) (maybes));\n  }\n  _.justs = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [f ($Maybe (a)), f (a)],\n    impl: justs\n  };\n\n  //# mapMaybe :: (Filterable f, Functor f) => (a -> Maybe b) -> f a -> f b\n  //.\n  //. Takes a function and a structure, applies the function to each element\n  //. of the structure, and returns the \"successful\" results. If the result of\n  //. applying the function to an element is Nothing, the result is discarded;\n  //. if the result is a Just, the Just's value is included.\n  //.\n  //. ```javascript\n  //. > S.mapMaybe (S.head) ([[], [1, 2, 3], [], [4, 5, 6], []])\n  //. [1, 4]\n  //.\n  //. > S.mapMaybe (S.head) ({x: [1, 2, 3], y: [], z: [4, 5, 6]})\n  //. {x: 1, z: 4}\n  //. ```\n  _.mapMaybe = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [Fn (a) ($Maybe (b)), f (a), f (b)],\n    impl: B (B (justs)) (map)\n  };\n\n  //# encase :: (a -> b) -> a -> Maybe b\n  //.\n  //. Takes a unary function `f` which may throw and a value `x` of any type,\n  //. and applies `f` to `x` inside a `try` block. If an exception is caught,\n  //. the return value is Nothing; otherwise the return value is Just the\n  //. result of applying `f` to `x`.\n  //.\n  //. See also [`encaseEither`](#encaseEither).\n  //.\n  //. ```javascript\n  //. > S.encase (eval) ('1 + 1')\n  //. Just (2)\n  //.\n  //. > S.encase (eval) ('1 +')\n  //. Nothing\n  //. ```\n  function encase(f) {\n    return B (eitherToMaybe) (encaseEither (I) (f));\n  }\n  _.encase = {\n    consts: {},\n    types: [Fn (a) (b), a, $Maybe (b)],\n    impl: encase\n  };\n\n  //# encase2 :: (a -> b -> c) -> a -> b -> Maybe c\n  //.\n  //. Binary version of [`encase`](#encase).\n  _.encase2 = {\n    consts: {},\n    types: [Fn (a) (Fn (b) (c)), a, b, $Maybe (c)],\n    impl: B (B (B (eitherToMaybe))) (encaseEither2 (I))\n  };\n\n  //# encase3 :: (a -> b -> c -> d) -> a -> b -> c -> Maybe d\n  //.\n  //. Ternary version of [`encase`](#encase).\n  _.encase3 = {\n    consts: {},\n    types: [Fn (a) (Fn (b) (Fn (c) (d))), a, b, c, $Maybe (d)],\n    impl: B (B (B (B (eitherToMaybe)))) (encaseEither3 (I))\n  };\n\n  //# maybeToEither :: a -> Maybe b -> Either a b\n  //.\n  //. Converts a Maybe to an Either. Nothing becomes a Left (containing the\n  //. first argument); a Just becomes a Right.\n  //.\n  //. See also [`eitherToMaybe`](#eitherToMaybe).\n  //.\n  //. ```javascript\n  //. > S.maybeToEither ('Expecting an integer') (S.parseInt (10) ('xyz'))\n  //. Left ('Expecting an integer')\n  //.\n  //. > S.maybeToEither ('Expecting an integer') (S.parseInt (10) ('42'))\n  //. Right (42)\n  //. ```\n  function maybeToEither(x) {\n    return maybe (Left (x)) (Right);\n  }\n  _.maybeToEither = {\n    consts: {},\n    types: [a, $Maybe (b), $Either (a) (b)],\n    impl: maybeToEither\n  };\n\n  //. ### Either type\n  //.\n  //. The Either type represents values with two possibilities: a value of type\n  //. `Either a b` is either a Left whose value is of type `a` or a Right whose\n  //. value is of type `b`.\n  //.\n  //. The implementation is provided by [sanctuary-either][].\n\n  //# EitherType :: Type -> Type -> Type\n  //.\n  //. A [`BinaryType`][BinaryType] for use with [sanctuary-def][].\n\n  //# Either :: TypeRep Either\n  //.\n  //. Either [type representative][].\n\n  //# Left :: a -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > S.Left ('Cannot divide by zero')\n  //. Left ('Cannot divide by zero')\n  //. ```\n  _.Left = {\n    consts: {},\n    types: [a, $Either (a) (b)],\n    impl: Left\n  };\n\n  //# Right :: b -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `b`.\n  //.\n  //. ```javascript\n  //. > S.Right (42)\n  //. Right (42)\n  //. ```\n  _.Right = {\n    consts: {},\n    types: [b, $Either (a) (b)],\n    impl: Right\n  };\n\n  //# isLeft :: Either a b -> Boolean\n  //.\n  //. Returns `true` if the given Either is a Left; `false` if it is a Right.\n  //.\n  //. ```javascript\n  //. > S.isLeft (S.Left ('Cannot divide by zero'))\n  //. true\n  //.\n  //. > S.isLeft (S.Right (42))\n  //. false\n  //. ```\n  function isLeft(either) {\n    return either.isLeft;\n  }\n  _.isLeft = {\n    consts: {},\n    types: [$Either (a) (b), $.Boolean],\n    impl: isLeft\n  };\n\n  //# isRight :: Either a b -> Boolean\n  //.\n  //. Returns `true` if the given Either is a Right; `false` if it is a Left.\n  //.\n  //. ```javascript\n  //. > S.isRight (S.Right (42))\n  //. true\n  //.\n  //. > S.isRight (S.Left ('Cannot divide by zero'))\n  //. false\n  //. ```\n  function isRight(either) {\n    return either.isRight;\n  }\n  _.isRight = {\n    consts: {},\n    types: [$Either (a) (b), $.Boolean],\n    impl: isRight\n  };\n\n  //# fromEither :: b -> Either a b -> b\n  //.\n  //. Takes a default value and an Either, and returns the Right value\n  //. if the Either is a Right; the default value otherwise.\n  //.\n  //. ```javascript\n  //. > S.fromEither (0) (S.Right (42))\n  //. 42\n  //.\n  //. > S.fromEither (0) (S.Left (42))\n  //. 0\n  //. ```\n  function fromEither(x) {\n    return either (K (x)) (I);\n  }\n  _.fromEither = {\n    consts: {},\n    types: [b, $Either (a) (b), b],\n    impl: fromEither\n  };\n\n  //# toEither :: a -> b? -> Either a b\n  //.\n  //. Converts an arbitrary value to an Either: a Left if the value is `null`\n  //. or `undefined`; a Right otherwise. The first argument specifies the\n  //. value of the Left in the \"failure\" case.\n  //.\n  //. ```javascript\n  //. > S.toEither ('XYZ') (null)\n  //. Left ('XYZ')\n  //.\n  //. > S.toEither ('XYZ') ('ABC')\n  //. Right ('ABC')\n  //.\n  //. > S.map (S.prop ('0'))\n  //. .       (S.toEither ('Invalid protocol')\n  //. .                   ('ftp://example.com/'.match (/^https?:/)))\n  //. Left ('Invalid protocol')\n  //.\n  //. > S.map (S.prop ('0'))\n  //. .       (S.toEither ('Invalid protocol')\n  //. .                   ('https://example.com/'.match (/^https?:/)))\n  //. Right ('https:')\n  //. ```\n  function toEither(x) {\n    return function(y) {\n      return y == null ? Left (x) : Right (y);\n    };\n  }\n  _.toEither = {\n    consts: {},\n    types: [a, b, $Either (a) (b)],\n    impl: toEither\n  };\n\n  //# either :: (a -> c) -> (b -> c) -> Either a b -> c\n  //.\n  //. Takes two functions and an Either, and returns the result of\n  //. applying the first function to the Left's value, if the Either\n  //. is a Left, or the result of applying the second function to the\n  //. Right's value, if the Either is a Right.\n  //.\n  //. ```javascript\n  //. > S.either (S.toUpper) (S.show) (S.Left ('Cannot divide by zero'))\n  //. 'CANNOT DIVIDE BY ZERO'\n  //.\n  //. > S.either (S.toUpper) (S.show) (S.Right (42))\n  //. '42'\n  //. ```\n  function either(l) {\n    return function(r) {\n      return function(either) {\n        return (either.isLeft ? l : r) (either.value);\n      };\n    };\n  }\n  _.either = {\n    consts: {},\n    types: [Fn (a) (c), Fn (b) (c), $Either (a) (b), c],\n    impl: either\n  };\n\n  //# lefts :: (Filterable f, Functor f) => f (Either a b) -> f a\n  //.\n  //. Discards each element which is a Right, and unwraps each element which is\n  //. a Left.\n  //.\n  //. See also [`rights`](#rights).\n  //.\n  //. ```javascript\n  //. > S.lefts ([S.Right (20), S.Left ('foo'), S.Right (10), S.Left ('bar')])\n  //. ['foo', 'bar']\n  //. ```\n  _.lefts = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [f ($Either (a) (b)), f (a)],\n    impl: B (map (value)) (filter (isLeft))\n  };\n\n  //# rights :: (Filterable f, Functor f) => f (Either a b) -> f b\n  //.\n  //. Discards each element which is a Left, and unwraps each element which is\n  //. a Right.\n  //.\n  //. See also [`lefts`](#lefts).\n  //.\n  //. ```javascript\n  //. > S.rights ([S.Right (20), S.Left ('foo'), S.Right (10), S.Left ('bar')])\n  //. [20, 10]\n  //. ```\n  _.rights = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [f ($Either (a) (b)), f (b)],\n    impl: B (map (value)) (filter (isRight))\n  };\n\n  //# tagBy :: (a -> Boolean) -> a -> Either a a\n  //.\n  //. Takes a predicate and a value, and returns a Right of the value if it\n  //. satisfies the predicate; a Left of the value otherwise.\n  //.\n  //. ```javascript\n  //. > S.tagBy (S.odd) (0)\n  //. Left (0)\n  //\n  //. > S.tagBy (S.odd) (1)\n  //. Right (1)\n  //. ```\n  function tagBy(pred) {\n    return ifElse (pred) (Right) (Left);\n  }\n  _.tagBy = {\n    consts: {},\n    types: [$.Predicate (a), a, $Either (a) (a)],\n    impl: tagBy\n  };\n\n  //# encaseEither :: (Error -> l) -> (a -> r) -> a -> Either l r\n  //.\n  //. Takes two unary functions, `f` and `g`, the second of which may throw,\n  //. and a value `x` of any type. Applies `g` to `x` inside a `try` block.\n  //. If an exception is caught, the return value is a Left containing the\n  //. result of applying `f` to the caught Error object; otherwise the return\n  //. value is a Right containing the result of applying `g` to `x`.\n  //.\n  //. See also [`encase`](#encase).\n  //.\n  //. ```javascript\n  //. > S.encaseEither (S.I) (JSON.parse) ('[\"foo\",\"bar\",\"baz\"]')\n  //. Right (['foo', 'bar', 'baz'])\n  //.\n  //. > S.encaseEither (S.I) (JSON.parse) ('[')\n  //. Left (new SyntaxError ('Unexpected end of JSON input'))\n  //.\n  //. > S.encaseEither (S.prop ('message')) (JSON.parse) ('[')\n  //. Left ('Unexpected end of JSON input')\n  //. ```\n  function encaseEither(f) {\n    return function(g) {\n      return function(x) {\n        try {\n          return Right (g (x));\n        } catch (err) {\n          return Left (f (err));\n        }\n      };\n    };\n  }\n  _.encaseEither = {\n    consts: {},\n    types: [Fn ($.Error) (l), Fn (a) (r), a, $Either (l) (r)],\n    impl: encaseEither\n  };\n\n  //# encaseEither2 :: (Error -> l) -> (a -> b -> r) -> a -> b -> Either l r\n  //.\n  //. Binary version of [`encaseEither`](#encaseEither).\n  function encaseEither2(f) {\n    return function(g) {\n      return function(x) {\n        return function(y) {\n          try {\n            return Right (g (x) (y));\n          } catch (err) {\n            return Left (f (err));\n          }\n        };\n      };\n    };\n  }\n  _.encaseEither2 = {\n    consts: {},\n    types: [Fn ($.Error) (l), Fn (a) (Fn (b) (r)), a, b, $Either (l) (r)],\n    impl: encaseEither2\n  };\n\n  //# encaseEither3 :: (Error -> l) -> (a -> b -> c -> r) -> a -> b -> c -> Either l r\n  //.\n  //. Ternary version of [`encaseEither`](#encaseEither).\n  function encaseEither3(f) {\n    return function(g) {\n      return function(x) {\n        return function(y) {\n          return function(z) {\n            try {\n              return Right (g (x) (y) (z));\n            } catch (err) {\n              return Left (f (err));\n            }\n          };\n        };\n      };\n    };\n  }\n  _.encaseEither3 = {\n    consts: {},\n    types: [Fn ($.Error) (l),\n            Fn (a) (Fn (b) (Fn (c) (r))),\n            a,\n            b,\n            c,\n            $Either (l) (r)],\n    impl: encaseEither3\n  };\n\n  //# eitherToMaybe :: Either a b -> Maybe b\n  //.\n  //. Converts an Either to a Maybe. A Left becomes Nothing; a Right becomes\n  //. a Just.\n  //.\n  //. See also [`maybeToEither`](#maybeToEither).\n  //.\n  //. ```javascript\n  //. > S.eitherToMaybe (S.Left ('Cannot divide by zero'))\n  //. Nothing\n  //.\n  //. > S.eitherToMaybe (S.Right (42))\n  //. Just (42)\n  //. ```\n  function eitherToMaybe(either) {\n    return either.isLeft ? Nothing : Just (either.value);\n  }\n  _.eitherToMaybe = {\n    consts: {},\n    types: [$Either (a) (b), $Maybe (b)],\n    impl: eitherToMaybe\n  };\n\n  //. ### Logic\n\n  //# and :: Boolean -> Boolean -> Boolean\n  //.\n  //. Boolean \"and\".\n  //.\n  //. ```javascript\n  //. > S.and (false) (false)\n  //. false\n  //.\n  //. > S.and (false) (true)\n  //. false\n  //.\n  //. > S.and (true) (false)\n  //. false\n  //.\n  //. > S.and (true) (true)\n  //. true\n  //. ```\n  function and(x) {\n    return function(y) {\n      return x && y;\n    };\n  }\n  _.and = {\n    consts: {},\n    types: [$.Boolean, $.Boolean, $.Boolean],\n    impl: and\n  };\n\n  //# or :: Boolean -> Boolean -> Boolean\n  //.\n  //. Boolean \"or\".\n  //.\n  //. ```javascript\n  //. > S.or (false) (false)\n  //. false\n  //.\n  //. > S.or (false) (true)\n  //. true\n  //.\n  //. > S.or (true) (false)\n  //. true\n  //.\n  //. > S.or (true) (true)\n  //. true\n  //. ```\n  function or(x) {\n    return function(y) {\n      return x || y;\n    };\n  }\n  _.or = {\n    consts: {},\n    types: [$.Boolean, $.Boolean, $.Boolean],\n    impl: or\n  };\n\n  //# not :: Boolean -> Boolean\n  //.\n  //. Boolean \"not\".\n  //.\n  //. See also [`complement`](#complement).\n  //.\n  //. ```javascript\n  //. > S.not (false)\n  //. true\n  //.\n  //. > S.not (true)\n  //. false\n  //. ```\n  function not(x) {\n    return !x;\n  }\n  _.not = {\n    consts: {},\n    types: [$.Boolean, $.Boolean],\n    impl: not\n  };\n\n  //# complement :: (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a unary predicate and a value of any type, and returns the logical\n  //. negation of applying the predicate to the value.\n  //.\n  //. See also [`not`](#not).\n  //.\n  //. ```javascript\n  //. > Number.isInteger (42)\n  //. true\n  //.\n  //. > S.complement (Number.isInteger) (42)\n  //. false\n  //. ```\n  _.complement = {\n    consts: {},\n    types: [$.Predicate (a), a, $.Boolean],\n    impl: B (not)\n  };\n\n  //# ifElse :: (a -> Boolean) -> (a -> b) -> (a -> b) -> a -> b\n  //.\n  //. Takes a unary predicate, a unary \"if\" function, a unary \"else\"\n  //. function, and a value of any type, and returns the result of\n  //. applying the \"if\" function to the value if the value satisfies\n  //. the predicate; the result of applying the \"else\" function to the\n  //. value otherwise.\n  //.\n  //. See also [`when`](#when) and [`unless`](#unless).\n  //.\n  //. ```javascript\n  //. > S.ifElse (x => x < 0) (Math.abs) (Math.sqrt) (-1)\n  //. 1\n  //.\n  //. > S.ifElse (x => x < 0) (Math.abs) (Math.sqrt) (16)\n  //. 4\n  //. ```\n  function ifElse(pred) {\n    return function(f) {\n      return function(g) {\n        return function(x) {\n          return (pred (x) ? f : g) (x);\n        };\n      };\n    };\n  }\n  _.ifElse = {\n    consts: {},\n    types: [$.Predicate (a), Fn (a) (b), Fn (a) (b), a, b],\n    impl: ifElse\n  };\n\n  //# when :: (a -> Boolean) -> (a -> a) -> a -> a\n  //.\n  //. Takes a unary predicate, a unary function, and a value of any type, and\n  //. returns the result of applying the function to the value if the value\n  //. satisfies the predicate; the value otherwise.\n  //.\n  //. See also [`unless`](#unless) and [`ifElse`](#ifElse).\n  //.\n  //. ```javascript\n  //. > S.when (x => x >= 0) (Math.sqrt) (16)\n  //. 4\n  //.\n  //. > S.when (x => x >= 0) (Math.sqrt) (-1)\n  //. -1\n  //. ```\n  function when(pred) {\n    return C (ifElse (pred)) (I);\n  }\n  _.when = {\n    consts: {},\n    types: [$.Predicate (a), Fn (a) (a), a, a],\n    impl: when\n  };\n\n  //# unless :: (a -> Boolean) -> (a -> a) -> a -> a\n  //.\n  //. Takes a unary predicate, a unary function, and a value of any type, and\n  //. returns the result of applying the function to the value if the value\n  //. does not satisfy the predicate; the value otherwise.\n  //.\n  //. See also [`when`](#when) and [`ifElse`](#ifElse).\n  //.\n  //. ```javascript\n  //. > S.unless (x => x < 0) (Math.sqrt) (16)\n  //. 4\n  //.\n  //. > S.unless (x => x < 0) (Math.sqrt) (-1)\n  //. -1\n  //. ```\n  function unless(pred) {\n    return ifElse (pred) (I);\n  }\n  _.unless = {\n    consts: {},\n    types: [$.Predicate (a), Fn (a) (a), a, a],\n    impl: unless\n  };\n\n  //# allPass :: Foldable f => f (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a structure containing zero or more predicates, and a value\n  //. of any type. Returns `true` [iff][] the value satisfies all of the\n  //. predicates. None of the subsequent predicates will be applied after\n  //. the first predicate not satisfied.\n  //.\n  //. ```javascript\n  //. > S.allPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('quiessence')\n  //. true\n  //.\n  //. > S.allPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('fissiparous')\n  //. false\n  //. ```\n  function allPass(preds) {\n    return function(x) {\n      return Z.reduce (function(b, p) { return b && p (x); }, true, preds);\n    };\n  }\n  _.allPass = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.Predicate (a)), a, $.Boolean],\n    impl: allPass\n  };\n\n  //# anyPass :: Foldable f => f (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a structure containing zero or more predicates, and a value\n  //. of any type. Returns `true` [iff][] the value satisfies any of the\n  //. predicates. None of the subsequent predicates will be applied after\n  //. the first predicate satisfied.\n  //.\n  //. ```javascript\n  //. > S.anyPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('incandescent')\n  //. true\n  //.\n  //. > S.anyPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('empathy')\n  //. false\n  //. ```\n  function anyPass(preds) {\n    return function(x) {\n      return Z.reduce (function(b, p) { return b || p (x); }, false, preds);\n    };\n  }\n  _.anyPass = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.Predicate (a)), a, $.Boolean],\n    impl: anyPass\n  };\n\n  //. ### Array\n\n  //# slice :: Integer -> Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Takes a start index `i`, an end index `j`, and an array, and returns\n  //. Just the `[i,j)` slice of the array if possible; Nothing otherwise.\n  //. A negative index represents an offset from the length of the array.\n  //.\n  //. See also [`take`](#take), [`drop`](#drop), [`takeLast`](#takeLast),\n  //. and [`dropLast`](#dropLast).\n  //.\n  //. ```javascript\n  //. > S.slice (1) (3) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['b', 'c'])\n  //.\n  //. > S.slice (-3) (-1) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['c', 'd'])\n  //.\n  //. > S.slice (1) (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function slice(start) {\n    return function(end) {\n      return function(xs) {\n        var fromIdx = start < 0 ? start + xs.length : start;\n        var toIdx = end < 0 ? end + xs.length : end;\n\n        return Math.abs (start) <= xs.length &&\n               Math.abs (end) <= xs.length &&\n               fromIdx <= toIdx ?\n                 Just (xs.slice (fromIdx, toIdx)) :\n                 Nothing;\n      };\n    };\n  }\n  _.slice = {\n    consts: {},\n    types: [$.Integer, $.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: slice\n  };\n\n  //# at :: Integer -> Array a -> Maybe a\n  //.\n  //. Returns Just the element of the given array at the specified index if\n  //. the index is within the array's bounds; Nothing otherwise. A negative\n  //. index represents an offset from the length of the array.\n  //.\n  //. ```javascript\n  //. > S.at (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ('c')\n  //.\n  //. > S.at (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //.\n  //. > S.at (-2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ('d')\n  //. ```\n  function at(n) {\n    return function(xs) {\n      var idx = n < 0 ? xs.length + n : n;\n      return idx < 0 || idx >= xs.length ? Nothing : Just (xs[idx]);\n    };\n  }\n  _.at = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe (a)],\n    impl: at\n  };\n\n  //# head :: Array a -> Maybe a\n  //.\n  //. Returns Just the first element of the given array if the array contains\n  //. at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.head ([1, 2, 3])\n  //. Just (1)\n  //.\n  //. > S.head ([])\n  //. Nothing\n  //. ```\n  function head(xs) {\n    return xs.length > 0 ? Just (xs[0]) : Nothing;\n  }\n  _.head = {\n    consts: {},\n    types: [$.Array (a), $Maybe (a)],\n    impl: head\n  };\n\n  //# last :: Array a -> Maybe a\n  //.\n  //. Returns Just the last element of the given array if the array contains\n  //. at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.last ([1, 2, 3])\n  //. Just (3)\n  //.\n  //. > S.last ([])\n  //. Nothing\n  //. ```\n  function last(xs) {\n    return xs.length > 0 ? Just (xs[xs.length - 1]) : Nothing;\n  }\n  _.last = {\n    consts: {},\n    types: [$.Array (a), $Maybe (a)],\n    impl: last\n  };\n\n  //# tail :: Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the first of the given array's elements if the\n  //. array contains at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.tail ([1, 2, 3])\n  //. Just ([2, 3])\n  //.\n  //. > S.tail ([])\n  //. Nothing\n  //. ```\n  function tail(xs) {\n    return xs.length > 0 ? Just (xs.slice (1)) : Nothing;\n  }\n  _.tail = {\n    consts: {},\n    types: [$.Array (a), $Maybe ($.Array (a))],\n    impl: tail\n  };\n\n  //# init :: Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the last of the given array's elements if the\n  //. array contains at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.init ([1, 2, 3])\n  //. Just ([1, 2])\n  //.\n  //. > S.init ([])\n  //. Nothing\n  //. ```\n  function init(xs) {\n    return xs.length > 0 ? Just (xs.slice (0, -1)) : Nothing;\n  }\n  _.init = {\n    consts: {},\n    types: [$.Array (a), $Maybe ($.Array (a))],\n    impl: init\n  };\n\n  //# take :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just the first N elements of the given array if N is greater\n  //. than or equal to zero and less than or equal to the length of the array;\n  //. Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.take (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b'])\n  //.\n  //. > S.take (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b', 'c', 'd', 'e'])\n  //.\n  //. > S.take (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function take(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (0, n)) : Nothing;\n    };\n  }\n  _.take = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: take\n  };\n\n  //# takeLast :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just the last N elements of the given array if N is greater\n  //. than or equal to zero and less than or equal to the length of the array;\n  //. Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.takeLast (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['d', 'e'])\n  //.\n  //. > S.takeLast (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b', 'c', 'd', 'e'])\n  //.\n  //. > S.takeLast (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function takeLast(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (xs.length - n))\n                                      : Nothing;\n    };\n  }\n  _.takeLast = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: takeLast\n  };\n\n  //# drop :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the first N elements of the given array if N is\n  //. greater than or equal to zero and less than or equal to the length of\n  //. the array; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.drop (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['c', 'd', 'e'])\n  //.\n  //. > S.drop (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ([])\n  //.\n  //. > S.drop (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function drop(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (n)) : Nothing;\n    };\n  }\n  _.drop = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: drop\n  };\n\n  //# dropLast :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the last N elements of the given array if N is\n  //. greater than or equal to zero and less than or equal to the length of\n  //. the array; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.dropLast (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b', 'c'])\n  //.\n  //. > S.dropLast (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ([])\n  //.\n  //. > S.dropLast (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function dropLast(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (0, xs.length - n))\n                                      : Nothing;\n    };\n  }\n  _.dropLast = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: dropLast\n  };\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. ```javascript\n  //. > S.size ([])\n  //. 0\n  //.\n  //. > S.size (['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > S.size (Nil)\n  //. 0\n  //.\n  //. > S.size (Cons ('foo') (Cons ('bar') (Cons ('baz') (Nil))))\n  //. 3\n  //.\n  //. > S.size (S.Nothing)\n  //. 0\n  //.\n  //. > S.size (S.Just ('quux'))\n  //. 1\n  //.\n  //. > S.size (S.Pair ('ignored!') ('counted!'))\n  //. 1\n  //. ```\n  _.size = {\n    consts: {f: [Z.Foldable]},\n    types: [f (a), $.Integer],\n    impl: Z.size\n  };\n\n  //# append :: (Applicative f, Semigroup (f a)) => a -> f a -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > S.append (3) ([1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > S.append (3) (Cons (1) (Cons (2) (Nil)))\n  //. Cons (1) (Cons (2) (Cons (3) (Nil)))\n  //.\n  //. > S.append ([1]) (S.Nothing)\n  //. Just ([1])\n  //.\n  //. > S.append ([3]) (S.Just ([1, 2]))\n  //. Just ([1, 2, 3])\n  //. ```\n  _.append = {\n    consts: {f: [Z.Applicative, Z.Semigroup]},\n    types: [a, f (a), f (a)],\n    impl: curry2 (Z.append)\n  };\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => a -> f a -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > S.prepend (1) ([2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > S.prepend (1) (Cons (2) (Cons (3) (Nil)))\n  //. Cons (1) (Cons (2) (Cons (3) (Nil)))\n  //.\n  //. > S.prepend ([1]) (S.Nothing)\n  //. Just ([1])\n  //.\n  //. > S.prepend ([1]) (S.Just ([2, 3]))\n  //. Just ([1, 2, 3])\n  //. ```\n  _.prepend = {\n    consts: {f: [Z.Applicative, Z.Semigroup]},\n    types: [a, f (a), f (a)],\n    impl: curry2 (Z.prepend)\n  };\n\n  //# joinWith :: String -> Array String -> String\n  //.\n  //. Joins the strings of the second argument separated by the first argument.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String, t :: String.\n  //.      S.joinWith (s) (S.splitOn (s) (t)) = t`\n  //.\n  //. See also [`splitOn`](#splitOn).\n  //.\n  //. ```javascript\n  //. > S.joinWith (':') (['foo', 'bar', 'baz'])\n  //. 'foo:bar:baz'\n  //. ```\n  _.joinWith = {\n    consts: {},\n    types: [$.String, $.Array ($.String), $.String],\n    impl: invoke1 ('join')\n  };\n\n  //# elem :: (Setoid a, Foldable f) => a -> f a -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` [iff][] the value is an\n  //. element of the structure.\n  //.\n  //. See also [`find`](#find).\n  //.\n  //. ```javascript\n  //. > S.elem ('c') (['a', 'b', 'c'])\n  //. true\n  //.\n  //. > S.elem ('x') (['a', 'b', 'c'])\n  //. false\n  //.\n  //. > S.elem (3) ({x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > S.elem (8) ({x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > S.elem (0) (S.Just (0))\n  //. true\n  //.\n  //. > S.elem (0) (S.Just (1))\n  //. false\n  //.\n  //. > S.elem (0) (S.Nothing)\n  //. false\n  //. ```\n  _.elem = {\n    consts: {a: [Z.Setoid], f: [Z.Foldable]},\n    types: [a, f (a), $.Boolean],\n    impl: curry2 (Z.elem)\n  };\n\n  //# find :: Foldable f => (a -> Boolean) -> f a -> Maybe a\n  //.\n  //. Takes a predicate and a structure and returns Just the leftmost element\n  //. of the structure which satisfies the predicate; Nothing if there is no\n  //. such element.\n  //.\n  //. See also [`elem`](#elem).\n  //.\n  //. ```javascript\n  //. > S.find (S.lt (0)) ([1, -2, 3, -4, 5])\n  //. Just (-2)\n  //.\n  //. > S.find (S.lt (0)) ([1, 2, 3, 4, 5])\n  //. Nothing\n  //. ```\n  function find(pred) {\n    return function(xs) {\n      return Z.reduce (\n        function(m, x) {\n          return m.isJust ? m : pred (x) ? Just (x) : Nothing;\n        },\n        Nothing,\n        xs\n      );\n    };\n  }\n  _.find = {\n    consts: {f: [Z.Foldable]},\n    types: [$.Predicate (a), f (a), $Maybe (a)],\n    impl: find\n  };\n\n  //# foldMap :: (Monoid m, Foldable f) => TypeRep m -> (a -> m) -> f a -> m\n  //.\n  //. Curried version of [`Z.foldMap`][]. Deconstructs a foldable by mapping\n  //. every element to a monoid and concatenating the results.\n  //.\n  //. ```javascript\n  //. > S.foldMap (String) (f => f.name) ([Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  _.foldMap = {\n    consts: {b: [Z.Monoid], f: [Z.Foldable]},\n    types: [TypeRep (b), Fn (a) (b), f (a), b],\n    impl: curry3 (Z.foldMap)\n  };\n\n  //# unfoldr :: (b -> Maybe (Pair a b)) -> b -> Array a\n  //.\n  //. Takes a function and a seed value, and returns an array generated by\n  //. applying the function repeatedly. The array is initially empty. The\n  //. function is initially applied to the seed value. Each application\n  //. of the function should result in either:\n  //.\n  //.   - Nothing, in which case the array is returned; or\n  //.\n  //.   - Just a pair, in which case the first element is appended to\n  //.     the array and the function is applied to the second element.\n  //.\n  //. ```javascript\n  //. > S.unfoldr (n => n < 5 ? S.Just (S.Pair (n) (n + 1)) : S.Nothing) (1)\n  //. [1, 2, 3, 4]\n  //. ```\n  function unfoldr(f) {\n    return function(x) {\n      var result = [];\n      for (var m = f (x); m.isJust; m = f (m.value.snd)) {\n        result.push (m.value.fst);\n      }\n      return result;\n    };\n  }\n  _.unfoldr = {\n    consts: {},\n    types: [Fn (b) ($Maybe ($Pair (a) (b))), b, $.Array (a)],\n    impl: unfoldr\n  };\n\n  //# range :: Integer -> Integer -> Array Integer\n  //.\n  //. Returns an array of consecutive integers starting with the first argument\n  //. and ending with the second argument minus one. Returns `[]` if the second\n  //. argument is less than or equal to the first argument.\n  //.\n  //. ```javascript\n  //. > S.range (0) (10)\n  //. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  //.\n  //. > S.range (-5) (0)\n  //. [-5, -4, -3, -2, -1]\n  //.\n  //. > S.range (0) (-5)\n  //. []\n  //. ```\n  function range(from) {\n    return function(to) {\n      var result = [];\n      for (var n = from; n < to; n += 1) result.push (n);\n      return result;\n    };\n  }\n  _.range = {\n    consts: {},\n    types: [$.Integer, $.Integer, $.Array ($.Integer)],\n    impl: range\n  };\n\n  //# groupBy :: (a -> a -> Boolean) -> Array a -> Array (Array a)\n  //.\n  //. Splits its array argument into an array of arrays of equal,\n  //. adjacent elements. Equality is determined by the function\n  //. provided as the first argument. Its behaviour can be surprising\n  //. for functions that aren't reflexive, transitive, and symmetric\n  //. (see [equivalence][] relation).\n  //.\n  //. Properties:\n  //.\n  //.   - `forall f :: a -> a -> Boolean, xs :: Array a.\n  //.      S.join (S.groupBy (f) (xs)) = xs`\n  //.\n  //. ```javascript\n  //. > S.groupBy (S.equals) ([1, 1, 2, 1, 1])\n  //. [[1, 1], [2], [1, 1]]\n  //.\n  //. > S.groupBy (x => y => x + y === 0) ([2, -3, 3, 3, 3, 4, -4, 4])\n  //. [[2], [-3, 3, 3, 3], [4, -4], [4]]\n  //. ```\n  function groupBy(f) {\n    return function(xs) {\n      if (xs.length === 0) return [];\n      var x0 = xs[0];         // :: a\n      var active = [x0];      // :: Array a\n      var result = [active];  // :: Array (Array a)\n      for (var idx = 1; idx < xs.length; idx += 1) {\n        var x = xs[idx];\n        if (f (x0) (x)) active.push (x); else result.push (active = [x0 = x]);\n      }\n      return result;\n    };\n  }\n  _.groupBy = {\n    consts: {},\n    types: [Fn (a) ($.Predicate (a)), $.Array (a), $.Array ($.Array (a))],\n    impl: groupBy\n  };\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. ```javascript\n  //. > S.reverse ([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > S.reverse (Cons (1) (Cons (2) (Cons (3) (Nil))))\n  //. Cons (3) (Cons (2) (Cons (1) (Nil)))\n  //.\n  //. > S.pipe ([S.splitOn (''), S.reverse, S.joinWith ('')]) ('abc')\n  //. 'cba'\n  //. ```\n  _.reverse = {\n    consts: {f: [Z.Applicative, Z.Foldable, Z.Monoid]},\n    types: [f (a), f (a)],\n    impl: Z.reverse\n  };\n\n  //# sort :: (Ord a, Applicative m, Foldable m, Monoid (m a)) => m a -> m a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure, using\n  //. [`Z.lte`][] for comparisons.\n  //.\n  //. Properties:\n  //.\n  //.   - `S.sort (S.sort (m)) = S.sort (m)` (idempotence)\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > S.sort (['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > S.sort ([S.Left (4), S.Right (3), S.Left (2), S.Right (1)])\n  //. [Left (2), Left (4), Right (1), Right (3)]\n  //. ```\n  _.sort = {\n    consts: {a: [Z.Ord], m: [Z.Applicative, Z.Foldable, Z.Monoid]},\n    types: [m (a), m (a)],\n    impl: Z.sort\n  };\n\n  //# sortBy :: (Ord b, Applicative m, Foldable m, Monoid (m a)) => (a -> b) -> m a -> m a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure, using\n  //. [`Z.lte`][] to compare the values produced by applying the given function\n  //. to each element of the structure.\n  //.\n  //. Properties:\n  //.\n  //.   - `S.sortBy (f) (S.sortBy (f) (m)) = S.sortBy (f) (m)` (idempotence)\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > S.sortBy (S.prop ('rank')) ([\n  //. .   {rank: 7, suit: 'spades'},\n  //. .   {rank: 5, suit: 'hearts'},\n  //. .   {rank: 2, suit: 'hearts'},\n  //. .   {rank: 5, suit: 'spades'},\n  //. . ])\n  //. [ {rank: 2, suit: 'hearts'},\n  //. . {rank: 5, suit: 'hearts'},\n  //. . {rank: 5, suit: 'spades'},\n  //. . {rank: 7, suit: 'spades'} ]\n  //.\n  //. > S.sortBy (S.prop ('suit')) ([\n  //. .   {rank: 7, suit: 'spades'},\n  //. .   {rank: 5, suit: 'hearts'},\n  //. .   {rank: 2, suit: 'hearts'},\n  //. .   {rank: 5, suit: 'spades'},\n  //. . ])\n  //. [ {rank: 5, suit: 'hearts'},\n  //. . {rank: 2, suit: 'hearts'},\n  //. . {rank: 7, suit: 'spades'},\n  //. . {rank: 5, suit: 'spades'} ]\n  //. ```\n  //.\n  //. If descending order is desired, one may use [`Descending`][]:\n  //.\n  //. ```javascript\n  //. > S.sortBy (Descending) ([83, 97, 110, 99, 116, 117, 97, 114, 121])\n  //. [121, 117, 116, 114, 110, 99, 97, 97, 83]\n  //. ```\n  _.sortBy = {\n    consts: {b: [Z.Ord], m: [Z.Applicative, Z.Foldable, Z.Monoid]},\n    types: [Fn (a) (b), m (a), m (a)],\n    impl: curry2 (Z.sortBy)\n  };\n\n  //# zip :: Array a -> Array b -> Array (Pair a b)\n  //.\n  //. Returns an array of pairs of corresponding elements from the given\n  //. arrays. The length of the resulting array is equal to the length of\n  //. the shorter input array.\n  //.\n  //. See also [`zipWith`](#zipWith).\n  //.\n  //. ```javascript\n  //. > S.zip (['a', 'b']) (['x', 'y', 'z'])\n  //. [Pair ('a') ('x'), Pair ('b') ('y')]\n  //.\n  //. > S.zip ([1, 3, 5]) ([2, 4])\n  //. [Pair (1) (2), Pair (3) (4)]\n  //. ```\n  _.zip = {\n    consts: {},\n    types: [$.Array (a), $.Array (b), $.Array ($Pair (a) (b))],\n    impl: zipWith (Pair)\n  };\n\n  //# zipWith :: (a -> b -> c) -> Array a -> Array b -> Array c\n  //.\n  //. Returns the result of combining, pairwise, the given arrays using the\n  //. given binary function. The length of the resulting array is equal to the\n  //. length of the shorter input array.\n  //.\n  //. See also [`zip`](#zip).\n  //.\n  //. ```javascript\n  //. > S.zipWith (a => b => a + b) (['a', 'b']) (['x', 'y', 'z'])\n  //. ['ax', 'by']\n  //.\n  //. > S.zipWith (a => b => [a, b]) ([1, 3, 5]) ([2, 4])\n  //. [[1, 2], [3, 4]]\n  //. ```\n  function zipWith(f) {\n    return function(xs) {\n      return function(ys) {\n        var result = [];\n        var len = Math.min (xs.length, ys.length);\n        for (var idx = 0; idx < len; idx += 1) {\n          result.push (f (xs[idx]) (ys[idx]));\n        }\n        return result;\n      };\n    };\n  }\n  _.zipWith = {\n    consts: {},\n    types: [Fn (a) (Fn (b) (c)), $.Array (a), $.Array (b), $.Array (c)],\n    impl: zipWith\n  };\n\n  //. ### Object\n\n  //# prop :: String -> a -> b\n  //.\n  //. Takes a property name and an object with known properties and returns\n  //. the value of the specified property. If for some reason the object\n  //. lacks the specified property, a type error is thrown.\n  //.\n  //. For accessing properties of uncertain objects, use [`get`](#get) instead.\n  //.\n  //. ```javascript\n  //. > S.prop ('a') ({a: 1, b: 2})\n  //. 1\n  //. ```\n  function prop(key) {\n    return function(x) {\n      var obj = toObject (x);\n      if (key in obj) return obj[key];\n      throw new TypeError ('‘prop’ expected object to have a property named ' +\n                           '‘' + key + '’; ' + show (x) + ' does not');\n    };\n  }\n  _.prop = {\n    consts: {},\n    types: [$.String, a, b],\n    impl: prop\n  };\n\n  //# props :: Array String -> a -> b\n  //.\n  //. Takes a property path (an array of property names) and an object with\n  //. known structure and returns the value at the given path. If for some\n  //. reason the path does not exist, a type error is thrown.\n  //.\n  //. For accessing property paths of uncertain objects, use [`gets`](#gets)\n  //. instead.\n  //.\n  //. ```javascript\n  //. > S.props (['a', 'b', 'c']) ({a: {b: {c: 1}}})\n  //. 1\n  //. ```\n  function props(path) {\n    return function(x) {\n      return path.reduce (function(x, key) {\n        var obj = toObject (x);\n        if (key in obj) return obj[key];\n        throw new TypeError ('‘props’ expected object to have a property at ' +\n                             show (path) + '; ' + show (x) + ' does not');\n      }, x);\n    };\n  }\n  _.props = {\n    consts: {},\n    types: [$.Array ($.String), a, b],\n    impl: props\n  };\n\n  //# get :: (Any -> Boolean) -> String -> a -> Maybe b\n  //.\n  //. Takes a predicate, a property name, and an object and returns Just the\n  //. value of the specified object property if it exists and the value\n  //. satisfies the given predicate; Nothing otherwise.\n  //.\n  //. See also [`gets`](#gets) and [`prop`](#prop).\n  //.\n  //. ```javascript\n  //. > S.get (S.is ($.Number)) ('x') ({x: 1, y: 2})\n  //. Just (1)\n  //.\n  //. > S.get (S.is ($.Number)) ('x') ({x: '1', y: '2'})\n  //. Nothing\n  //.\n  //. > S.get (S.is ($.Number)) ('x') ({})\n  //. Nothing\n  //.\n  //. > S.get (S.is ($.Array ($.Number))) ('x') ({x: [1, 2, 3]})\n  //. Just ([1, 2, 3])\n  //.\n  //. > S.get (S.is ($.Array ($.Number))) ('x') ({x: [1, 2, 3, null]})\n  //. Nothing\n  //. ```\n  function get(pred) {\n    return B (B (filter (pred))) (get_);\n  }\n  _.get = {\n    consts: {},\n    types: [$.Predicate ($.Any), $.String, a, $Maybe (b)],\n    impl: get\n  };\n\n  //# gets :: (Any -> Boolean) -> Array String -> a -> Maybe b\n  //.\n  //. Takes a predicate, a property path (an array of property names), and\n  //. an object and returns Just the value at the given path if such a path\n  //. exists and the value satisfies the given predicate; Nothing otherwise.\n  //.\n  //. See also [`get`](#get).\n  //.\n  //. ```javascript\n  //. > S.gets (S.is ($.Number)) (['a', 'b', 'c']) ({a: {b: {c: 42}}})\n  //. Just (42)\n  //.\n  //. > S.gets (S.is ($.Number)) (['a', 'b', 'c']) ({a: {b: {c: '42'}}})\n  //. Nothing\n  //.\n  //. > S.gets (S.is ($.Number)) (['a', 'b', 'c']) ({})\n  //. Nothing\n  //. ```\n  function gets(pred) {\n    return function(keys) {\n      return function(x) {\n        return Z.filter (pred, keys.reduce (function(maybe, key) {\n          return Z.chain (get_ (key), maybe);\n        }, Just (x)));\n      };\n    };\n  }\n  _.gets = {\n    consts: {},\n    types: [$.Predicate ($.Any), $.Array ($.String), a, $Maybe (b)],\n    impl: gets\n  };\n\n  //. ### StrMap\n  //.\n  //. StrMap is an abbreviation of _string map_. A string map is an object,\n  //. such as `{foo: 1, bar: 2, baz: 3}`, whose values are all members of\n  //. the same type. Formally, a value is a member of type `StrMap a` if its\n  //. [type identifier][] is `'Object'` and the values of its enumerable own\n  //. properties are all members of type `a`.\n\n  //# singleton :: String -> a -> StrMap a\n  //.\n  //. Takes a string and a value of any type, and returns a string map with\n  //. a single entry (mapping the key to the value).\n  //.\n  //. ```javascript\n  //. > S.singleton ('foo') (42)\n  //. {foo: 42}\n  //. ```\n  function singleton(key) {\n    return function(val) {\n      var strMap = {};\n      strMap[key] = val;\n      return strMap;\n    };\n  }\n  _.singleton = {\n    consts: {},\n    types: [$.String, a, $.StrMap (a)],\n    impl: singleton\n  };\n\n  //# insert :: String -> a -> StrMap a -> StrMap a\n  //.\n  //. Takes a string, a value of any type, and a string map, and returns a\n  //. string map comprising all the entries of the given string map plus the\n  //. entry specified by the first two arguments (which takes precedence).\n  //.\n  //. Equivalent to Haskell's `insert` function. Similar to Clojure's `assoc`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.insert ('c') (3) ({a: 1, b: 2})\n  //. {a: 1, b: 2, c: 3}\n  //.\n  //. > S.insert ('a') (4) ({a: 1, b: 2})\n  //. {a: 4, b: 2}\n  //. ```\n  function insert(key) {\n    return function(val) {\n      return function(strMap) {\n        return Z.concat (strMap, singleton (key) (val));\n      };\n    };\n  }\n  _.insert = {\n    consts: {},\n    types: [$.String, a, $.StrMap (a), $.StrMap (a)],\n    impl: insert\n  };\n\n  //# remove :: String -> StrMap a -> StrMap a\n  //.\n  //. Takes a string and a string map, and returns a string map comprising all\n  //. the entries of the given string map except the one whose key matches the\n  //. given string (if such a key exists).\n  //.\n  //. Equivalent to Haskell's `delete` function. Similar to Clojure's `dissoc`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.remove ('c') ({a: 1, b: 2, c: 3})\n  //. {a: 1, b: 2}\n  //.\n  //. > S.remove ('c') ({})\n  //. {}\n  //. ```\n  function remove(key) {\n    return function(strMap) {\n      var result = Z.concat (strMap, {});\n      delete result[key];\n      return result;\n    };\n  }\n  _.remove = {\n    consts: {},\n    types: [$.String, $.StrMap (a), $.StrMap (a)],\n    impl: remove\n  };\n\n  //# keys :: StrMap a -> Array String\n  //.\n  //. Returns the keys of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.sort (S.keys ({b: 2, c: 3, a: 1}))\n  //. ['a', 'b', 'c']\n  //. ```\n  _.keys = {\n    consts: {},\n    types: [$.StrMap (a), $.Array ($.String)],\n    impl: Object.keys\n  };\n\n  //# values :: StrMap a -> Array a\n  //.\n  //. Returns the values of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.sort (S.values ({a: 1, c: 3, b: 2}))\n  //. [1, 2, 3]\n  //. ```\n  function values(strMap) {\n    return Z.map (function(k) { return strMap[k]; }, Object.keys (strMap));\n  }\n  _.values = {\n    consts: {},\n    types: [$.StrMap (a), $.Array (a)],\n    impl: values\n  };\n\n  //# pairs :: StrMap a -> Array (Pair String a)\n  //.\n  //. Returns the key–value pairs of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.sort (S.pairs ({b: 2, a: 1, c: 3}))\n  //. [Pair ('a') (1), Pair ('b') (2), Pair ('c') (3)]\n  //. ```\n  function pairs(strMap) {\n    return Z.map (function(k) { return Pair (k) (strMap[k]); },\n                  Object.keys (strMap));\n  }\n  _.pairs = {\n    consts: {},\n    types: [$.StrMap (a), $.Array ($Pair ($.String) (a))],\n    impl: pairs\n  };\n\n  //# fromPairs :: Foldable f => f (Pair String a) -> StrMap a\n  //.\n  //. Returns a string map containing the key–value pairs specified by the\n  //. given [Foldable][]. If a key appears in multiple pairs, the rightmost\n  //. pair takes precedence.\n  //.\n  //. ```javascript\n  //. > S.fromPairs ([S.Pair ('a') (1), S.Pair ('b') (2), S.Pair ('c') (3)])\n  //. {a: 1, b: 2, c: 3}\n  //.\n  //. > S.fromPairs ([S.Pair ('x') (1), S.Pair ('x') (2)])\n  //. {x: 2}\n  //. ```\n  function fromPairs(pairs) {\n    return Z.reduce (function(strMap, pair) {\n      strMap[pair.fst] = pair.snd;\n      return strMap;\n    }, {}, pairs);\n  }\n  _.fromPairs = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($Pair ($.String) (a)), $.StrMap (a)],\n    impl: fromPairs\n  };\n\n  //. ### Number\n\n  //# negate :: ValidNumber -> ValidNumber\n  //.\n  //. Negates its argument.\n  //.\n  //. ```javascript\n  //. > S.negate (12.5)\n  //. -12.5\n  //.\n  //. > S.negate (-42)\n  //. 42\n  //. ```\n  function negate(n) {\n    return -n;\n  }\n  _.negate = {\n    consts: {},\n    types: [$.ValidNumber, $.ValidNumber],\n    impl: negate\n  };\n\n  //# add :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the sum of two (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.add (1) (1)\n  //. 2\n  //. ```\n  function add(x) {\n    return function(y) {\n      return x + y;\n    };\n  }\n  _.add = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: add\n  };\n\n  //# sum :: Foldable f => f FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the sum of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.sum ([1, 2, 3, 4, 5])\n  //. 15\n  //.\n  //. > S.sum ([])\n  //. 0\n  //.\n  //. > S.sum (S.Just (42))\n  //. 42\n  //.\n  //. > S.sum (S.Nothing)\n  //. 0\n  //. ```\n  _.sum = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.FiniteNumber), $.FiniteNumber],\n    impl: reduce (add) (0)\n  };\n\n  //# sub :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Takes a finite number `n` and returns the _subtract `n`_ function.\n  //.\n  //. ```javascript\n  //. > S.map (S.sub (1)) ([1, 2, 3])\n  //. [0, 1, 2]\n  //. ```\n  function sub(y) {\n    return function(x) {\n      return x - y;\n    };\n  }\n  _.sub = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: sub\n  };\n\n  //# mult :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the product of two (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.mult (4) (2)\n  //. 8\n  //. ```\n  function mult(x) {\n    return function(y) {\n      return x * y;\n    };\n  }\n  _.mult = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: mult\n  };\n\n  //# product :: Foldable f => f FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the product of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.product ([1, 2, 3, 4, 5])\n  //. 120\n  //.\n  //. > S.product ([])\n  //. 1\n  //.\n  //. > S.product (S.Just (42))\n  //. 42\n  //.\n  //. > S.product (S.Nothing)\n  //. 1\n  //. ```\n  _.product = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.FiniteNumber), $.FiniteNumber],\n    impl: reduce (mult) (1)\n  };\n\n  //# div :: NonZeroFiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Takes a non-zero finite number `n` and returns the _divide by `n`_\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.map (S.div (2)) ([0, 1, 2, 3])\n  //. [0, 0.5, 1, 1.5]\n  //. ```\n  function div(y) {\n    return function(x) {\n      return x / y;\n    };\n  }\n  _.div = {\n    consts: {},\n    types: [$.NonZeroFiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: div\n  };\n\n  //# pow :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Takes a finite number `n` and returns the _power of `n`_ function.\n  //.\n  //. ```javascript\n  //. > S.map (S.pow (2)) ([-3, -2, -1, 0, 1, 2, 3])\n  //. [9, 4, 1, 0, 1, 4, 9]\n  //.\n  //. > S.map (S.pow (0.5)) ([1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5]\n  //. ```\n  function pow(exp) {\n    return function(base) {\n      return Math.pow (base, exp);\n    };\n  }\n  _.pow = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: pow\n  };\n\n  //# mean :: Foldable f => f FiniteNumber -> Maybe FiniteNumber\n  //.\n  //. Returns the mean of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.mean ([1, 2, 3, 4, 5])\n  //. Just (3)\n  //.\n  //. > S.mean ([])\n  //. Nothing\n  //.\n  //. > S.mean (S.Just (42))\n  //. Just (42)\n  //.\n  //. > S.mean (S.Nothing)\n  //. Nothing\n  //. ```\n  function mean(foldable) {\n    var result = Z.reduce (\n      function(acc, n) {\n        acc.total += n;\n        acc.count += 1;\n        return acc;\n      },\n      {total: 0, count: 0},\n      foldable\n    );\n    return result.count > 0 ? Just (result.total / result.count) : Nothing;\n  }\n  _.mean = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.FiniteNumber), $Maybe ($.FiniteNumber)],\n    impl: mean\n  };\n\n  //. ### Integer\n\n  //# even :: Integer -> Boolean\n  //.\n  //. Returns `true` if the given integer is even; `false` if it is odd.\n  //.\n  //. ```javascript\n  //. > S.even (42)\n  //. true\n  //.\n  //. > S.even (99)\n  //. false\n  //. ```\n  function even(n) {\n    return n % 2 === 0;\n  }\n  _.even = {\n    consts: {},\n    types: [$.Integer, $.Boolean],\n    impl: even\n  };\n\n  //# odd :: Integer -> Boolean\n  //.\n  //. Returns `true` if the given integer is odd; `false` if it is even.\n  //.\n  //. ```javascript\n  //. > S.odd (99)\n  //. true\n  //.\n  //. > S.odd (42)\n  //. false\n  //. ```\n  function odd(n) {\n    return n % 2 !== 0;\n  }\n  _.odd = {\n    consts: {},\n    types: [$.Integer, $.Boolean],\n    impl: odd\n  };\n\n  //. ### Parse\n\n  //# parseDate :: String -> Maybe ValidDate\n  //.\n  //. Takes a string and returns Just the date represented by the string\n  //. if it does in fact represent a date; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseDate ('2011-01-19T17:40:00Z')\n  //. Just (new Date ('2011-01-19T17:40:00.000Z'))\n  //.\n  //. > S.parseDate ('today')\n  //. Nothing\n  //. ```\n  function parseDate(s) {\n    var date = new Date (s);\n    return isNaN (date.valueOf ()) ? Nothing : Just (date);\n  }\n  _.parseDate = {\n    consts: {},\n    types: [$.String, $Maybe ($.ValidDate)],\n    impl: parseDate\n  };\n\n  //  requiredNonCapturingGroup :: Array String -> String\n  function requiredNonCapturingGroup(xs) {\n    return '(?:' + xs.join ('|') + ')';\n  }\n\n  //  optionalNonCapturingGroup :: Array String -> String\n  function optionalNonCapturingGroup(xs) {\n    return requiredNonCapturingGroup (xs) + '?';\n  }\n\n  //  validFloatRepr :: RegExp\n  var validFloatRepr = new RegExp (\n    '^' +                     // start-of-string anchor\n    '\\\\s*' +                  // any number of leading whitespace characters\n    '[+-]?' +                 // optional sign\n    requiredNonCapturingGroup ([\n      'Infinity',             // \"Infinity\"\n      'NaN',                  // \"NaN\"\n      requiredNonCapturingGroup ([\n        '[0-9]+',             // number\n        '[0-9]+[.][0-9]+',    // number with interior decimal point\n        '[0-9]+[.]',          // number with trailing decimal point\n        '[.][0-9]+'           // number with leading decimal point\n      ]) +\n      optionalNonCapturingGroup ([\n        '[Ee]' +              // \"E\" or \"e\"\n        '[+-]?' +             // optional sign\n        '[0-9]+'              // exponent\n      ])\n    ]) +\n    '\\\\s*' +                  // any number of trailing whitespace characters\n    '$'                       // end-of-string anchor\n  );\n\n  //# parseFloat :: String -> Maybe Number\n  //.\n  //. Takes a string and returns Just the number represented by the string\n  //. if it does in fact represent a number; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseFloat ('-123.45')\n  //. Just (-123.45)\n  //.\n  //. > S.parseFloat ('foo.bar')\n  //. Nothing\n  //. ```\n  function parseFloat_(s) {\n    return validFloatRepr.test (s) ? Just (parseFloat (s)) : Nothing;\n  }\n  _.parseFloat = {\n    consts: {},\n    types: [$.String, $Maybe ($.Number)],\n    impl: parseFloat_\n  };\n\n  //  Radix :: Type\n  var Radix = $.NullaryType\n    ('sanctuary/Radix')\n    ('')\n    (function(x) { return $.Integer._test (x) && x >= 2 && x <= 36; });\n\n  //# parseInt :: Radix -> String -> Maybe Integer\n  //.\n  //. Takes a radix (an integer between 2 and 36 inclusive) and a string,\n  //. and returns Just the number represented by the string if it does in\n  //. fact represent a number in the base specified by the radix; Nothing\n  //. otherwise.\n  //.\n  //. This function is stricter than [`parseInt`][parseInt]: a string\n  //. is considered to represent an integer only if all its non-prefix\n  //. characters are members of the character set specified by the radix.\n  //.\n  //. ```javascript\n  //. > S.parseInt (10) ('-42')\n  //. Just (-42)\n  //.\n  //. > S.parseInt (16) ('0xFF')\n  //. Just (255)\n  //.\n  //. > S.parseInt (16) ('0xGG')\n  //. Nothing\n  //. ```\n  function parseInt_(radix) {\n    return function(s) {\n      var charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.slice (0, radix);\n      var pattern = new RegExp ('^[' + charset + ']+$', 'i');\n\n      var t = s.replace (/^[+-]/, '');\n      if (pattern.test (radix === 16 ? t.replace (/^0x/i, '') : t)) {\n        var n = parseInt (s, radix);\n        if ($.Integer._test (n)) return Just (n);\n      }\n      return Nothing;\n    };\n  }\n  _.parseInt = {\n    consts: {},\n    types: [Radix, $.String, $Maybe ($.Integer)],\n    impl: parseInt_\n  };\n\n  //# parseJson :: (Any -> Boolean) -> String -> Maybe a\n  //.\n  //. Takes a predicate and a string which may or may not be valid JSON, and\n  //. returns Just the result of applying `JSON.parse` to the string *if* the\n  //. result satisfies the predicate; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[')\n  //. Nothing\n  //.\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[\"1\",\"2\",\"3\"]')\n  //. Nothing\n  //.\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[0,1.5,3,4.5]')\n  //. Nothing\n  //.\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[1,2,3]')\n  //. Just ([1, 2, 3])\n  //. ```\n  function parseJson(pred) {\n    return B (filter (pred)) (encase (JSON.parse));\n  }\n  _.parseJson = {\n    consts: {},\n    types: [$.Predicate ($.Any), $.String, $Maybe (a)],\n    impl: parseJson\n  };\n\n  //. ### RegExp\n\n  //  Match :: Type\n  var Match = $.RecordType ({\n    match: $.String,\n    groups: $.Array ($Maybe ($.String))\n  });\n\n  //  toMatch :: Array String? -> Match\n  function toMatch(ss) {\n    return {match: ss[0], groups: Z.map (toMaybe, ss.slice (1))};\n  }\n\n  //  withRegex :: (RegExp, () -> a) -> a\n  function withRegex(pattern, thunk) {\n    var lastIndex = pattern.lastIndex;\n    var result = thunk ();\n    pattern.lastIndex = lastIndex;\n    return result;\n  }\n\n  //# regex :: RegexFlags -> String -> RegExp\n  //.\n  //. Takes a [RegexFlags][] and a pattern, and returns a RegExp.\n  //.\n  //. ```javascript\n  //. > S.regex ('g') (':\\\\d+:')\n  //. /:\\d+:/g\n  //. ```\n  function regex(flags) {\n    return function(source) {\n      return new RegExp (source, flags);\n    };\n  }\n  _.regex = {\n    consts: {},\n    types: [$.RegexFlags, $.String, $.RegExp],\n    impl: regex\n  };\n\n  //# regexEscape :: String -> String\n  //.\n  //. Takes a string which may contain regular expression metacharacters,\n  //. and returns a string with those metacharacters escaped.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String.\n  //.      S.test (S.regex ('') (S.regexEscape (s))) (s) = true`\n  //.\n  //. ```javascript\n  //. > S.regexEscape ('-=*{XYZ}*=-')\n  //. '\\\\-=\\\\*\\\\{XYZ\\\\}\\\\*=\\\\-'\n  //. ```\n  function regexEscape(s) {\n    return s.replace (/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  }\n  _.regexEscape = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: regexEscape\n  };\n\n  //# test :: RegExp -> String -> Boolean\n  //.\n  //. Takes a pattern and a string, and returns `true` [iff][] the pattern\n  //. matches the string.\n  //.\n  //. ```javascript\n  //. > S.test (/^a/) ('abacus')\n  //. true\n  //.\n  //. > S.test (/^a/) ('banana')\n  //. false\n  //. ```\n  function test(pattern) {\n    return function(s) {\n      return withRegex (pattern, function() { return pattern.test (s); });\n    };\n  }\n  _.test = {\n    consts: {},\n    types: [$.RegExp, $.String, $.Boolean],\n    impl: test\n  };\n\n  //# match :: NonGlobalRegExp -> String -> Maybe { match :: String, groups :: Array (Maybe String) }\n  //.\n  //. Takes a pattern and a string, and returns Just a match record if the\n  //. pattern matches the string; Nothing otherwise.\n  //.\n  //. `groups :: Array (Maybe String)` acknowledges the existence of optional\n  //. capturing groups.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall p :: Pattern, s :: String.\n  //.      S.head (S.matchAll (S.regex ('g') (p)) (s))\n  //.      = S.match (S.regex ('') (p)) (s)`\n  //.\n  //. See also [`matchAll`](#matchAll).\n  //.\n  //. ```javascript\n  //. > S.match (/(good)?bye/) ('goodbye')\n  //. Just ({match: 'goodbye', groups: [Just ('good')]})\n  //.\n  //. > S.match (/(good)?bye/) ('bye')\n  //. Just ({match: 'bye', groups: [Nothing]})\n  //. ```\n  function match(pattern) {\n    return function(s) {\n      return Z.map (toMatch, toMaybe (s.match (pattern)));\n    };\n  }\n  _.match = {\n    consts: {},\n    types: [$.NonGlobalRegExp, $.String, $Maybe (Match)],\n    impl: match\n  };\n\n  //# matchAll :: GlobalRegExp -> String -> Array { match :: String, groups :: Array (Maybe String) }\n  //.\n  //. Takes a pattern and a string, and returns an array of match records.\n  //.\n  //. `groups :: Array (Maybe String)` acknowledges the existence of optional\n  //. capturing groups.\n  //.\n  //. See also [`match`](#match).\n  //.\n  //. ```javascript\n  //. > S.matchAll (/@([a-z]+)/g) ('Hello, world!')\n  //. []\n  //.\n  //. > S.matchAll (/@([a-z]+)/g) ('Hello, @foo! Hello, @bar! Hello, @baz!')\n  //. [ {match: '@foo', groups: [Just ('foo')]},\n  //. . {match: '@bar', groups: [Just ('bar')]},\n  //. . {match: '@baz', groups: [Just ('baz')]} ]\n  //. ```\n  function matchAll(pattern) {\n    return function(s) {\n      return withRegex (pattern, function() {\n        return unfoldr (function(_) {\n          return Z.map (function(ss) {\n            return Pair (toMatch (ss)) (null);\n          }, toMaybe (pattern.exec (s)));\n        }) ([]);\n      });\n    };\n  }\n  _.matchAll = {\n    consts: {},\n    types: [$.GlobalRegExp, $.String, $.Array (Match)],\n    impl: matchAll\n  };\n\n  //. ### String\n\n  //# toUpper :: String -> String\n  //.\n  //. Returns the upper-case equivalent of its argument.\n  //.\n  //. See also [`toLower`](#toLower).\n  //.\n  //. ```javascript\n  //. > S.toUpper ('ABC def 123')\n  //. 'ABC DEF 123'\n  //. ```\n  _.toUpper = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: invoke0 ('toUpperCase')\n  };\n\n  //# toLower :: String -> String\n  //.\n  //. Returns the lower-case equivalent of its argument.\n  //.\n  //. See also [`toUpper`](#toUpper).\n  //.\n  //. ```javascript\n  //. > S.toLower ('ABC def 123')\n  //. 'abc def 123'\n  //. ```\n  _.toLower = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: invoke0 ('toLowerCase')\n  };\n\n  //# trim :: String -> String\n  //.\n  //. Strips leading and trailing whitespace characters.\n  //.\n  //. ```javascript\n  //. > S.trim ('\\t\\t foo bar \\n')\n  //. 'foo bar'\n  //. ```\n  _.trim = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: invoke0 ('trim')\n  };\n\n  //# stripPrefix :: String -> String -> Maybe String\n  //.\n  //. Returns Just the portion of the given string (the second argument) left\n  //. after removing the given prefix (the first argument) if the string starts\n  //. with the prefix; Nothing otherwise.\n  //.\n  //. See also [`stripSuffix`](#stripSuffix).\n  //.\n  //. ```javascript\n  //. > S.stripPrefix ('https://') ('https://sanctuary.js.org')\n  //. Just ('sanctuary.js.org')\n  //.\n  //. > S.stripPrefix ('https://') ('http://sanctuary.js.org')\n  //. Nothing\n  //. ```\n  function stripPrefix(prefix) {\n    return function(s) {\n      var idx = prefix.length;\n      return s.slice (0, idx) === prefix ? Just (s.slice (idx)) : Nothing;\n    };\n  }\n  _.stripPrefix = {\n    consts: {},\n    types: [$.String, $.String, $Maybe ($.String)],\n    impl: stripPrefix\n  };\n\n  //# stripSuffix :: String -> String -> Maybe String\n  //.\n  //. Returns Just the portion of the given string (the second argument) left\n  //. after removing the given suffix (the first argument) if the string ends\n  //. with the suffix; Nothing otherwise.\n  //.\n  //. See also [`stripPrefix`](#stripPrefix).\n  //.\n  //. ```javascript\n  //. > S.stripSuffix ('.md') ('README.md')\n  //. Just ('README')\n  //.\n  //. > S.stripSuffix ('.md') ('README')\n  //. Nothing\n  //. ```\n  function stripSuffix(suffix) {\n    return function(s) {\n      var idx = s.length - suffix.length;  // value may be negative\n      return s.slice (idx) === suffix ? Just (s.slice (0, idx)) : Nothing;\n    };\n  }\n  _.stripSuffix = {\n    consts: {},\n    types: [$.String, $.String, $Maybe ($.String)],\n    impl: stripSuffix\n  };\n\n  //# words :: String -> Array String\n  //.\n  //. Takes a string and returns the array of words the string contains\n  //. (words are delimited by whitespace characters).\n  //.\n  //. See also [`unwords`](#unwords).\n  //.\n  //. ```javascript\n  //. > S.words (' foo bar baz ')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function words(s) {\n    var words = s.split (/\\s+/);\n    var len = words.length;\n    return words.slice (words[0] === '' ? 1 : 0,\n                        words[len - 1] === '' ? len - 1 : len);\n  }\n  _.words = {\n    consts: {},\n    types: [$.String, $.Array ($.String)],\n    impl: words\n  };\n\n  //# unwords :: Array String -> String\n  //.\n  //. Takes an array of words and returns the result of joining the words\n  //. with separating spaces.\n  //.\n  //. See also [`words`](#words).\n  //.\n  //. ```javascript\n  //. > S.unwords (['foo', 'bar', 'baz'])\n  //. 'foo bar baz'\n  //. ```\n  _.unwords = {\n    consts: {},\n    types: [$.Array ($.String), $.String],\n    impl: invoke1 ('join') (' ')\n  };\n\n  //# lines :: String -> Array String\n  //.\n  //. Takes a string and returns the array of lines the string contains\n  //. (lines are delimited by newlines: `'\\n'` or `'\\r\\n'` or `'\\r'`).\n  //. The resulting strings do not contain newlines.\n  //.\n  //. See also [`unlines`](#unlines).\n  //.\n  //. ```javascript\n  //. > S.lines ('foo\\nbar\\nbaz\\n')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function lines(s) {\n    return s === '' ? []\n                    : (s.replace (/\\r\\n?/g, '\\n')).match (/^(?=[\\s\\S]).*/gm);\n  }\n  _.lines = {\n    consts: {},\n    types: [$.String, $.Array ($.String)],\n    impl: lines\n  };\n\n  //# unlines :: Array String -> String\n  //.\n  //. Takes an array of lines and returns the result of joining the lines\n  //. after appending a terminating line feed (`'\\n'`) to each.\n  //.\n  //. See also [`lines`](#lines).\n  //.\n  //. ```javascript\n  //. > S.unlines (['foo', 'bar', 'baz'])\n  //. 'foo\\nbar\\nbaz\\n'\n  //. ```\n  function unlines(xs) {\n    return xs.reduce (function(s, x) { return s + x + '\\n'; }, '');\n  }\n  _.unlines = {\n    consts: {},\n    types: [$.Array ($.String), $.String],\n    impl: unlines\n  };\n\n  //# splitOn :: String -> String -> Array String\n  //.\n  //. Returns the substrings of its second argument separated by occurrences\n  //. of its first argument.\n  //.\n  //. See also [`joinWith`](#joinWith) and [`splitOnRegex`](#splitOnRegex).\n  //.\n  //. ```javascript\n  //. > S.splitOn ('::') ('foo::bar::baz')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  _.splitOn = {\n    consts: {},\n    types: [$.String, $.String, $.Array ($.String)],\n    impl: invoke1 ('split')\n  };\n\n  //# splitOnRegex :: GlobalRegExp -> String -> Array String\n  //.\n  //. Takes a pattern and a string, and returns the result of splitting the\n  //. string at every non-overlapping occurrence of the pattern.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String, t :: String.\n  //.      S.joinWith (s)\n  //.                 (S.splitOnRegex (S.regex ('g') (S.regexEscape (s))) (t))\n  //.      = t`\n  //.\n  //. See also [`splitOn`](#splitOn).\n  //.\n  //. ```javascript\n  //. > S.splitOnRegex (/[,;][ ]*/g) ('foo, bar, baz')\n  //. ['foo', 'bar', 'baz']\n  //.\n  //. > S.splitOnRegex (/[,;][ ]*/g) ('foo;bar;baz')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function splitOnRegex(pattern) {\n    return function(s) {\n      return withRegex (pattern, function() {\n        var result = [];\n        var lastIndex = 0;\n        var match;\n        while ((match = pattern.exec (s)) != null) {\n          if (pattern.lastIndex === lastIndex && match[0] === '') {\n            if (pattern.lastIndex === s.length) return result;\n            pattern.lastIndex += 1;\n          } else {\n            result.push (s.slice (lastIndex, match.index));\n            lastIndex = match.index + match[0].length;\n          }\n        }\n        result.push (s.slice (lastIndex));\n        return result;\n      });\n    };\n  }\n  _.splitOnRegex = {\n    consts: {},\n    types: [$.GlobalRegExp, $.String, $.Array ($.String)],\n    impl: splitOnRegex\n  };\n\n  return create ({\n    checkTypes: (\n      /* global process:false */\n      typeof process === 'undefined'\n      || process == null\n      || process.env == null\n      || process.env.NODE_ENV !== 'production'\n    ),\n    env: Z.concat ($.env, [\n      $.FiniteNumber,\n      $.NonZeroFiniteNumber,\n      $Either ($.Unknown) ($.Unknown),\n      Fn ($.Unknown) ($.Unknown),\n      $.GlobalRegExp,\n      $.NonGlobalRegExp,\n      $.Integer,\n      $.NonNegativeInteger,\n      $Maybe ($.Unknown),\n      $.Array2 ($.Unknown) ($.Unknown),\n      $Pair ($.Unknown) ($.Unknown),\n      $.RegexFlags,\n      $.Type,\n      $.TypeClass,\n      $.ValidDate,\n      $.ValidNumber\n    ])\n  });\n\n}));\n\n//. [#438]:                     https://github.com/sanctuary-js/sanctuary/issues/438\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [BinaryType]:               v:sanctuary-js/sanctuary-def#BinaryType\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [Either]:                   #either-type\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [GIGO]:                     https://en.wikipedia.org/wiki/Garbage_in,_garbage_out\n//. [Haskell]:                  https://www.haskell.org/\n//. [Kleisli]:                  https://en.wikipedia.org/wiki/Kleisli_category\n//. [Maybe]:                    #maybe-type\n//. [Nullable]:                 v:sanctuary-js/sanctuary-def#Nullable\n//. [PureScript]:               http://www.purescript.org/\n//. [Ramda]:                    http://ramdajs.com/\n//. [RegexFlags]:               v:sanctuary-js/sanctuary-def#RegexFlags\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [UnaryType]:                v:sanctuary-js/sanctuary-def#UnaryType\n//. [`$.test`]:                 v:sanctuary-js/sanctuary-def#test\n//. [`Descending`]:             v:sanctuary-js/sanctuary-descending#Descending\n//. [`R.__`]:                   http://ramdajs.com/docs/#__\n//. [`R.bind`]:                 http://ramdajs.com/docs/#bind\n//. [`R.invoker`]:              http://ramdajs.com/docs/#invoker\n//. [`Z.alt`]:                  v:sanctuary-js/sanctuary-type-classes#alt\n//. [`Z.ap`]:                   v:sanctuary-js/sanctuary-type-classes#ap\n//. [`Z.apFirst`]:              v:sanctuary-js/sanctuary-type-classes#apFirst\n//. [`Z.apSecond`]:             v:sanctuary-js/sanctuary-type-classes#apSecond\n//. [`Z.bimap`]:                v:sanctuary-js/sanctuary-type-classes#bimap\n//. [`Z.chain`]:                v:sanctuary-js/sanctuary-type-classes#chain\n//. [`Z.chainRec`]:             v:sanctuary-js/sanctuary-type-classes#chainRec\n//. [`Z.compose`]:              v:sanctuary-js/sanctuary-type-classes#compose\n//. [`Z.concat`]:               v:sanctuary-js/sanctuary-type-classes#concat\n//. [`Z.contramap`]:            v:sanctuary-js/sanctuary-type-classes#contramap\n//. [`Z.dropWhile`]:            v:sanctuary-js/sanctuary-type-classes#dropWhile\n//. [`Z.duplicate`]:            v:sanctuary-js/sanctuary-type-classes#duplicate\n//. [`Z.empty`]:                v:sanctuary-js/sanctuary-type-classes#empty\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.extend`]:               v:sanctuary-js/sanctuary-type-classes#extend\n//. [`Z.extract`]:              v:sanctuary-js/sanctuary-type-classes#extract\n//. [`Z.filter`]:               v:sanctuary-js/sanctuary-type-classes#filter\n//. [`Z.flip`]:                 v:sanctuary-js/sanctuary-type-classes#flip\n//. [`Z.foldMap`]:              v:sanctuary-js/sanctuary-type-classes#foldMap\n//. [`Z.gt`]:                   v:sanctuary-js/sanctuary-type-classes#gt\n//. [`Z.gte`]:                  v:sanctuary-js/sanctuary-type-classes#gte\n//. [`Z.id`]:                   v:sanctuary-js/sanctuary-type-classes#id\n//. [`Z.invert`]:               v:sanctuary-js/sanctuary-type-classes#invert\n//. [`Z.join`]:                 v:sanctuary-js/sanctuary-type-classes#join\n//. [`Z.lt`]:                   v:sanctuary-js/sanctuary-type-classes#lt\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [`Z.map`]:                  v:sanctuary-js/sanctuary-type-classes#map\n//. [`Z.mapLeft`]:              v:sanctuary-js/sanctuary-type-classes#mapLeft\n//. [`Z.of`]:                   v:sanctuary-js/sanctuary-type-classes#of\n//. [`Z.promap`]:               v:sanctuary-js/sanctuary-type-classes#promap\n//. [`Z.reject`]:               v:sanctuary-js/sanctuary-type-classes#reject\n//. [`Z.sequence`]:             v:sanctuary-js/sanctuary-type-classes#sequence\n//. [`Z.takeWhile`]:            v:sanctuary-js/sanctuary-type-classes#takeWhile\n//. [`Z.traverse`]:             v:sanctuary-js/sanctuary-type-classes#traverse\n//. [`Z.zero`]:                 v:sanctuary-js/sanctuary-type-classes#zero\n//. [`show`]:                   v:sanctuary-js/sanctuary-show#show\n//. [equivalence]:              https://en.wikipedia.org/wiki/Equivalence_relation\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [parseInt]:                 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n//. [partial functions]:        https://en.wikipedia.org/wiki/Partial_function\n//. [ramda/ramda#683]:          https://github.com/ramda/ramda/issues/683\n//. [ramda/ramda#1413]:         https://github.com/ramda/ramda/issues/1413\n//. [ramda/ramda#1419]:         https://github.com/ramda/ramda/pull/1419\n//. [sanctuary-def]:            v:sanctuary-js/sanctuary-def\n//. [sanctuary-either]:         v:sanctuary-js/sanctuary-either\n//. [sanctuary-maybe]:          v:sanctuary-js/sanctuary-maybe\n//. [sanctuary-pair]:           v:sanctuary-js/sanctuary-pair\n//. [sanctuary-show]:           v:sanctuary-js/sanctuary-show\n//. [sanctuary-type-classes]:   v:sanctuary-js/sanctuary-type-classes\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [thrush]:                   https://github.com/raganwald-deprecated/homoiconic/blob/master/2008-10-30/thrush.markdown\n//. [total functions]:          https://en.wikipedia.org/wiki/Partial_function#Total_function\n//. [type checking]:            #type-checking\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n//. [variadic functions]:       https://en.wikipedia.org/wiki/Variadic_function\n","import { PriorityQueue, Set, BSTree } from 'typescript-collections';\nimport { Semigroup, concat } from 'sanctuary-type-classes';\n\nvar totalRegistrations = 0;\r\nfunction getTotalRegistrations() {\r\n    return totalRegistrations;\r\n}\r\nvar Source = /** @class */ (function () {\r\n    function Source(origin, register_) {\r\n        this.registered = false;\r\n        this.deregister_ = null;\r\n        if (origin === null)\r\n            throw new Error(\"null origin!\");\r\n        this.origin = origin;\r\n        this.register_ = register_;\r\n    }\r\n    Source.prototype.register = function (target) {\r\n        var _this = this;\r\n        if (!this.registered) {\r\n            this.registered = true;\r\n            if (this.register_ !== null)\r\n                this.deregister_ = this.register_();\r\n            else {\r\n                this.origin.increment(target);\r\n                this.deregister_ = function () { return _this.origin.decrement(target); };\r\n            }\r\n        }\r\n    };\r\n    Source.prototype.deregister = function (target) {\r\n        if (this.registered) {\r\n            this.registered = false;\r\n            if (this.deregister_ !== null)\r\n                this.deregister_();\r\n        }\r\n    };\r\n    return Source;\r\n}());\r\nvar Color;\r\n(function (Color) {\r\n    Color[Color[\"black\"] = 0] = \"black\";\r\n    Color[Color[\"gray\"] = 1] = \"gray\";\r\n    Color[Color[\"white\"] = 2] = \"white\";\r\n    Color[Color[\"purple\"] = 3] = \"purple\";\r\n})(Color || (Color = {}));\r\n\r\nvar roots = [];\r\nvar nextID = 0;\r\nvar verbose = false;\r\n\r\n\r\nvar Vertex = /** @class */ (function () {\r\n    function Vertex(name, rank, sources) {\r\n        this.targets = [];\r\n        this.childrn = [];\r\n        this.visited = false;\r\n        // --------------------------------------------------------\r\n        // Synchronous Cycle Collection algorithm presented in \"Concurrent\r\n        // Cycle Collection in Reference Counted Systems\" by David F. Bacon\r\n        // and V.T. Rajan.\r\n        this.color = Color.black;\r\n        this.buffered = false;\r\n        this.refCountAdj = 0;\r\n        this.name = name;\r\n        this.rank = rank;\r\n        this.sources = sources;\r\n        this.id = nextID++;\r\n    }\r\n    Vertex.prototype.refCount = function () { return this.targets.length; };\r\n    \r\n    Vertex.prototype.register = function (target) {\r\n        return this.increment(target);\r\n    };\r\n    Vertex.prototype.deregister = function (target) {\r\n        if (verbose)\r\n            console.log(\"deregister \" + this.descr() + \" => \" + target.descr());\r\n        this.decrement(target);\r\n        Vertex.collectCycles();\r\n    };\r\n    Vertex.prototype.incRefCount = function (target) {\r\n        var anyChanged = false;\r\n        if (this.refCount() == 0) {\r\n            for (var i = 0; i < this.sources.length; i++)\r\n                this.sources[i].register(this);\r\n        }\r\n        this.targets.push(target);\r\n        target.childrn.push(this);\r\n        if (target.ensureBiggerThan(this.rank))\r\n            anyChanged = true;\r\n        totalRegistrations++;\r\n        return anyChanged;\r\n    };\r\n    Vertex.prototype.decRefCount = function (target) {\r\n        if (verbose)\r\n            console.log(\"DEC \" + this.descr());\r\n        var matched = false;\r\n        for (var i = target.childrn.length - 1; i >= 0; i--)\r\n            if (target.childrn[i] === this) {\r\n                target.childrn.splice(i, 1);\r\n            }\r\n        for (var i = 0; i < this.targets.length; i++)\r\n            if (this.targets[i] === target) {\r\n                this.targets.splice(i, 1);\r\n                matched = true;\r\n                break;\r\n            }\r\n        if (matched) {\r\n            if (this.refCount() == 0) {\r\n                for (var i = 0; i < this.sources.length; i++)\r\n                    this.sources[i].deregister(this);\r\n            }\r\n            totalRegistrations--;\r\n        }\r\n    };\r\n    Vertex.prototype.addSource = function (src) {\r\n        this.sources.push(src);\r\n        if (this.refCount() > 0)\r\n            src.register(this);\r\n    };\r\n    Vertex.prototype.ensureBiggerThan = function (limit) {\r\n        if (this.rank > limit || this.visited)\r\n            return false;\r\n        this.visited = true;\r\n        this.rank = limit + 1;\r\n        for (var i = 0; i < this.targets.length; i++)\r\n            this.targets[i].ensureBiggerThan(this.rank);\r\n        this.visited = false;\r\n        return true;\r\n    };\r\n    Vertex.prototype.descr = function () {\r\n        var colStr = null;\r\n        switch (this.color) {\r\n            case Color.black:\r\n                colStr = \"black\";\r\n                break;\r\n            case Color.gray:\r\n                colStr = \"gray\";\r\n                break;\r\n            case Color.white:\r\n                colStr = \"white\";\r\n                break;\r\n            case Color.purple:\r\n                colStr = \"purple\";\r\n                break;\r\n        }\r\n        var str = this.id + \" \" + this.name + \" [\" + this.refCount() + \"/\" + this.refCountAdj + \"] \" + colStr + \" ->\";\r\n        var chs = this.children();\r\n        for (var i = 0; i < chs.length; i++) {\r\n            str = str + \" \" + chs[i].id;\r\n        }\r\n        return str;\r\n    };\r\n    Vertex.prototype.children = function () { return this.childrn; };\r\n    Vertex.prototype.increment = function (referrer) {\r\n        return this.incRefCount(referrer);\r\n    };\r\n    Vertex.prototype.decrement = function (referrer) {\r\n        this.decRefCount(referrer);\r\n        if (this.refCount() == 0)\r\n            this.release();\r\n        else\r\n            this.possibleRoots();\r\n    };\r\n    Vertex.prototype.release = function () {\r\n        this.color = Color.black;\r\n        if (!this.buffered)\r\n            this.free();\r\n    };\r\n    Vertex.prototype.free = function () {\r\n        while (this.targets.length > 0)\r\n            this.decRefCount(this.targets[0]);\r\n    };\r\n    Vertex.prototype.possibleRoots = function () {\r\n        if (this.color != Color.purple) {\r\n            this.color = Color.purple;\r\n            if (!this.buffered) {\r\n                this.buffered = true;\r\n                roots.push(this);\r\n            }\r\n        }\r\n    };\r\n    Vertex.collectCycles = function () {\r\n        if (Vertex.collectingCycles) {\r\n            return;\r\n        }\r\n        try {\r\n            Vertex.collectingCycles = true;\r\n            Vertex.markRoots();\r\n            Vertex.scanRoots();\r\n            Vertex.collectRoots();\r\n        }\r\n        finally {\r\n            Vertex.collectingCycles = false;\r\n        }\r\n    };\r\n    Vertex.markRoots = function () {\r\n        var newRoots = [];\r\n        for (var i = 0; i < roots.length; i++) {\r\n            if (verbose)\r\n                console.log(\"markRoots \" + roots[i].descr()); // ###\r\n            if (roots[i].color == Color.purple) {\r\n                roots[i].markGray();\r\n                newRoots.push(roots[i]);\r\n            }\r\n            else {\r\n                roots[i].buffered = false;\r\n                if (roots[i].color == Color.black && roots[i].refCount() == 0)\r\n                    roots[i].free();\r\n            }\r\n        }\r\n        roots = newRoots;\r\n    };\r\n    Vertex.scanRoots = function () {\r\n        for (var i = 0; i < roots.length; i++)\r\n            roots[i].scan();\r\n    };\r\n    Vertex.collectRoots = function () {\r\n        for (var i = 0; i < roots.length; i++) {\r\n            roots[i].buffered = false;\r\n            roots[i].collectWhite();\r\n        }\r\n        roots = [];\r\n    };\r\n    Vertex.prototype.markGray = function () {\r\n        if (this.color != Color.gray) {\r\n            this.color = Color.gray;\r\n            var chs = this.children();\r\n            for (var i = 0; i < chs.length; i++) {\r\n                chs[i].refCountAdj--;\r\n                if (verbose)\r\n                    console.log(\"markGray \" + this.descr());\r\n                chs[i].markGray();\r\n            }\r\n        }\r\n    };\r\n    Vertex.prototype.scan = function () {\r\n        if (verbose)\r\n            console.log(\"scan \" + this.descr());\r\n        if (this.color == Color.gray) {\r\n            if (this.refCount() + this.refCountAdj > 0)\r\n                this.scanBlack();\r\n            else {\r\n                this.color = Color.white;\r\n                if (verbose)\r\n                    console.log(\"scan WHITE \" + this.descr());\r\n                var chs = this.children();\r\n                for (var i = 0; i < chs.length; i++)\r\n                    chs[i].scan();\r\n            }\r\n        }\r\n    };\r\n    Vertex.prototype.scanBlack = function () {\r\n        this.color = Color.black;\r\n        var chs = this.children();\r\n        for (var i = 0; i < chs.length; i++) {\r\n            chs[i].refCountAdj++;\r\n            if (verbose)\r\n                console.log(\"scanBlack \" + this.descr());\r\n            if (chs[i].color != Color.black)\r\n                chs[i].scanBlack();\r\n        }\r\n    };\r\n    Vertex.prototype.collectWhite = function () {\r\n        if (this.color == Color.white && !this.buffered) {\r\n            if (verbose)\r\n                console.log(\"collectWhite \" + this.descr());\r\n            this.color = Color.black;\r\n            this.refCountAdj = 0;\r\n            var chs = this.children();\r\n            for (var i = 0; i < chs.length; i++)\r\n                chs[i].collectWhite();\r\n            this.free();\r\n        }\r\n    };\r\n    Vertex.NULL = new Vertex(\"user\", 1e12, []);\r\n    Vertex.collectingCycles = false;\r\n    return Vertex;\r\n}());\n\nvar Lambda1 = /** @class */ (function () {\r\n    function Lambda1(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda1;\r\n}());\r\nfunction lambda1(f, deps) {\r\n    return new Lambda1(f, deps);\r\n}\r\nfunction Lambda1_deps(f) {\r\n    if (f instanceof Lambda1)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda1_toFunction(f) {\r\n    if (f instanceof Lambda1)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda2 = /** @class */ (function () {\r\n    function Lambda2(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda2;\r\n}());\r\nfunction lambda2(f, deps) {\r\n    return new Lambda2(f, deps);\r\n}\r\nfunction Lambda2_deps(f) {\r\n    if (f instanceof Lambda2)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda2_toFunction(f) {\r\n    if (f instanceof Lambda2)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda3 = /** @class */ (function () {\r\n    function Lambda3(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda3;\r\n}());\r\nfunction lambda3(f, deps) {\r\n    return new Lambda3(f, deps);\r\n}\r\nfunction Lambda3_deps(f) {\r\n    if (f instanceof Lambda3)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda3_toFunction(f) {\r\n    if (f instanceof Lambda3)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda4 = /** @class */ (function () {\r\n    function Lambda4(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda4;\r\n}());\r\nfunction lambda4(f, deps) {\r\n    return new Lambda4(f, deps);\r\n}\r\nfunction Lambda4_deps(f) {\r\n    if (f instanceof Lambda4)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda4_toFunction(f) {\r\n    if (f instanceof Lambda4)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda5 = /** @class */ (function () {\r\n    function Lambda5(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda5;\r\n}());\r\nfunction lambda5(f, deps) {\r\n    return new Lambda5(f, deps);\r\n}\r\nfunction Lambda5_deps(f) {\r\n    if (f instanceof Lambda5)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda5_toFunction(f) {\r\n    if (f instanceof Lambda5)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda6 = /** @class */ (function () {\r\n    function Lambda6(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda6;\r\n}());\r\nfunction lambda6(f, deps) {\r\n    return new Lambda6(f, deps);\r\n}\r\nfunction Lambda6_deps(f) {\r\n    if (f instanceof Lambda6)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda6_toFunction(f) {\r\n    if (f instanceof Lambda6)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nfunction toSources(deps) {\r\n    var ss = [];\r\n    for (var i = 0; i < deps.length; i++) {\r\n        var dep = deps[i];\r\n        ss.push(new Source(dep.getVertex__(), null));\r\n    }\r\n    return ss;\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar Entry = /** @class */ (function () {\r\n    function Entry(rank, action) {\r\n        this.rank = rank;\r\n        this.action = action;\r\n        this.seq = Entry.nextSeq++;\r\n    }\r\n    Entry.prototype.toString = function () {\r\n        return this.seq.toString();\r\n    };\r\n    Entry.nextSeq = 0;\r\n    return Entry;\r\n}());\r\nvar Transaction = /** @class */ (function () {\r\n    function Transaction() {\r\n        this.inCallback = 0;\r\n        this.toRegen = false;\r\n        this.prioritizedQ = new PriorityQueue(function (a, b) {\r\n            // Note: Low priority numbers are treated as \"greater\" according to this\r\n            // comparison, so that the lowest numbers are highest priority and go first.\r\n            if (a.rank.rank < b.rank.rank)\r\n                return 1;\r\n            if (a.rank.rank > b.rank.rank)\r\n                return -1;\r\n            if (a.seq < b.seq)\r\n                return 1;\r\n            if (a.seq > b.seq)\r\n                return -1;\r\n            return 0;\r\n        });\r\n        this.entries = new Set(function (a) { return a.toString(); });\r\n        this.sampleQ = [];\r\n        this.lastQ = [];\r\n        this.postQ = null;\r\n    }\r\n    Transaction.prototype.requestRegen = function () {\r\n        this.toRegen = true;\r\n    };\r\n    Transaction.prototype.prioritized = function (target, action) {\r\n        var e = new Entry(target, action);\r\n        this.prioritizedQ.enqueue(e);\r\n        this.entries.add(e);\r\n    };\r\n    Transaction.prototype.sample = function (h) {\r\n        this.sampleQ.push(h);\r\n    };\r\n    Transaction.prototype.last = function (h) {\r\n        this.lastQ.push(h);\r\n    };\r\n    /**\r\n     * Add an action to run after all last() actions.\r\n     */\r\n    Transaction.prototype.post = function (childIx, action) {\r\n        if (this.postQ == null)\r\n            this.postQ = [];\r\n        // If an entry exists already, combine the old one with the new one.\r\n        while (this.postQ.length <= childIx)\r\n            this.postQ.push(null);\r\n        var existing = this.postQ[childIx], neu = existing === null ? action\r\n            : function () {\r\n                existing();\r\n                action();\r\n            };\r\n        this.postQ[childIx] = neu;\r\n    };\r\n    // If the priority queue has entries in it when we modify any of the nodes'\r\n    // ranks, then we need to re-generate it to make sure it's up-to-date.\r\n    Transaction.prototype.checkRegen = function () {\r\n        if (this.toRegen) {\r\n            this.toRegen = false;\r\n            this.prioritizedQ.clear();\r\n            var es = this.entries.toArray();\r\n            for (var i = 0; i < es.length; i++)\r\n                this.prioritizedQ.enqueue(es[i]);\r\n        }\r\n    };\r\n    Transaction.prototype.isActive = function () {\r\n        return Transaction.currentTransaction ? true : false;\r\n    };\r\n    Transaction.prototype.close = function () {\r\n        while (true) {\r\n            while (true) {\r\n                this.checkRegen();\r\n                if (this.prioritizedQ.isEmpty())\r\n                    break;\r\n                var e = this.prioritizedQ.dequeue();\r\n                this.entries.remove(e);\r\n                e.action();\r\n            }\r\n            var sq = this.sampleQ;\r\n            this.sampleQ = [];\r\n            for (var i = 0; i < sq.length; i++)\r\n                sq[i]();\r\n            if (this.prioritizedQ.isEmpty() && this.sampleQ.length < 1)\r\n                break;\r\n        }\r\n        for (var i = 0; i < this.lastQ.length; i++)\r\n            this.lastQ[i]();\r\n        this.lastQ = [];\r\n        if (this.postQ != null) {\r\n            for (var i = 0; i < this.postQ.length; i++) {\r\n                if (this.postQ[i] != null) {\r\n                    var parent_1 = Transaction.currentTransaction;\r\n                    try {\r\n                        if (i > 0) {\r\n                            Transaction.currentTransaction = new Transaction();\r\n                            try {\r\n                                this.postQ[i]();\r\n                                Transaction.currentTransaction.close();\r\n                            }\r\n                            catch (err) {\r\n                                Transaction.currentTransaction.close();\r\n                                throw err;\r\n                            }\r\n                        }\r\n                        else {\r\n                            Transaction.currentTransaction = null;\r\n                            this.postQ[i]();\r\n                        }\r\n                        Transaction.currentTransaction = parent_1;\r\n                    }\r\n                    catch (err) {\r\n                        Transaction.currentTransaction = parent_1;\r\n                        throw err;\r\n                    }\r\n                }\r\n            }\r\n            this.postQ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Add a runnable that will be executed whenever a transaction is started.\r\n     * That runnable may start transactions itself, which will not cause the\r\n     * hooks to be run recursively.\r\n     *\r\n     * The main use case of this is the implementation of a time/alarm system.\r\n     */\r\n    Transaction.onStart = function (r) {\r\n        Transaction.onStartHooks.push(r);\r\n    };\r\n    Transaction.run = function (f) {\r\n        var transWas = Transaction.currentTransaction;\r\n        if (transWas === null) {\r\n            if (!Transaction.runningOnStartHooks) {\r\n                Transaction.runningOnStartHooks = true;\r\n                try {\r\n                    for (var i = 0; i < Transaction.onStartHooks.length; i++)\r\n                        Transaction.onStartHooks[i]();\r\n                }\r\n                finally {\r\n                    Transaction.runningOnStartHooks = false;\r\n                }\r\n            }\r\n            Transaction.currentTransaction = new Transaction();\r\n        }\r\n        try {\r\n            var a = f();\r\n            if (transWas === null) {\r\n                Transaction.currentTransaction.close();\r\n                Transaction.currentTransaction = null;\r\n            }\r\n            return a;\r\n        }\r\n        catch (err) {\r\n            if (transWas === null) {\r\n                Transaction.currentTransaction.close();\r\n                Transaction.currentTransaction = null;\r\n            }\r\n            throw err;\r\n        }\r\n    };\r\n    Transaction.currentTransaction = null;\r\n    Transaction.onStartHooks = [];\r\n    Transaction.runningOnStartHooks = false;\r\n    return Transaction;\r\n}());\n\nvar CoalesceHandler = /** @class */ (function () {\r\n    function CoalesceHandler(f, out) {\r\n        this.f = Lambda2_toFunction(f);\r\n        this.out = out;\r\n        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(toSources(Lambda2_deps(f)));\r\n        this.accumValid = false;\r\n    }\r\n    CoalesceHandler.prototype.send_ = function (a) {\r\n        var _this = this;\r\n        if (this.accumValid)\r\n            this.accum = this.f(this.accum, a);\r\n        else {\r\n            Transaction.currentTransaction.prioritized(this.out.getVertex__(), function () {\r\n                _this.out.send_(_this.accum);\r\n                _this.accumValid = false;\r\n                _this.accum = null;\r\n            });\r\n            this.accum = a;\r\n            this.accumValid = true;\r\n        }\r\n    };\r\n    return CoalesceHandler;\r\n}());\n\n/**\r\n * A representation for a value that may not be available until the current\r\n * transaction is closed.\r\n */\r\nvar Lazy = /** @class */ (function () {\r\n    function Lazy(f) {\r\n        this.f = f;\r\n    }\r\n    /**\r\n     * Get the value if available, throwing an exception if not.\r\n     * In the general case this should only be used in subsequent transactions to\r\n     * when the Lazy was obtained.\r\n     */\r\n    Lazy.prototype.get = function () {\r\n        return this.f();\r\n    };\r\n    /**\r\n     * Map the lazy value according to the specified function, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazy's value.\r\n     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\r\n     */\r\n    Lazy.prototype.map = function (f) {\r\n        var _this = this;\r\n        return new Lazy(function () { return f(_this.f()); });\r\n    };\r\n    /**\r\n     * Lift a binary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n     */\r\n    Lazy.prototype.lift = function (b, f) {\r\n        var _this = this;\r\n        return new Lazy(function () { return f(_this.f(), b.f()); });\r\n    };\r\n    /**\r\n     * Lift a ternary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n     */\r\n    Lazy.prototype.lift3 = function (b, c, f) {\r\n        var _this = this;\r\n        return new Lazy(function () { return f(_this.f(), b.f(), c.f()); });\r\n    };\r\n    /**\r\n     * Lift a quaternary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n     */\r\n    Lazy.prototype.lift4 = function (b, c, d, f) {\r\n        var _this = this;\r\n        return new Lazy(function () { return f(_this.f(), b.f(), c.f(), d.f()); });\r\n    };\r\n    return Lazy;\r\n}());\n\nvar Unit = /** @class */ (function () {\r\n    function Unit() {\r\n    }\r\n    Unit.UNIT = new Unit();\r\n    return Unit;\r\n}());\n\nvar Operational = /** @class */ (function () {\r\n    function Operational() {\r\n    }\r\n    /**\r\n     * A stream that gives the updates/steps for a {@link Cell}.\r\n     * <P>\r\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n     * API. It breaks the property of non-detectability of cell steps/updates.\r\n     * The rule with this primitive is that you should only use it in functions\r\n     * that do not allow the caller to detect the cell updates.\r\n     */\r\n    Operational.updates = function (c) {\r\n        /*  Don't think this is needed\r\n        const out = new StreamWithSend<A>(null);\r\n        out.setVertex__(new Vertex(\"updates\", 0, [\r\n                new Source(\r\n                    c.getStream__().getVertex__(),\r\n                    () => {\r\n                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\r\n                            out.send_(a);\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(\r\n                    c.getVertex__(),\r\n                    () => {\r\n                        return () => { };\r\n                    }\r\n                )\r\n            ]\r\n        ));\r\n        return out;\r\n        */\r\n        return c.getStream__();\r\n    };\r\n    /**\r\n     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\r\n     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\r\n     * firing for each update/step of the cell's value.\r\n     * <P>\r\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n     * API. It breaks the property of non-detectability of cell steps/updates.\r\n     * The rule with this primitive is that you should only use it in functions\r\n     * that do not allow the caller to detect the cell updates.\r\n     */\r\n    Operational.value = function (c) {\r\n        return Transaction.run(function () {\r\n            var sSpark = new StreamWithSend();\r\n            Transaction.currentTransaction.prioritized(sSpark.getVertex__(), function () {\r\n                sSpark.send_(Unit.UNIT);\r\n            });\r\n            var sInitial = sSpark.snapshot1(c);\r\n            return Operational.updates(c).orElse(sInitial);\r\n        });\r\n    };\r\n    /**\r\n     * Push each event onto a new transaction guaranteed to come before the next externally\r\n     * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\r\n     */\r\n    Operational.defer = function (s) {\r\n        return Operational.split(s.map(function (a) {\r\n            return [a];\r\n        }));\r\n    };\r\n    /**\r\n     * Push each event in the list onto a newly created transaction guaranteed\r\n     * to come before the next externally initiated transaction. Note that the semantics\r\n     * are such that two different invocations of split() can put events into the same\r\n     * new transaction, so the resulting stream's events could be simultaneous with\r\n     * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\r\n     */\r\n    Operational.split = function (s) {\r\n        var out = new StreamWithSend(null);\r\n        out.setVertex__(new Vertex(\"split\", 0, [\r\n            new Source(s.getVertex__(), function () {\r\n                return s.listen_(out.getVertex__(), function (as) {\r\n                    var _loop_1 = function (i) {\r\n                        Transaction.currentTransaction.post(i, function () {\r\n                            Transaction.run(function () {\r\n                                out.send_(as[i]);\r\n                            });\r\n                        });\r\n                    };\r\n                    for (var i = 0; i < as.length; i++) {\r\n                        _loop_1(i);\r\n                    }\r\n                }, false);\r\n            })\r\n        ]));\r\n        return out;\r\n    };\r\n    return Operational;\r\n}());\n\nvar LazySample = /** @class */ (function () {\r\n    function LazySample(cell) {\r\n        this.hasValue = false;\r\n        this.value = null;\r\n        this.cell = cell;\r\n    }\r\n    return LazySample;\r\n}());\r\nvar ApplyState = /** @class */ (function () {\r\n    function ApplyState() {\r\n        this.f = null;\r\n        this.f_present = false;\r\n        this.a = null;\r\n        this.a_present = false;\r\n    }\r\n    return ApplyState;\r\n}());\r\nvar Cell = /** @class */ (function () {\r\n    function Cell(initValue, str) {\r\n        var _this = this;\r\n        this.value = initValue;\r\n        if (!str) {\r\n            this.str = new Stream();\r\n            this.vertex = new Vertex(\"ConstCell\", 0, []);\r\n        }\r\n        else\r\n            Transaction.run(function () { return _this.setStream(str); });\r\n    }\r\n    Cell.prototype.setStream = function (str) {\r\n        var _this = this;\r\n        this.str = str;\r\n        var me = this, src = new Source(str.getVertex__(), function () {\r\n            return str.listen_(me.vertex, function (a) {\r\n                if (me.valueUpdate == null) {\r\n                    Transaction.currentTransaction.last(function () {\r\n                        me.value = me.valueUpdate;\r\n                        me.lazyInitValue = null;\r\n                        me.valueUpdate = null;\r\n                    });\r\n                }\r\n                me.valueUpdate = a;\r\n            }, false);\r\n        });\r\n        this.vertex = new Vertex(\"Cell\", 0, [src]);\r\n        // We do a trick here of registering the source for the duration of the current\r\n        // transaction so that we are guaranteed to catch any stream events that\r\n        // occur in the same transaction.\r\n        this.vertex.register(Vertex.NULL);\r\n        Transaction.currentTransaction.last(function () {\r\n            _this.vertex.deregister(Vertex.NULL);\r\n        });\r\n    };\r\n    Cell.prototype.getVertex__ = function () {\r\n        return this.vertex;\r\n    };\r\n    Cell.prototype.getStream__ = function () {\r\n        return this.str;\r\n    };\r\n    /**\r\n     * Sample the cell's current value.\r\n     * <p>\r\n     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\r\n     * miss any updates, but in many circumstances it makes sense.\r\n     * <p>\r\n     * NOTE: In the Java and other versions of Sodium, using sample() inside map(), filter() and\r\n     * merge() is encouraged. In the Javascript/Typescript version, not so much, for the\r\n     * following reason: The memory management is different in the Javascript version, and this\r\n     * requires us to track all dependencies. In order for the use of sample() inside\r\n     * a closure to be correct, the cell that was sample()d inside the closure would have to be\r\n     * declared explicitly using the helpers lambda1(), lambda2(), etc. Because this is\r\n     * something that can be got wrong, we don't encourage this kind of use of sample() in\r\n     * Javascript. Better and simpler to use snapshot().\r\n     * <p>\r\n     * NOTE: If you need to sample() a cell, you have to make sure it's \"alive\" in terms of\r\n     * memory management or it will ignore updates. To make a cell work correctly\r\n     * with sample(), you have to ensure that it's being used. One way to guarantee this is\r\n     * to register a dummy listener on the cell. It will also work to have it referenced\r\n     * by something that is ultimately being listened to.\r\n     */\r\n    Cell.prototype.sample = function () {\r\n        var _this = this;\r\n        return Transaction.run(function () { return _this.sampleNoTrans__(); });\r\n    };\r\n    Cell.prototype.sampleNoTrans__ = function () {\r\n        return this.value;\r\n    };\r\n    /**\r\n     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\r\n     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\r\n     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\r\n     */\r\n    Cell.prototype.sampleLazy = function () {\r\n        var me = this;\r\n        return Transaction.run(function () { return me.sampleLazyNoTrans__(); });\r\n    };\r\n    Cell.prototype.sampleLazyNoTrans__ = function () {\r\n        var me = this, s = new LazySample(me);\r\n        Transaction.currentTransaction.sample(function () {\r\n            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\r\n            s.hasValue = true;\r\n            s.cell = null;\r\n        });\r\n        return new Lazy(function () {\r\n            if (s.hasValue)\r\n                return s.value;\r\n            else\r\n                return s.cell.sample();\r\n        });\r\n    };\r\n    /**\r\n     * Transform the cell's value according to the supplied function, so the returned Cell\r\n     * always reflects the value of the function applied to the input Cell's value.\r\n     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.map = function (f) {\r\n        var c = this;\r\n        return Transaction.run(function () {\r\n            return Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda1_toFunction(f)));\r\n        });\r\n    };\r\n    /**\r\n     * Lift a binary function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift = function (b, fn0) {\r\n        var fn = Lambda2_toFunction(fn0), cf = this.map(function (aa) { return function (bb) { return fn(aa, bb); }; });\r\n        return Cell.apply(cf, b, toSources(Lambda2_deps(fn0)));\r\n    };\r\n    /**\r\n     * Lift a ternary function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift3 = function (b, c, fn0) {\r\n        var fn = Lambda3_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return fn(aa, bb, cc); }; }; }, cf = this.map(mf);\r\n        return Cell.apply(Cell.apply(cf, b), c, toSources(Lambda3_deps(fn0)));\r\n    };\r\n    /**\r\n     * Lift a quaternary function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift4 = function (b, c, d, fn0) {\r\n        var fn = Lambda4_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return fn(aa, bb, cc, dd); }; }; }; }, cf = this.map(mf);\r\n        return Cell.apply(Cell.apply(Cell.apply(cf, b), c), d, toSources(Lambda4_deps(fn0)));\r\n    };\r\n    /**\r\n     * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift5 = function (b, c, d, e, fn0) {\r\n        var fn = Lambda5_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return function (ee) { return fn(aa, bb, cc, dd, ee); }; }; }; }; }, cf = this.map(mf);\r\n        return Cell.apply(Cell.apply(Cell.apply(Cell.apply(cf, b), c), d), e, toSources(Lambda5_deps(fn0)));\r\n    };\r\n    /**\r\n     * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift6 = function (b, c, d, e, f, fn0) {\r\n        var fn = Lambda6_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return function (ee) { return function (ff) { return fn(aa, bb, cc, dd, ee, ff); }; }; }; }; }; }, cf = this.map(mf);\r\n        return Cell.apply(Cell.apply(Cell.apply(Cell.apply(Cell.apply(cf, b), c), d), e), f, toSources(Lambda6_deps(fn0)));\r\n    };\r\n    /**\r\n     * Apply a value inside a cell to a function inside a cell. This is the\r\n     * primitive for all function lifting.\r\n     */\r\n    Cell.apply = function (cf, ca, sources) {\r\n        return Transaction.run(function () {\r\n            var state = new ApplyState(), out = new StreamWithSend(), cf_value = Operational.value(cf), ca_value = Operational.value(ca), src1 = new Source(cf_value.getVertex__(), function () {\r\n                return cf_value.listen_(out.getVertex__(), function (f) {\r\n                    state.f = f;\r\n                    state.f_present = true;\r\n                    if (state.a_present)\r\n                        out.send_(state.f(state.a));\r\n                }, false);\r\n            }), src2 = new Source(ca_value.getVertex__(), function () {\r\n                return ca_value.listen_(out.getVertex__(), function (a) {\r\n                    state.a = a;\r\n                    state.a_present = true;\r\n                    if (state.f_present)\r\n                        out.send_(state.f(state.a));\r\n                }, false);\r\n            });\r\n            out.setVertex__(new Vertex(\"apply\", 0, [src1, src2].concat(sources ? sources : [])));\r\n            return out.coalesce__(function (l, r) { return r; }).holdLazy(new Lazy(function () {\r\n                return cf.sampleNoTrans__()(ca.sampleNoTrans__());\r\n            }));\r\n        });\r\n    };\r\n    /**\r\n     * Unwrap a cell inside another cell to give a time-varying cell implementation.\r\n     */\r\n    Cell.switchC = function (cca) {\r\n        return Transaction.run(function () {\r\n            var za = cca.sampleLazy().map(function (ba) { return ba.sample(); }), out = new StreamWithSend();\r\n            var last_ca = null;\r\n            var cca_value = Operational.value(cca), src = new Source(cca_value.getVertex__(), function () {\r\n                var kill2 = last_ca === null ? null :\r\n                    Operational.value(last_ca).listen_(out.getVertex__(), function (a) { return out.send_(a); }, false);\r\n                var kill1 = cca_value.listen_(out.getVertex__(), function (ca) {\r\n                    // Note: If any switch takes place during a transaction, then the\r\n                    // coalesce__() below will always cause a sample to be fetched\r\n                    // from the one we just switched to. So anything from the old input cell\r\n                    // that might have happened during this transaction will be suppressed.\r\n                    last_ca = ca;\r\n                    if (kill2 !== null)\r\n                        kill2();\r\n                    kill2 = Operational.value(ca).listen_(out.getVertex__(), function (a) { return out.send_(a); }, false);\r\n                }, false);\r\n                return function () { kill1(); kill2(); };\r\n            });\r\n            out.setVertex__(new Vertex(\"switchC\", 0, [src]));\r\n            return out.coalesce__(function (l, r) { return r; }).holdLazy(za);\r\n        });\r\n    };\r\n    /**\r\n     * Unwrap a stream inside a cell to give a time-varying stream implementation.\r\n     */\r\n    Cell.switchS = function (csa) {\r\n        return Transaction.run(function () {\r\n            var out = new StreamWithSend(), h2 = function (a) {\r\n                out.send_(a);\r\n            }, src = new Source(csa.getVertex__(), function () {\r\n                var kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\r\n                var kill1 = csa.getStream__().listen_(out.getVertex__(), function (sa) {\r\n                    kill2();\r\n                    kill2 = sa.listen_(out.getVertex__(), h2, true);\r\n                }, false);\r\n                return function () { kill1(); kill2(); };\r\n            });\r\n            out.setVertex__(new Vertex(\"switchS\", 0, [src]));\r\n            return out;\r\n        });\r\n    };\r\n    /**\r\n     * Listen for updates to the value of this cell. This is the observer pattern. The\r\n     * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\r\n     * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\r\n     * the world of I/O and for FRP.\r\n     * @param h The handler to execute when there's a new value.\r\n     *   You should make no assumptions about what thread you are called on, and the\r\n     *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\r\n     *   or {@link StreamSink#send(Object)} in the handler.\r\n     *   An exception will be thrown, because you are not meant to use this to create\r\n     *   your own primitives.\r\n     */\r\n    Cell.prototype.listen = function (h) {\r\n        var _this = this;\r\n        return Transaction.run(function () {\r\n            return Operational.value(_this).listen(h);\r\n        });\r\n    };\r\n    /**\r\n     * Fantasy-land Algebraic Data Type Compatability.\r\n     * Cell satisfies the Monad and Comonad Categories (and hence Functor, Apply, Applicative, and Extend as well)\r\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\r\n     */\r\n    //of :: Applicative f => a -> f a\r\n    Cell['fantasy-land/of'] = function (a) {\r\n        return new Cell(a);\r\n    };\r\n    //map :: Functor f => f a ~> (a -> b) -> f b\r\n    Cell.prototype['fantasy-land/map'] = function (f) {\r\n        return this.map(f);\r\n    };\r\n    //ap :: Apply f => f a ~> f (a -> b) -> f b\r\n    Cell.prototype['fantasy-land/ap'] = function (cf) {\r\n        return Cell.apply(cf, this);\r\n    };\r\n    //chain :: Chain m => m a ~> (a -> m b) -> m b\r\n    Cell.prototype['fantasy-land/chain'] = function (f) {\r\n        return Cell.switchC(this.map(f));\r\n    };\r\n    //extend :: Extend w => w a ~> (w a -> b) -> w b\r\n    Cell.prototype['fantasy-land/extend'] = function (f) {\r\n        return new Cell(f(this));\r\n    };\r\n    //extract :: Comonad w => w a ~> () -> a\r\n    Cell.prototype['fantasy-land/extract'] = function () {\r\n        return this.sample();\r\n    };\r\n    return Cell;\r\n}());\n\nvar Listener = /** @class */ (function () {\r\n    function Listener(h, target) {\r\n        this.h = h;\r\n        this.target = target;\r\n    }\r\n    return Listener;\r\n}());\n\nvar LazyCell = /** @class */ (function (_super) {\r\n    __extends(LazyCell, _super);\r\n    function LazyCell(lazyInitValue, str) {\r\n        var _this = _super.call(this, null, null) || this;\r\n        Transaction.run(function () {\r\n            if (str)\r\n                _this.setStream(str);\r\n            _this.lazyInitValue = lazyInitValue;\r\n        });\r\n        return _this;\r\n    }\r\n    LazyCell.prototype.sampleNoTrans__ = function () {\r\n        if (this.value == null && this.lazyInitValue != null) {\r\n            this.value = this.lazyInitValue.get();\r\n            this.lazyInitValue = null;\r\n        }\r\n        return this.value;\r\n    };\r\n    return LazyCell;\r\n}(Cell));\n\n//import { StreamLoop } from \"./StreamLoop\";\r\nvar Stream = /** @class */ (function () {\r\n    function Stream(vertex) {\r\n        this.listeners = [];\r\n        this.firings = [];\r\n        this.vertex = vertex ? vertex : new Vertex(\"Stream\", 0, []);\r\n    }\r\n    Stream.prototype.getVertex__ = function () {\r\n        return this.vertex;\r\n    };\r\n    /**\r\n     * Transform the stream's event values according to the supplied function, so the returned\r\n     * Stream's event values reflect the value of the function applied to the input\r\n     * Stream's event values.\r\n     * @param f Function to apply to convert the values. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    Stream.prototype.map = function (f) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda1_toFunction(f);\r\n        out.vertex = new Vertex(\"map\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a));\r\n                }, false);\r\n            })\r\n        ].concat(toSources(Lambda1_deps(f))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Transform the stream's event values into the specified constant value.\r\n     * @param b Constant value.\r\n     */\r\n    Stream.prototype.mapTo = function (b) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        out.vertex = new Vertex(\"mapTo\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(b);\r\n                }, false);\r\n            })\r\n        ]);\r\n        return out;\r\n    };\r\n    /**\r\n     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\r\n     * in the simultaneous case.\r\n     * <p>\r\n     * In the case where two events are simultaneous (i.e. both\r\n     * within the same transaction), the event from <em>this</em> will take precedence, and\r\n     * the event from <em>s</em> will be dropped.\r\n     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\r\n     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\r\n     * <p>\r\n     * The name orElse() is used instead of merge() to make it really clear that care should\r\n     * be taken, because events can be dropped.\r\n     */\r\n    Stream.prototype.orElse = function (s) {\r\n        return this.merge(s, function (left, right) {\r\n            return left;\r\n        });\r\n    };\r\n    Stream.prototype.merge_ = function (s) {\r\n        var _this = this;\r\n        var out = new StreamWithSend();\r\n        var left = new Vertex(\"merge\", 0, []);\r\n        left.sources.push(new Source(this.vertex, function () {\r\n            return _this.listen_(left, function (a) {\r\n                out.send_(a);\r\n            }, false);\r\n        }));\r\n        out.vertex.sources = out.vertex.sources.concat([\r\n            new Source(left, function () {\r\n                left.register(out.vertex);\r\n                return function () { left.deregister(out.vertex); };\r\n            }),\r\n            new Source(s.vertex, function () {\r\n                return s.listen_(out.vertex, function (a) {\r\n                    out.send_(a);\r\n                }, false);\r\n            })\r\n        ]);\r\n        return out;\r\n    };\r\n    Stream.prototype.coalesce__ = function (f) {\r\n        var _this = this;\r\n        var out = new StreamWithSend();\r\n        var coalescer = new CoalesceHandler(f, out);\r\n        out.vertex.sources = out.vertex.sources.concat([\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    coalescer.send_(a);\r\n                }, false);\r\n            })\r\n        ]).concat(toSources(Lambda2_deps(f)));\r\n        return out;\r\n    };\r\n    /**\r\n     * Merge two streams of the same type into one, so that events on either input appear\r\n     * on the returned stream.\r\n     * <p>\r\n     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\r\n     * occurring in the same transaction), combine them into one using the specified combining function\r\n     * so that the returned stream is guaranteed only ever to have one event per transaction.\r\n     * The event from <em>this</em> will appear at the left input of the combining function, and\r\n     * the event from <em>s</em> will appear at the right.\r\n     * @param f Function to combine the values. It may construct FRP logic or use\r\n     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    Stream.prototype.merge = function (s, f) {\r\n        var _this = this;\r\n        return Transaction.run(function () {\r\n            return _this.merge_(s).coalesce__(f);\r\n        });\r\n    };\r\n    /**\r\n     * Return a stream that only outputs events for which the predicate returns true.\r\n     */\r\n    Stream.prototype.filter = function (f) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda1_toFunction(f);\r\n        out.vertex = new Vertex(\"filter\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    if (ff(a))\r\n                        out.send_(a);\r\n                }, false);\r\n            })\r\n        ].concat(toSources(Lambda1_deps(f))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream that only outputs events that have present\r\n     * values, discarding null values.\r\n     */\r\n    Stream.prototype.filterNotNull = function () {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        out.vertex = new Vertex(\"filterNotNull\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    if (a !== null)\r\n                        out.send_(a);\r\n                }, false);\r\n            })\r\n        ]);\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream that only outputs events from the input stream\r\n     * when the specified cell's value is true.\r\n     */\r\n    Stream.prototype.gate = function (c) {\r\n        return this.snapshot(c, function (a, pred) {\r\n            return pred ? a : null;\r\n        }).filterNotNull();\r\n    };\r\n    /**\r\n     * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\r\n     * at the time of the event firing, ignoring the stream's value.\r\n     */\r\n    Stream.prototype.snapshot1 = function (c) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        out.vertex = new Vertex(\"snapshot1\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(c.sampleNoTrans__());\r\n                }, false);\r\n            }),\r\n            new Source(c.getVertex__(), null)\r\n        ]);\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cell at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot = function (b, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda2_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null)\r\n        ].concat(toSources(Lambda2_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot3 = function (b, c, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda3_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null),\r\n            new Source(c.getVertex__(), null)\r\n        ].concat(toSources(Lambda3_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot4 = function (b, c, d, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda4_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(), d.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null),\r\n            new Source(c.getVertex__(), null),\r\n            new Source(d.getVertex__(), null)\r\n        ].concat(toSources(Lambda4_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot5 = function (b, c, d, e, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda5_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(), d.sampleNoTrans__(), e.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null),\r\n            new Source(c.getVertex__(), null),\r\n            new Source(d.getVertex__(), null),\r\n            new Source(e.getVertex__(), null)\r\n        ].concat(toSources(Lambda5_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot6 = function (b, c, d, e, f, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda6_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(), d.sampleNoTrans__(), e.sampleNoTrans__(), f.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null),\r\n            new Source(c.getVertex__(), null),\r\n            new Source(d.getVertex__(), null),\r\n            new Source(e.getVertex__(), null),\r\n            new Source(f.getVertex__(), null)\r\n        ].concat(toSources(Lambda6_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Create a {@link Cell} with the specified initial value, that is updated\r\n     * by this stream's event values.\r\n     * <p>\r\n     * There is an implicit delay: State updates caused by event firings don't become\r\n     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\r\n     * until the following transaction. To put this another way,\r\n     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\r\n     * any state changes from the current transaction.\r\n     */\r\n    Stream.prototype.hold = function (initValue) {\r\n        return new Cell(initValue, this);\r\n    };\r\n    /**\r\n     * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\r\n     */\r\n    Stream.prototype.holdLazy = function (initValue) {\r\n        return new LazyCell(initValue, this);\r\n    };\r\n    /**\r\n     * Transform an event with a generalized state loop (a Mealy machine). The function\r\n     * is passed the input and the old state and returns the new state and output value.\r\n     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    Stream.prototype.collect = function (initState, f) {\r\n        return this.collectLazy(new Lazy(function () { return initState; }), f);\r\n    };\r\n    /**\r\n     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\r\n     * {@link Cell#sampleLazy()}.\r\n     */\r\n    Stream.prototype.collectLazy = function (initState, f) {\r\n        var ea = this;\r\n        return Transaction.run(function () {\r\n            var es = new StreamLoop(), s = es.holdLazy(initState), ebs = ea.snapshot(s, f), eb = ebs.map(function (bs) { return bs.a; }), es_out = ebs.map(function (bs) { return bs.b; });\r\n            es.loop(es_out);\r\n            return eb;\r\n        });\r\n    };\r\n    /**\r\n     * Accumulate on input event, outputting the new state each time.\r\n     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    Stream.prototype.accum = function (initState, f) {\r\n        return this.accumLazy(new Lazy(function () { return initState; }), f);\r\n    };\r\n    /**\r\n     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\r\n     * {@link Cell#sampleLazy()}.\r\n     */\r\n    Stream.prototype.accumLazy = function (initState, f) {\r\n        var ea = this;\r\n        return Transaction.run(function () {\r\n            var es = new StreamLoop(), s = es.holdLazy(initState), es_out = ea.snapshot(s, f);\r\n            es.loop(es_out);\r\n            return es_out.holdLazy(initState);\r\n        });\r\n    };\r\n    /**\r\n     * Return a stream that outputs only one value: the next event of the\r\n     * input stream, starting from the transaction in which once() was invoked.\r\n     */\r\n    Stream.prototype.once = function () {\r\n        /*\r\n            return Transaction.run(() => {\r\n                const ev = this,\r\n                    out = new StreamWithSend<A>();\r\n                let la : () => void = null;\r\n                la = ev.listen_(out.vertex, (a : A) => {\r\n                    if (la !== null) {\r\n                        out.send_(a);\r\n                        la();\r\n                        la = null;\r\n                    }\r\n                }, false);\r\n                return out;\r\n            });\r\n            */\r\n        // We can't use the implementation above, beacuse deregistering\r\n        // listeners triggers the exception\r\n        // \"send() was invoked before listeners were registered\"\r\n        // We can revisit this another time. For now we will use the less\r\n        // efficient implementation below.\r\n        var me = this;\r\n        return Transaction.run(function () { return me.gate(me.mapTo(false).hold(true)); });\r\n    };\r\n    Stream.prototype.listen = function (h) {\r\n        var _this = this;\r\n        return Transaction.run(function () {\r\n            return _this.listen_(Vertex.NULL, h, false);\r\n        });\r\n    };\r\n    Stream.prototype.listen_ = function (target, h, suppressEarlierFirings) {\r\n        var _this = this;\r\n        if (this.vertex.register(target))\r\n            Transaction.currentTransaction.requestRegen();\r\n        var listener = new Listener(h, target);\r\n        this.listeners.push(listener);\r\n        if (!suppressEarlierFirings && this.firings.length != 0) {\r\n            var firings_1 = this.firings.slice();\r\n            Transaction.currentTransaction.prioritized(target, function () {\r\n                // Anything sent already in this transaction must be sent now so that\r\n                // there's no order dependency between send and listen.\r\n                for (var i = 0; i < firings_1.length; i++)\r\n                    h(firings_1[i]);\r\n            });\r\n        }\r\n        return function () {\r\n            var removed = false;\r\n            for (var i = 0; i < _this.listeners.length; i++) {\r\n                if (_this.listeners[i] == listener) {\r\n                    _this.listeners.splice(i, 1);\r\n                    removed = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (removed)\r\n                _this.vertex.deregister(target);\r\n        };\r\n    };\r\n    /**\r\n     * Fantasy-land Algebraic Data Type Compatability.\r\n     * Stream satisfies the Functor and Monoid Categories (and hence Semigroup)\r\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\r\n     */\r\n    //map :: Functor f => f a ~> (a -> b) -> f b\r\n    Stream.prototype['fantasy-land/map'] = function (f) {\r\n        return this.map(f);\r\n    };\r\n    //concat :: Semigroup a => a ~> a -> a\r\n    Stream.prototype['fantasy-land/concat'] = function (a) {\r\n        return this.merge(a, function (left, right) {\r\n            return (Semigroup.test(left)) ? concat(left, right) : left;\r\n        });\r\n    };\r\n    //empty :: Monoid m => () -> m\r\n    Stream.prototype['fantasy-land/empty'] = function () {\r\n        return new Stream();\r\n    };\r\n    return Stream;\r\n}());\r\nvar StreamWithSend = /** @class */ (function (_super) {\r\n    __extends(StreamWithSend, _super);\r\n    function StreamWithSend(vertex) {\r\n        return _super.call(this, vertex) || this;\r\n    }\r\n    StreamWithSend.prototype.setVertex__ = function (vertex) {\r\n        this.vertex = vertex;\r\n    };\r\n    StreamWithSend.prototype.send_ = function (a) {\r\n        var _this = this;\r\n        // We throw this error if we send into FRP logic that has been constructed\r\n        // but nothing is listening to it yet. We need to do it this way because\r\n        // it's the only way to manage memory in a language with no finalizers.\r\n        if (this.vertex.refCount() == 0)\r\n            throw new Error(\"send() was invoked before listeners were registered\");\r\n        if (this.firings.length == 0)\r\n            Transaction.currentTransaction.last(function () {\r\n                _this.firings = [];\r\n            });\r\n        this.firings.push(a);\r\n        var listeners = this.listeners.slice();\r\n        var _loop_1 = function (i) {\r\n            var h = listeners[i].h;\r\n            Transaction.currentTransaction.prioritized(listeners[i].target, function () {\r\n                Transaction.currentTransaction.inCallback++;\r\n                try {\r\n                    h(a);\r\n                    Transaction.currentTransaction.inCallback--;\r\n                }\r\n                catch (err) {\r\n                    Transaction.currentTransaction.inCallback--;\r\n                    throw err;\r\n                }\r\n            });\r\n        };\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    return StreamWithSend;\r\n}(Stream));\r\n/**\r\n * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\r\n */\r\nvar StreamLoop = /** @class */ (function (_super) {\r\n    __extends(StreamLoop, _super);\r\n    function StreamLoop() {\r\n        var _this = _super.call(this) || this;\r\n        _this.assigned__ = false; // to do: Figure out how to hide this\r\n        _this.vertex.name = \"StreamLoop\";\r\n        if (Transaction.currentTransaction === null)\r\n            throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\r\n     * must be invoked inside the same transaction as the place where the StreamLoop is used.\r\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n     * or {@link Transaction#runVoid(Runnable)}.\r\n     */\r\n    StreamLoop.prototype.loop = function (sa_out) {\r\n        var _this = this;\r\n        if (this.assigned__)\r\n            throw new Error(\"StreamLoop looped more than once\");\r\n        this.assigned__ = true;\r\n        this.vertex.addSource(new Source(sa_out.getVertex__(), function () {\r\n            return sa_out.listen_(_this.vertex, function (a) {\r\n                _this.send_(a);\r\n            }, false);\r\n        }));\r\n    };\r\n    return StreamLoop;\r\n}(StreamWithSend));\n\n/**\r\n * A stream that allows values to be pushed into it, acting as an interface between the\r\n * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\r\n * should downcast to {@link Stream}.\r\n */\r\nvar StreamSink = /** @class */ (function (_super) {\r\n    __extends(StreamSink, _super);\r\n    function StreamSink(f) {\r\n        var _this = _super.call(this) || this;\r\n        if (!f)\r\n            f = (function (l, r) {\r\n                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\r\n            });\r\n        _this.coalescer = new CoalesceHandler(f, _this);\r\n        return _this;\r\n    }\r\n    StreamSink.prototype.send = function (a) {\r\n        var _this = this;\r\n        Transaction.run(function () {\r\n            if (Transaction.currentTransaction.inCallback > 0)\r\n                throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\r\n            _this.coalescer.send_(a);\r\n        });\r\n    };\r\n    return StreamSink;\r\n}(StreamWithSend));\n\n/**\r\n * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\r\n */\r\nvar CellLoop = /** @class */ (function (_super) {\r\n    __extends(CellLoop, _super);\r\n    function CellLoop() {\r\n        return _super.call(this, null, new StreamLoop()) || this;\r\n    }\r\n    /**\r\n     * Resolve the loop to specify what the CellLoop was a forward reference to. It\r\n     * must be invoked inside the same transaction as the place where the CellLoop is used.\r\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n     * or {@link Transaction#runVoid(Runnable)}.\r\n     */\r\n    CellLoop.prototype.loop = function (a_out) {\r\n        var me = this;\r\n        Transaction.run(function () {\r\n            me.getStream__().loop(a_out.getStream__());\r\n            me.lazyInitValue = a_out.sampleLazy();\r\n        });\r\n    };\r\n    CellLoop.prototype.sampleNoTrans__ = function () {\r\n        if (!this.getStream__().assigned__)\r\n            throw new Error(\"CellLoop sampled before it was looped\");\r\n        return _super.prototype.sampleNoTrans__.call(this);\r\n    };\r\n    return CellLoop;\r\n}(LazyCell));\n\n/**\r\n * A cell that allows values to be pushed into it, acting as an interface between the\r\n * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\r\n * should downcast to {@link Cell}.\r\n */\r\nvar CellSink = /** @class */ (function (_super) {\r\n    __extends(CellSink, _super);\r\n    /**\r\n     * Construct a writable cell with the specified initial value. If multiple values are\r\n     * sent in the same transaction, the specified function is used to combine them.\r\n     *\r\n     * If the function is not supplied, then an exception will be thrown in this case.\r\n     */\r\n    function CellSink(initValue, f) {\r\n        return _super.call(this, initValue, new StreamSink(f)) || this;\r\n    }\r\n    /**\r\n     * Send a value, modifying the value of the cell. send(A) may not be used inside\r\n     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\r\n     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\r\n     * You are not meant to use this to define your own primitives.\r\n     * @param a Value to push into the cell.\r\n     */\r\n    CellSink.prototype.send = function (a) {\r\n        this.getStream__().send(a);\r\n    };\r\n    return CellSink;\r\n}(Cell));\n\nvar Tuple2 = /** @class */ (function () {\r\n    function Tuple2(a, b) {\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n    return Tuple2;\r\n}());\n\n/**\r\n * An interface for implementations of FRP timer systems.\r\n */\r\nvar TimerSystemImpl = /** @class */ (function () {\r\n    function TimerSystemImpl() {\r\n    }\r\n    return TimerSystemImpl;\r\n}());\r\nvar nextSeq = 0;\r\nvar Event = /** @class */ (function () {\r\n    function Event(t, sAlarm) {\r\n        this.t = t;\r\n        this.sAlarm = sAlarm;\r\n        this.seq = ++nextSeq;\r\n    }\r\n    return Event;\r\n}());\r\nvar TimerSystem = /** @class */ (function () {\r\n    function TimerSystem(impl) {\r\n        var _this = this;\r\n        this.eventQueue = new BSTree(function (a, b) {\r\n            if (a.t < b.t)\r\n                return -1;\r\n            if (a.t > b.t)\r\n                return 1;\r\n            if (a.seq < b.seq)\r\n                return -1;\r\n            if (a.seq > b.seq)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        Transaction.run(function () {\r\n            _this.impl = impl;\r\n            _this.tMinimum = 0;\r\n            var timeSnk = new CellSink(impl.now());\r\n            _this.time = timeSnk;\r\n            // A dummy listener to time to keep it alive even when there are no other listeners.\r\n            _this.time.listen(function (t) { });\r\n            Transaction.onStart(function () {\r\n                // Ensure the time is always increasing from the FRP's point of view.\r\n                var t = _this.tMinimum = Math.max(_this.tMinimum, impl.now());\r\n                var _loop_1 = function () {\r\n                    var ev = null;\r\n                    if (!_this.eventQueue.isEmpty()) {\r\n                        var mev = _this.eventQueue.minimum();\r\n                        if (mev.t <= t) {\r\n                            ev = mev;\r\n                            // TO DO: Detect infinite loops!\r\n                        }\r\n                    }\r\n                    if (ev != null) {\r\n                        timeSnk.send(ev.t);\r\n                        Transaction.run(function () { return ev.sAlarm.send_(ev.t); });\r\n                    }\r\n                    else\r\n                        return \"break\";\r\n                };\r\n                // Pop and execute all events earlier than or equal to t (the current time).\r\n                while (true) {\r\n                    var state_1 = _loop_1();\r\n                    if (state_1 === \"break\")\r\n                        break;\r\n                }\r\n                timeSnk.send(t);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * A timer that fires at the specified time, which can be null, meaning\r\n     * that the alarm is not set.\r\n     */\r\n    TimerSystem.prototype.at = function (tAlarm) {\r\n        var _this = this;\r\n        var current = null, cancelCurrent = null, active = false, tAl = null, sampled = false;\r\n        var sAlarm = new StreamWithSend(null), updateTimer = function () {\r\n            if (cancelCurrent !== null) {\r\n                cancelCurrent();\r\n                _this.eventQueue.remove(current);\r\n            }\r\n            cancelCurrent = null;\r\n            current = null;\r\n            if (active) {\r\n                if (!sampled) {\r\n                    sampled = true;\r\n                    tAl = tAlarm.sampleNoTrans__();\r\n                }\r\n                if (tAl !== null) {\r\n                    current = new Event(tAl, sAlarm);\r\n                    _this.eventQueue.add(current);\r\n                    cancelCurrent = _this.impl.setTimer(tAl, function () {\r\n                        // Correction to ensure the clock time appears to be >= the\r\n                        // alarm time. It can be a few milliseconds early, and\r\n                        // this breaks things otherwise, because it doesn't think\r\n                        // it's time to fire the alarm yet.\r\n                        _this.tMinimum = Math.max(_this.tMinimum, tAl);\r\n                        // Open and close a transaction to trigger queued\r\n                        // events to run.\r\n                        Transaction.run(function () { });\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        sAlarm.setVertex__(new Vertex(\"at\", 0, [\r\n            new Source(tAlarm.getVertex__(), function () {\r\n                active = true;\r\n                sampled = false;\r\n                Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\r\n                var kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), function (oAlarm) {\r\n                    tAl = oAlarm;\r\n                    sampled = true;\r\n                    updateTimer();\r\n                }, false);\r\n                return function () {\r\n                    active = false;\r\n                    updateTimer();\r\n                    kill();\r\n                };\r\n            })\r\n        ]));\r\n        return sAlarm;\r\n    };\r\n    return TimerSystem;\r\n}());\n\n/**\r\n * A timer system implementation using seconds as the time unit.\r\n */\r\nvar SecondsTimerSystem = /** @class */ (function (_super) {\r\n    __extends(SecondsTimerSystem, _super);\r\n    function SecondsTimerSystem() {\r\n        return _super.call(this, new SecondsTimerSystemImpl()) || this;\r\n    }\r\n    return SecondsTimerSystem;\r\n}(TimerSystem));\r\nvar SecondsTimerSystemImpl = /** @class */ (function (_super) {\r\n    __extends(SecondsTimerSystemImpl, _super);\r\n    function SecondsTimerSystemImpl() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    SecondsTimerSystemImpl.prototype.setTimer = function (t, callback) {\r\n        var timeout = setTimeout(callback, Math.max((t - this.now()) * 1000, 0));\r\n        return function () { clearTimeout(timeout); };\r\n    };\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    SecondsTimerSystemImpl.prototype.now = function () {\r\n        return Date.now() * 0.001;\r\n    };\r\n    return SecondsTimerSystemImpl;\r\n}(TimerSystemImpl));\n\n/**\r\n * A timer system implementation using milliseconds as the time unit.\r\n */\r\nvar MillisecondsTimerSystem = /** @class */ (function (_super) {\r\n    __extends(MillisecondsTimerSystem, _super);\r\n    function MillisecondsTimerSystem() {\r\n        return _super.call(this, new MillisecondsTimerSystemImpl()) || this;\r\n    }\r\n    return MillisecondsTimerSystem;\r\n}(TimerSystem));\r\nvar MillisecondsTimerSystemImpl = /** @class */ (function (_super) {\r\n    __extends(MillisecondsTimerSystemImpl, _super);\r\n    function MillisecondsTimerSystemImpl() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    MillisecondsTimerSystemImpl.prototype.setTimer = function (t, callback) {\r\n        var timeout = setTimeout(callback, Math.max(t - this.now(), 0));\r\n        return function () { clearTimeout(timeout); };\r\n    };\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    MillisecondsTimerSystemImpl.prototype.now = function () {\r\n        return Date.now();\r\n    };\r\n    return MillisecondsTimerSystemImpl;\r\n}(TimerSystemImpl));\n\nvar IOAction = /** @class */ (function () {\r\n    function IOAction() {\r\n    }\r\n    /*!\r\n     * Convert a function that performs asynchronous I/O taking input A\r\n     * and returning a value of type B into an I/O action of type\r\n     * (sa : Stream<A>) => Stream<B>\r\n     */\r\n    IOAction.fromAsync = function (performIO) {\r\n        return function (sa) {\r\n            var out = new StreamWithSend(null);\r\n            out.setVertex__(new Vertex(\"map\", 0, [\r\n                new Source(sa.getVertex__(), function () {\r\n                    return sa.listen_(out.getVertex__(), function (a) {\r\n                        performIO(a, function (b) {\r\n                            Transaction.run(function () {\r\n                                out.send_(b);\r\n                            });\r\n                        });\r\n                    }, false);\r\n                })\r\n            ]));\r\n            return out;\r\n        };\r\n    };\r\n    return IOAction;\r\n}());\n\nexport { lambda1, lambda2, lambda3, lambda4, lambda5, lambda6, Stream, StreamLoop, StreamSink, Cell, CellLoop, CellSink, Transaction, Tuple2, Unit, Operational, getTotalRegistrations, Vertex, TimerSystemImpl, TimerSystem, SecondsTimerSystem, MillisecondsTimerSystem, IOAction };\n//# sourceMappingURL=sodium.esm.js.map\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","/*\n         _______    ___    _________    ___   ___    _______    ______\n        /  ____/\\  /  /\\  /__   ___/\\  /  /\\ /  /\\  /  ____/\\  /  __  \\\n       /  /\\___\\/ /  / /  \\_/  /\\__\\/ /  /_//  / / /  /\\___\\/ /  /\\/  /\\\n      /  ____/\\  /  / /    /  / /    /  ___   / / /  ____/\\  /      _/ /\n     /  /\\___\\/ /  / /    /  / /    /  /\\_/  / / /  /\\___\\/ /  /|  |\\\\/\n    /______/\\  /__/ /    /__/ /    /__/ //__/ / /______/\\  /__/ |__| |\n    \\______\\/  \\__\\/     \\__\\/     \\__\\/ \\__\\/  \\______\\/  \\__\\/ \\__\\|\n                                                                            */\n\n//. <a href=\"https://github.com/fantasyland/fantasy-land\"><img alt=\"Fantasy Land\" src=\"https://raw.githubusercontent.com/fantasyland/fantasy-land/master/logo.png\" width=\"75\" height=\"75\" align=\"left\"></a>\n//.\n//. # sanctuary-either\n//.\n//. The Either type represents values with two possibilities: a value of type\n//. `Either a b` is either a Left whose value is of type `a` or a Right whose\n//. value is of type `b`.\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-show', 'sanctuary-type-classes'], f);\n  } else {\n    self.sanctuaryEither = f (self.sanctuaryShow, self.sanctuaryTypeClasses);\n  }\n\n} (function(show, Z) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    var $ = __doctest.require ('sanctuary-def');\n    var type = __doctest.require ('sanctuary-type-identifiers');\n    var S = (function() {\n      var S = __doctest.require ('sanctuary');\n      var EitherType = $.BinaryType\n        ('sanctuary-either/Either')\n        ('')\n        (function(x) { return type (x) === Either['@@type']; })\n        (function(e) { return e.isLeft ? [e.value] : []; })\n        (function(e) { return e.isLeft ? [] : [e.value]; });\n      var env = Z.concat (S.env,\n                          [$.TypeClass, EitherType ($.Unknown) ($.Unknown)]);\n      return S.create ({checkTypes: true, env: env});\n    } ());\n  }\n\n  var Either = {};\n\n  var Left$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Either,\n    'isLeft':                 true,\n    'isRight':                false,\n    '@@show':                 Left$prototype$show,\n    'fantasy-land/map':       Left$prototype$map,\n    'fantasy-land/bimap':     Left$prototype$bimap,\n    'fantasy-land/ap':        Left$prototype$ap,\n    'fantasy-land/chain':     Left$prototype$chain,\n    'fantasy-land/alt':       Left$prototype$alt,\n    'fantasy-land/reduce':    Left$prototype$reduce,\n    'fantasy-land/traverse':  Left$prototype$traverse,\n    'fantasy-land/extend':    Left$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var Right$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Either,\n    'isLeft':                 false,\n    'isRight':                true,\n    '@@show':                 Right$prototype$show,\n    'fantasy-land/map':       Right$prototype$map,\n    'fantasy-land/bimap':     Right$prototype$bimap,\n    'fantasy-land/ap':        Right$prototype$ap,\n    'fantasy-land/chain':     Right$prototype$chain,\n    'fantasy-land/alt':       Right$prototype$alt,\n    'fantasy-land/reduce':    Right$prototype$reduce,\n    'fantasy-land/traverse':  Right$prototype$traverse,\n    'fantasy-land/extend':    Right$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var util =\n    typeof module === 'object' && typeof module.exports === 'object' ?\n    require ('util') :\n    /* istanbul ignore next */ {};\n  var inspect =\n    util.inspect != null && typeof util.inspect.custom === 'symbol' ?\n    /* istanbul ignore next */ util.inspect.custom :\n    /* istanbul ignore next */ 'inspect';\n  Left$prototype[inspect] = Left$prototype$show;\n  Right$prototype[inspect] = Right$prototype$show;\n\n  //. `Either a b` satisfies the following [Fantasy Land][] specifications:\n  //.\n  //. ```javascript\n  //. > const Useless = require ('sanctuary-useless')\n  //.\n  //. > S.map (k => k + ' '.repeat (16 - k.length) +\n  //. .             (Z[k].test (Right (Useless)) ? '\\u2705   ' :\n  //. .              Z[k].test (Right (['foo'])) ? '\\u2705 * ' :\n  //. .              /* otherwise */               '\\u274C   '))\n  //. .       (S.keys (Z.filter ($.test ([]) ($.TypeClass), Z)))\n  //. [ 'Setoid          ✅ * ',  // if ‘a’ and ‘b’ satisfy Setoid\n  //. . 'Ord             ✅ * ',  // if ‘a’ and ‘b’ satisfy Ord\n  //. . 'Semigroupoid    ❌   ',\n  //. . 'Category        ❌   ',\n  //. . 'Semigroup       ✅ * ',  // if ‘a’ and ‘b’ satisfy Semigroup\n  //. . 'Monoid          ❌   ',\n  //. . 'Group           ❌   ',\n  //. . 'Filterable      ❌   ',\n  //. . 'Functor         ✅   ',\n  //. . 'Bifunctor       ✅   ',\n  //. . 'Profunctor      ❌   ',\n  //. . 'Apply           ✅   ',\n  //. . 'Applicative     ✅   ',\n  //. . 'Chain           ✅   ',\n  //. . 'ChainRec        ✅   ',\n  //. . 'Monad           ✅   ',\n  //. . 'Alt             ✅   ',\n  //. . 'Plus            ❌   ',\n  //. . 'Alternative     ❌   ',\n  //. . 'Foldable        ✅   ',\n  //. . 'Traversable     ✅   ',\n  //. . 'Extend          ✅   ',\n  //. . 'Comonad         ❌   ',\n  //. . 'Contravariant   ❌   ' ]\n  //. ```\n\n  //# Either :: TypeRep Either\n  //.\n  //. Either [type representative][].\n\n  //# Either.Left :: a -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > Left ('sqrt undefined for -1')\n  //. Left ('sqrt undefined for -1')\n  //. ```\n  var Left = Either.Left = function(value) {\n    var left = Object.create (Left$prototype);\n    if (Z.Setoid.test (value)) {\n      left['fantasy-land/equals'] = Left$prototype$equals;\n      if (Z.Ord.test (value)) {\n        left['fantasy-land/lte'] = Left$prototype$lte;\n      }\n    }\n    if (Z.Semigroup.test (value)) {\n      left['fantasy-land/concat'] = Left$prototype$concat;\n    }\n    left.value = value;\n    return left;\n  };\n\n  //# Either.Right :: b -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `b`.\n  //.\n  //. ```javascript\n  //. > Right (42)\n  //. Right (42)\n  //. ```\n  var Right = Either.Right = function Right(value) {\n    var right = Object.create (Right$prototype);\n    if (Z.Setoid.test (value)) {\n      right['fantasy-land/equals'] = Right$prototype$equals;\n      if (Z.Ord.test (value)) {\n        right['fantasy-land/lte'] = Right$prototype$lte;\n      }\n    }\n    if (Z.Semigroup.test (value)) {\n      right['fantasy-land/concat'] = Right$prototype$concat;\n    }\n    right.value = value;\n    return right;\n  };\n\n  //# Either.@@type :: String\n  //.\n  //. Either [type identifier][].\n  //.\n  //. ```javascript\n  //. > type (Right (42))\n  //. 'sanctuary-either/Either@1'\n  //.\n  //. > type.parse (type (Right (42)))\n  //. {namespace: 'sanctuary-either', name: 'Either', version: 1}\n  //. ```\n  Either['@@type'] = 'sanctuary-either/Either@1';\n\n  //# Either.fantasy-land/of :: b -> Either a b\n  //.\n  //.   - `of (Either) (x)` is equivalent to `Right (x)`\n  //.\n  //. ```javascript\n  //. > S.of (Either) (42)\n  //. Right (42)\n  //. ```\n  Either['fantasy-land/of'] = Right;\n\n  function next(x) { return {tag: next, value: x}; }\n  function done(x) { return {tag: done, value: x}; }\n\n  //# Either.fantasy-land/chainRec :: ((a -> c, b -> c, a) -> Either d c, a) -> Either d b\n  //.\n  //. ```javascript\n  //. > Z.chainRec (\n  //. .   Either,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Left ('!!') : Right (x >= 1000 ? done (x) : next (x * x)),\n  //. .   1\n  //. . )\n  //. Left ('!!')\n  //.\n  //. > Z.chainRec (\n  //. .   Either,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Left ('!!') : Right (x >= 1000 ? done (x) : next (x * x)),\n  //. .   2\n  //. . )\n  //. Right (65536)\n  //. ```\n  Either['fantasy-land/chainRec'] = function(f, x) {\n    var r = next (x);\n    while (r.tag === next) {\n      var either = f (next, done, r.value);\n      if (either.isLeft) return either;\n      r = either.value;\n    }\n    return Right (r.value);\n  };\n\n  //# Either#@@show :: (Showable a, Showable b) => Either a b ~> () -> String\n  //.\n  //.   - `show (Left (x))` is equivalent to `'Left (' + show (x) + ')'`\n  //.   - `show (Right (x))` is equivalent to `'Right (' + show (x) + ')'`\n  //.\n  //. ```javascript\n  //. > show (Left ('sqrt undefined for -1'))\n  //. 'Left (\"sqrt undefined for -1\")'\n  //.\n  //. > show (Right ([1, 2, 3]))\n  //. 'Right ([1, 2, 3])'\n  //. ```\n  function Left$prototype$show() {\n    return 'Left (' + show (this.value) + ')';\n  }\n  function Right$prototype$show() {\n    return 'Right (' + show (this.value) + ')';\n  }\n\n  //# Either#fantasy-land/equals :: (Setoid a, Setoid b) => Either a b ~> Either a b -> Boolean\n  //.\n  //.   - `Left (x)` is equal to `Left (y)` [iff][] `x` is equal to `y`\n  //.     according to [`Z.equals`][]\n  //.   - `Right (x)` is equal to `Right (y)` [iff][] `x` is equal to `y`\n  //.     according to [`Z.equals`][]\n  //.   - `Left (x)` is never equal to `Right (y)`\n  //.\n  //. ```javascript\n  //. > S.equals (Left ([1, 2, 3])) (Left ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Right ([1, 2, 3])) (Right ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Left ([1, 2, 3])) (Right ([1, 2, 3]))\n  //. false\n  //. ```\n  function Left$prototype$equals(other) {\n    return other.isLeft && Z.equals (this.value, other.value);\n  }\n  function Right$prototype$equals(other) {\n    return other.isRight && Z.equals (this.value, other.value);\n  }\n\n  //# Either#fantasy-land/lte :: (Ord a, Ord b) => Either a b ~> Either a b -> Boolean\n  //.\n  //.   - `Left (x)` is less than or equal to `Left (y)` [iff][] `x` is less\n  //.     than or equal to `y` according to [`Z.lte`][]\n  //.   - `Right (x)` is less than or equal to `Right (y)` [iff][] `x` is less\n  //.     than or equal to `y` according to [`Z.lte`][]\n  //.   - `Left (x)` is always less than `Right (y)`\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (Left (1))) ([Left (0), Left (1), Left (2)])\n  //. [Left (0), Left (1)]\n  //.\n  //. > S.filter (S.lte (Right (1))) ([Right (0), Right (1), Right (2)])\n  //. [Right (0), Right (1)]\n  //.\n  //. > S.filter (S.lte (Left (1))) ([Right (0), Right (1), Right (2)])\n  //. []\n  //.\n  //. > S.filter (S.lte (Right (1))) ([Left (0), Left (1), Left (2)])\n  //. [Left (0), Left (1), Left (2)]\n  //. ```\n  function Left$prototype$lte(other) {\n    return other.isRight || Z.lte (this.value, other.value);\n  }\n  function Right$prototype$lte(other) {\n    return other.isRight && Z.lte (this.value, other.value);\n  }\n\n  //# Either#fantasy-land/concat :: (Semigroup a, Semigroup b) => Either a b ~> Either a b -> Either a b\n  //.\n  //.   - `concat (Left (x)) (Left (y))` is equivalent to\n  //.     `Left (concat (x) (y))`\n  //.   - `concat (Right (x)) (Right (y))` is equivalent to\n  //.     `Right (concat (x) (y))`\n  //.   - `concat (Left (x)) (Right (y))` is equivalent to `Right (y)`\n  //.   - `concat (Right (x)) (Left (y))` is equivalent to `Right (x)`\n  //.\n  //. ```javascript\n  //. > S.concat (Left ('abc')) (Left ('def'))\n  //. Left ('abcdef')\n  //.\n  //. > S.concat (Right ([1, 2, 3])) (Right ([4, 5, 6]))\n  //. Right ([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat (Left ('abc')) (Right ([1, 2, 3]))\n  //. Right ([1, 2, 3])\n  //.\n  //. > S.concat (Right ([1, 2, 3])) (Left ('abc'))\n  //. Right ([1, 2, 3])\n  //. ```\n  function Left$prototype$concat(other) {\n    return other.isLeft ? Left (Z.concat (this.value, other.value)) : other;\n  }\n  function Right$prototype$concat(other) {\n    return other.isRight ? Right (Z.concat (this.value, other.value)) : this;\n  }\n\n  //# Either#fantasy-land/map :: Either a b ~> (b -> c) -> Either a c\n  //.\n  //.   - `map (f) (Left (x))` is equivalent to `Left (x)`\n  //.   - `map (f) (Right (x))` is equivalent to `Right (f (x))`\n  //.\n  //. ```javascript\n  //. > S.map (S.add (1)) (Left ('sqrt undefined for -1'))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.map (S.add (1)) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$map(f) {\n    return this;\n  }\n  function Right$prototype$map(f) {\n    return Right (f (this.value));\n  }\n\n  //# Either#fantasy-land/bimap :: Either a c ~> (a -> b, c -> d) -> Either b d\n  //.\n  //.   - `bimap (f) (g) (Left (x))` is equivalent to `Left (f (x))`\n  //.   - `bimap (f) (g) (Right (x))` is equivalent to `Right (g (x))`\n  //.\n  //. ```javascript\n  //. > S.bimap (S.toUpper) (S.add (1)) (Left ('abc'))\n  //. Left ('ABC')\n  //.\n  //. > S.bimap (S.toUpper) (S.add (1)) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$bimap(f, g) {\n    return Left (f (this.value));\n  }\n  function Right$prototype$bimap(f, g) {\n    return Right (g (this.value));\n  }\n\n  //# Either#fantasy-land/ap :: Either a b ~> Either a (b -> c) -> Either a c\n  //.\n  //.   - `ap (Left (x)) (Left (y))` is equivalent to `Left (x)`\n  //.   - `ap (Left (x)) (Right (y))` is equivalent to `Left (x)`\n  //.   - `ap (Right (f)) (Left (x))` is equivalent to `Left (x)`\n  //.   - `ap (Right (f)) (Right (x))` is equivalent to `Right (f (x))`\n  //.\n  //. ```javascript\n  //. > S.ap (Left ('div undefined for 0')) (Left ('sqrt undefined for -1'))\n  //. Left ('div undefined for 0')\n  //.\n  //. > S.ap (Left ('div undefined for 0')) (Right (99))\n  //. Left ('div undefined for 0')\n  //.\n  //. > S.ap (Right (S.add (1))) (Left ('sqrt undefined for -1'))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.ap (Right (S.add (1))) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$ap(other) {\n    return other.isLeft ? other : this;\n  }\n  function Right$prototype$ap(other) {\n    return other.isLeft ? other : Right (other.value (this.value));\n  }\n\n  //# Either#fantasy-land/chain :: Either a b ~> (b -> Either a c) -> Either a c\n  //.\n  //.   - `chain (f) (Left (x))` is equivalent to `Left (x)`\n  //.   - `chain (f) (Right (x))` is equivalent to `f (x)`\n  //.\n  //. ```javascript\n  //. > const sqrt = n => n < 0 ? Left ('sqrt undefined for ' + show (n))\n  //. .                         : Right (Math.sqrt (n))\n  //.\n  //. > S.chain (sqrt) (Left ('div undefined for 0'))\n  //. Left ('div undefined for 0')\n  //.\n  //. > S.chain (sqrt) (Right (-1))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.chain (sqrt) (Right (25))\n  //. Right (5)\n  //. ```\n  function Left$prototype$chain(f) {\n    return this;\n  }\n  function Right$prototype$chain(f) {\n    return f (this.value);\n  }\n\n  //# Either#fantasy-land/alt :: Either a b ~> Either a b -> Either a b\n  //.\n  //.   - `alt (Left (x)) (Left (y))` is equivalent to `Left (y)`\n  //.   - `alt (Left (x)) (Right (y))` is equivalent to `Right (y)`\n  //.   - `alt (Right (x)) (Left (y))` is equivalent to `Right (x)`\n  //.   - `alt (Right (x)) (Right (y))` is equivalent to `Right (x)`\n  //.\n  //. ```javascript\n  //. > S.alt (Left ('A')) (Left ('B'))\n  //. Left ('B')\n  //.\n  //. > S.alt (Left ('C')) (Right (1))\n  //. Right (1)\n  //.\n  //. > S.alt (Right (2)) (Left ('D'))\n  //. Right (2)\n  //.\n  //. > S.alt (Right (3)) (Right (4))\n  //. Right (3)\n  //. ```\n  function Left$prototype$alt(other) {\n    return other;\n  }\n  function Right$prototype$alt(other) {\n    return this;\n  }\n\n  //# Either#fantasy-land/reduce :: Either a b ~> ((c, b) -> c, c) -> c\n  //.\n  //.   - `reduce (f) (x) (Left (y))` is equivalent to `x`\n  //.   - `reduce (f) (x) (Right (y))` is equivalent to `f (x) (y)`\n  //.\n  //. ```javascript\n  //. > S.reduce (S.concat) ([1]) (Left ('sqrt undefined for -1'))\n  //. [1]\n  //.\n  //. > S.reduce (S.concat) ([1]) (Right ([2]))\n  //. [1, 2]\n  //. ```\n  function Left$prototype$reduce(f, x) {\n    return x;\n  }\n  function Right$prototype$reduce(f, x) {\n    return f (x, this.value);\n  }\n\n  //# Either#fantasy-land/traverse :: Applicative f => Either a b ~> (TypeRep f, b -> f c) -> f (Either a c)\n  //.\n  //.   - `traverse (A) (f) (Left (x))` is equivalent to `of (A) (Left (x))`\n  //.   - `traverse (A) (f) (Right (x))` is equivalent to `map (Right) (f (x))`\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (Left ('sqrt undefined for -1'))\n  //. [Left ('sqrt undefined for -1')]\n  //.\n  //. > S.traverse (Array) (S.words) (Right ('foo bar baz'))\n  //. [Right ('foo'), Right ('bar'), Right ('baz')]\n  //. ```\n  function Left$prototype$traverse(typeRep, f) {\n    return Z.of (typeRep, this);\n  }\n  function Right$prototype$traverse(typeRep, f) {\n    return Z.map (Right, f (this.value));\n  }\n\n  //# Either#fantasy-land/extend :: Either a b ~> (Either a b -> c) -> Either a c\n  //.\n  //.   - `extend (f) (Left (x))` is equivalent to `Left (x)`\n  //.   - `extend (f) (Right (x))` is equivalent to `Right (f (Right (x)))`\n  //.\n  //. ```javascript\n  //. > S.extend (S.reduce (S.add) (1)) (Left ('sqrt undefined for -1'))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.extend (S.reduce (S.add) (1)) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$extend(f) {\n    return this;\n  }\n  function Right$prototype$extend(f) {\n    return Right (f (this));\n  }\n\n  return Either;\n\n}));\n\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n","export * from \"./sanctuary/Sanctuary\";\nexport * from \"./flags/Flags\";\nexport * from \"./worker/Worker-Loader\";\nexport * from \"./math/Kinematic\";\nexport * from \"./math/Quadratic\";\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n//\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\n//\n// Orginal javascript code was by Mauricio Santos\n//\nvar _arrays = require(\"./arrays\");\nexports.arrays = _arrays;\nvar Bag_1 = require(\"./Bag\");\nexports.Bag = Bag_1.default;\nvar BSTree_1 = require(\"./BSTree\");\nexports.BSTree = BSTree_1.default;\nvar BSTreeKV_1 = require(\"./BSTreeKV\");\nexports.BSTreeKV = BSTreeKV_1.default;\nvar Dictionary_1 = require(\"./Dictionary\");\nexports.Dictionary = Dictionary_1.default;\nvar Heap_1 = require(\"./Heap\");\nexports.Heap = Heap_1.default;\nvar LinkedDictionary_1 = require(\"./LinkedDictionary\");\nexports.LinkedDictionary = LinkedDictionary_1.default;\nvar LinkedList_1 = require(\"./LinkedList\");\nexports.LinkedList = LinkedList_1.default;\nvar MultiDictionary_1 = require(\"./MultiDictionary\");\nexports.MultiDictionary = MultiDictionary_1.default;\nvar FactoryDictionary_1 = require(\"./FactoryDictionary\");\nexports.FactoryDictionary = FactoryDictionary_1.default;\nvar FactoryDictionary_2 = require(\"./FactoryDictionary\");\nexports.DefaultDictionary = FactoryDictionary_2.default;\nvar Queue_1 = require(\"./Queue\");\nexports.Queue = Queue_1.default;\nvar PriorityQueue_1 = require(\"./PriorityQueue\");\nexports.PriorityQueue = PriorityQueue_1.default;\nvar Set_1 = require(\"./Set\");\nexports.Set = Set_1.default;\nvar Stack_1 = require(\"./Stack\");\nexports.Stack = Stack_1.default;\nvar MultiRootTree_1 = require(\"./MultiRootTree\");\nexports.MultiRootTree = MultiRootTree_1.default;\nvar _util = require(\"./util\");\nexports.util = _util;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar LinkedList = /** @class */ (function () {\n    /**\n    * Creates an empty Linked List.\n    * @class A linked list is a data structure consisting of a group of nodes\n    * which together represent a sequence.\n    * @constructor\n    */\n    function LinkedList() {\n        /**\n        * First node in the list\n        * @type {Object}\n        * @private\n        */\n        this.firstNode = null;\n        /**\n        * Last node in the list\n        * @type {Object}\n        * @private\n        */\n        this.lastNode = null;\n        /**\n        * Number of elements in the list\n        * @type {number}\n        * @private\n        */\n        this.nElements = 0;\n    }\n    /**\n    * Adds an element to this list.\n    * @param {Object} item element to be added.\n    * @param {number=} index optional index to add the element. If no index is specified\n    * the element is added to the end of this list.\n    * @return {boolean} true if the element was added or false if the index is invalid\n    * or if the element is undefined.\n    */\n    LinkedList.prototype.add = function (item, index) {\n        if (util.isUndefined(index)) {\n            index = this.nElements;\n        }\n        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n            return false;\n        }\n        var newNode = this.createNode(item);\n        if (this.nElements === 0 || this.lastNode === null) {\n            // First node in the list.\n            this.firstNode = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === this.nElements) {\n            // Insert at the end.\n            this.lastNode.next = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === 0) {\n            // Change first node.\n            newNode.next = this.firstNode;\n            this.firstNode = newNode;\n        }\n        else {\n            var prev = this.nodeAtIndex(index - 1);\n            if (prev == null) {\n                return false;\n            }\n            newNode.next = prev.next;\n            prev.next = newNode;\n        }\n        this.nElements++;\n        return true;\n    };\n    /**\n    * Returns the first element in this list.\n    * @return {*} the first element of the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.first = function () {\n        if (this.firstNode !== null) {\n            return this.firstNode.element;\n        }\n        return undefined;\n    };\n    /**\n    * Returns the last element in this list.\n    * @return {*} the last element in the list or undefined if the list is\n    * empty.\n    */\n    LinkedList.prototype.last = function () {\n        if (this.lastNode !== null) {\n            return this.lastNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */\n    LinkedList.prototype.elementAtIndex = function (index) {\n        var node = this.nodeAtIndex(index);\n        if (node === null) {\n            return undefined;\n        }\n        return node.element;\n    };\n    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */\n    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (util.isUndefined(item)) {\n            return -1;\n        }\n        var currentNode = this.firstNode;\n        var index = 0;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                return index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        return -1;\n    };\n    /**\n       * Returns true if this list contains the specified element.\n       * <p>If the elements inside the list are\n       * not comparable with the === operator a custom equals function should be\n       * provided to perform searches, the function must receive two arguments and\n       * return true if they are equal, false otherwise. Example:</p>\n       *\n       * <pre>\n       * const petsAreEqualByName = function(pet1, pet2) {\n       *  return pet1.name === pet2.name;\n       * }\n       * </pre>\n       * @param {Object} item element to search for.\n       * @param {function(Object,Object):boolean=} equalsFunction Optional\n       * function used to check if two elements are equal.\n       * @return {boolean} true if this list contains the specified element, false\n       * otherwise.\n       */\n    LinkedList.prototype.contains = function (item, equalsFunction) {\n        return (this.indexOf(item, equalsFunction) >= 0);\n    };\n    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */\n    LinkedList.prototype.remove = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (this.nElements < 1 || util.isUndefined(item)) {\n            return false;\n        }\n        var previous = null;\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                if (previous == null) {\n                    this.firstNode = currentNode.next;\n                    if (currentNode === this.lastNode) {\n                        this.lastNode = null;\n                    }\n                }\n                else if (currentNode === this.lastNode) {\n                    this.lastNode = previous;\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                else {\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                this.nElements--;\n                return true;\n            }\n            previous = currentNode;\n            currentNode = currentNode.next;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this list.\n     */\n    LinkedList.prototype.clear = function () {\n        this.firstNode = null;\n        this.lastNode = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */\n    LinkedList.prototype.equals = function (other, equalsFunction) {\n        var eqF = equalsFunction || util.defaultEquals;\n        if (!(other instanceof LinkedList)) {\n            return false;\n        }\n        if (this.size() !== other.size()) {\n            return false;\n        }\n        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n    };\n    /**\n    * @private\n    */\n    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n        while (n1 !== null && n2 !== null) {\n            if (!eqF(n1.element, n2.element)) {\n                return false;\n            }\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return true;\n    };\n    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */\n    LinkedList.prototype.removeElementAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements || this.firstNode === null || this.lastNode === null) {\n            return undefined;\n        }\n        var element;\n        if (this.nElements === 1) {\n            //First node in the list.\n            element = this.firstNode.element;\n            this.firstNode = null;\n            this.lastNode = null;\n        }\n        else {\n            var previous = this.nodeAtIndex(index - 1);\n            if (previous === null) {\n                element = this.firstNode.element;\n                this.firstNode = this.firstNode.next;\n            }\n            else if (previous.next === this.lastNode) {\n                element = this.lastNode.element;\n                this.lastNode = previous;\n            }\n            if (previous !== null && previous.next !== null) {\n                element = previous.next.element;\n                previous.next = previous.next.next;\n            }\n        }\n        this.nElements--;\n        return element;\n    };\n    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    LinkedList.prototype.forEach = function (callback) {\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (callback(currentNode.element) === false) {\n                break;\n            }\n            currentNode = currentNode.next;\n        }\n    };\n    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */\n    LinkedList.prototype.reverse = function () {\n        var previous = null;\n        var current = this.firstNode;\n        var temp = null;\n        while (current !== null) {\n            temp = current.next;\n            current.next = previous;\n            previous = current;\n            current = temp;\n        }\n        temp = this.firstNode;\n        this.firstNode = this.lastNode;\n        this.lastNode = temp;\n    };\n    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */\n    LinkedList.prototype.toArray = function () {\n        var array = [];\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            array.push(currentNode.element);\n            currentNode = currentNode.next;\n        }\n        return array;\n    };\n    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */\n    LinkedList.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */\n    LinkedList.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    LinkedList.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.nodeAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return null;\n        }\n        if (index === (this.nElements - 1)) {\n            return this.lastNode;\n        }\n        var node = this.firstNode;\n        for (var i = 0; i < index && node != null; i++) {\n            node = node.next;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.createNode = function (item) {\n        return {\n            element: item,\n            next: null\n        };\n    };\n    return LinkedList;\n}()); // End of linked list\nexports.default = LinkedList;\n//# sourceMappingURL=LinkedList.js.map","import {StreamSink} from \"sodiumjs\";\nimport {Camera} from \"pure3d\";\n\nexport const sWorldUpdate = new StreamSink<{frameTs: number, camera: Camera}>();\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var id = function id(x) {\n  return x;\n};\n\n//\n\nvar defineNameU = /*#__PURE__*/function () {\n  var _defineNameU = function _defineNameU(fn, value) {\n    return Object.defineProperty(fn, 'name', { value: value });\n  };\n  try {\n    return _defineNameU(_defineNameU, _defineNameU.name.slice(1));\n  } catch (_) {\n    return function (fn, _) {\n      return fn;\n    };\n  }\n}();\n\nvar copyName = process.env.NODE_ENV === 'production' ? function (f) {\n  return f;\n} : function (to, from) {\n  return defineNameU(to, from.name);\n};\n\nvar withName = process.env.NODE_ENV === 'production' ? id : function (ary) {\n  return function (fn) {\n    return copyName(ary(fn), fn);\n  };\n};\n\nvar ary1of2 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1) {\n    return arguments.length < 2 ? fn(x0) : fn(x0)(x1);\n  };\n});\n\nvar ary2of2 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1) {\n    return arguments.length < 2 ? copyName(function (x1) {\n      return fn(x0, x1);\n    }, fn) : fn(x0, x1);\n  };\n});\n\nvar ary1of3 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return curryN(2, fn(x0));\n      case 2:\n        return curryN(2, fn(x0))(x1);\n      default:\n        return curryN(2, fn(x0))(x1, x2);\n    }\n  };\n});\n\nvar ary2of3 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary1of2(copyName(function (x1) {\n          return fn(x0, x1);\n        }, fn));\n      case 2:\n        return fn(x0, x1);\n      default:\n        return fn(x0, x1)(x2);\n    }\n  };\n});\n\nvar ary3of3 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary2of2(copyName(function (x1, x2) {\n          return fn(x0, x1, x2);\n        }, fn));\n      case 2:\n        return copyName(function (x2) {\n          return fn(x0, x1, x2);\n        }, fn);\n      default:\n        return fn(x0, x1, x2);\n    }\n  };\n});\n\nvar ary1of4 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2, x3) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return curryN(3, fn(x0));\n      case 2:\n        return curryN(3, fn(x0))(x1);\n      case 3:\n        return curryN(3, fn(x0))(x1, x2);\n      default:\n        return curryN(3, fn(x0))(x1, x2, x3);\n    }\n  };\n});\n\nvar ary2of4 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2, x3) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary1of3(copyName(function (x1) {\n          return fn(x0, x1);\n        }, fn));\n      case 2:\n        return curryN(2, fn(x0, x1));\n      case 3:\n        return curryN(2, fn(x0, x1))(x2);\n      default:\n        return curryN(2, fn(x0, x1))(x2, x3);\n    }\n  };\n});\n\nvar ary3of4 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2, x3) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary2of3(copyName(function (x1, x2) {\n          return fn(x0, x1, x2);\n        }, fn));\n      case 2:\n        return ary1of2(copyName(function (x2) {\n          return fn(x0, x1, x2);\n        }, fn));\n      case 3:\n        return fn(x0, x1, x2);\n      default:\n        return fn(x0, x1, x2)(x3);\n    }\n  };\n});\n\nvar ary4of4 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2, x3) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary3of3(copyName(function (x1, x2, x3) {\n          return fn(x0, x1, x2, x3);\n        }, fn));\n      case 2:\n        return ary2of2(copyName(function (x2, x3) {\n          return fn(x0, x1, x2, x3);\n        }, fn));\n      case 3:\n        return copyName(function (x3) {\n          return fn(x0, x1, x2, x3);\n        }, fn);\n      default:\n        return fn(x0, x1, x2, x3);\n    }\n  };\n});\n\nvar ary0of0 = function ary0of0(fn) {\n  return fn.length === 0 ? fn : copyName(function () {\n    return fn();\n  }, fn);\n};\nvar ary1of1 = function ary1of1(fn) {\n  return fn.length === 1 ? fn : copyName(function (x) {\n    return fn(x);\n  }, fn);\n};\n\nvar C = [[ary0of0], [ary1of1, ary1of1], [void 0, ary1of2, ary2of2], [void 0, ary1of3, ary2of3, ary3of3], [void 0, ary1of4, ary2of4, ary3of4, ary4of4]];\n\nvar curryN = function curryN(n, f) {\n  return C[n][Math.min(n, f.length)](f);\n};\nvar arityN = function arityN(n, f) {\n  return C[n][n](f);\n};\nvar curry = function curry(f) {\n  return arityN(f.length, f);\n};\n\n//\n\nvar assign = Object.assign;\n\nvar toObject = function toObject(x) {\n  return assign({}, x);\n};\n\n//\n\nvar always = function always(x) {\n  return function (_) {\n    return x;\n  };\n};\nvar applyU = function applyU(x2y, x) {\n  return x2y(x);\n};\nvar sndU = function sndU(_, y) {\n  return y;\n};\n\n//\n\nvar freeze = function freeze(x) {\n  return x && Object.freeze(x);\n};\n\nvar array0 = /*#__PURE__*/freeze([]);\nvar object0 = /*#__PURE__*/freeze({});\n\n//\n\nvar isDefined = function isDefined(x) {\n  return void 0 !== x;\n};\n\n//\n\nvar hasU = function hasU(p, x) {\n  return Object.prototype.hasOwnProperty.call(x, p);\n};\n\n//\n\nvar prototypeOf = function prototypeOf(x) {\n  return null == x ? x : Object.getPrototypeOf(x);\n};\n\nvar constructorOf = function constructorOf(x) {\n  return null == x ? x : (hasU('constructor', x) ? prototypeOf(x) : x).constructor;\n};\n\n//\n\nvar isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\nvar isString = function isString(x) {\n  return typeof x === 'string';\n};\nvar isNumber = function isNumber(x) {\n  return typeof x === 'number';\n};\n\nvar isArray = Array.isArray;\n\nvar object = /*#__PURE__*/prototypeOf({});\nvar isObject = function isObject(x) {\n  return null != x && typeof x === 'object' && (hasU('constructor', x) ? prototypeOf(x) === object : x.constructor === Object);\n};\n\n//\n\nfunction pipe2U(fn1, fn2) {\n  var n = fn1.length;\n  return n === 1 ? function (x) {\n    return fn2(fn1(x));\n  } : arityN(n, function () {\n    return fn2(fn1.apply(undefined, arguments));\n  });\n}\n\nvar compose2U = function compose2U(fn1, fn2) {\n  return pipe2U(fn2, fn1);\n};\n\n//\n\nfunction seq(x) {\n  for (var _len = arguments.length, fns = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    fns[_key - 1] = arguments[_key];\n  }\n\n  for (var i = 0, n = fns.length; i < n; ++i) {\n    x = fns[i](x);\n  }return x;\n}\n\nfunction seqPartial(x) {\n  for (var _len2 = arguments.length, fns = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    fns[_key2 - 1] = arguments[_key2];\n  }\n\n  for (var i = 0, n = fns.length; isDefined(x) && i < n; ++i) {\n    x = fns[i](x);\n  }return x;\n}\n\n//\n\nvar identicalU = function identicalU(a, b) {\n  return a === b && (a !== 0 || 1 / a === 1 / b) || a !== a && b !== b;\n};\n\n//\n\nfunction whereEqU(t, o) {\n  for (var k in t) {\n    var bk = o[k];\n    if (!isDefined(bk) && !hasU(k, o) || !acyclicEqualsU(t[k], bk)) return false;\n  }\n  return true;\n}\n\n//\n\nfunction hasKeysOfU(t, o) {\n  for (var k in t) {\n    if (!hasU(k, o)) return false;\n  }return true;\n}\n\n//\n\nvar acyclicEqualsObject = function acyclicEqualsObject(a, b) {\n  return whereEqU(a, b) && hasKeysOfU(b, a);\n};\n\nfunction acyclicEqualsArray(a, b) {\n  var n = a.length;\n  if (n !== b.length) return false;\n  for (var i = 0; i < n; ++i) {\n    if (!acyclicEqualsU(a[i], b[i])) return false;\n  }return true;\n}\n\nfunction acyclicEqualsU(a, b) {\n  if (identicalU(a, b)) return true;\n  if (!a || !b) return false;\n  var c = constructorOf(a);\n  if (c !== constructorOf(b)) return false;\n  switch (c) {\n    case Array:\n      return acyclicEqualsArray(a, b);\n    case Object:\n      return acyclicEqualsObject(a, b);\n    default:\n      return isFunction(a.equals) && a.equals(b);\n  }\n}\n\n//\n\nfunction unzipObjIntoU(o, ks, vs) {\n  for (var k in o) {\n    if (ks) ks.push(k);\n    if (vs) vs.push(o[k]);\n  }\n}\n\nfunction keys(o) {\n  if (o instanceof Object) {\n    if (isObject(o)) {\n      var ks = [];\n      unzipObjIntoU(o, ks, 0);\n      return ks;\n    } else {\n      return Object.keys(o);\n    }\n  }\n}\n\nfunction values(o) {\n  if (o instanceof Object) {\n    if (isObject(o)) {\n      var vs = [];\n      unzipObjIntoU(o, 0, vs);\n      return vs;\n    } else {\n      var xs = Object.keys(o),\n          n = xs.length;\n      for (var i = 0; i < n; ++i) {\n        xs[i] = o[xs[i]];\n      }return xs;\n    }\n  }\n}\n\n//\n\nfunction assocPartialU(k, v, o) {\n  var r = {};\n  if (o instanceof Object) {\n    if (!isObject(o)) o = toObject(o);\n    for (var l in o) {\n      if (l !== k) {\n        r[l] = o[l];\n      } else {\n        r[k] = v;\n        k = void 0;\n      }\n    }\n  }\n  if (isDefined(k)) r[k] = v;\n  return r;\n}\n\nfunction dissocPartialU(k, o) {\n  var r = void 0;\n  if (o instanceof Object) {\n    if (!isObject(o)) o = toObject(o);\n    for (var l in o) {\n      if (l !== k) {\n        if (!r) r = {};\n        r[l] = o[l];\n      } else {\n        k = void 0;\n      }\n    }\n  }\n  return r;\n}\n\n//\n\nvar inherit = function inherit(Derived, Base, protos, statics) {\n  return assign(Derived.prototype = Object.create(Base.prototype), protos).constructor = assign(Derived, statics);\n};\n\nexport { id, defineNameU, curryN, arityN, curry, assign, toObject, always, applyU, sndU, freeze, array0, object0, isDefined, hasU, prototypeOf, constructorOf, isFunction, isString, isNumber, isArray, isObject, pipe2U, compose2U, seq, seqPartial, identicalU, whereEqU, hasKeysOfU, acyclicEqualsObject, acyclicEqualsU, unzipObjIntoU, keys, values, assocPartialU, dissocPartialU, inherit };\n","import { defineNameU, isString, isFunction, isArray, freeze, isObject, acyclicEqualsU, array0, object0, sndU, always, curry, curryN, assocPartialU, dissocPartialU, isNumber, constructorOf, toObject, applyU, isDefined, keys, hasU, arityN, id, assign } from 'infestines';\n\nvar addU = function addU(x, y) {\n  return x + y;\n};\nvar multiplyU = function multiplyU(x, y) {\n  return x * y;\n};\n\nvar add = /*#__PURE__*/curry(addU);\nvar multiply = /*#__PURE__*/curry(multiplyU);\n\nvar divideBy = /*#__PURE__*/curry(function (d, n) {\n  return n / d;\n});\n\nvar negate = function negate(x) {\n  return -x;\n};\n\nvar ltU = function ltU(x, y) {\n  return x < y;\n};\nvar gtU = function gtU(x, y) {\n  return x > y;\n};\n\nvar isInstanceOf = /*#__PURE__*/curry(function (Class, x) {\n  return x instanceof Class;\n});\n\nvar create = Object.create;\nvar protoless = function protoless(o) {\n  return assign(create(null), o);\n};\nvar protoless0 = /*#__PURE__*/freeze( /*#__PURE__*/protoless(object0));\n\nvar replace = /*#__PURE__*/curry(function (p, r, s) {\n  return s.replace(p, r);\n});\n\nvar dep = function dep(xs2xsyC) {\n  return function (xsy) {\n    return arityN(xsy.length, defineNameU(function () {\n      return xs2xsyC.apply(undefined, arguments)(xsy).apply(undefined, arguments);\n    }, xsy.name));\n  };\n};\n\nvar fn = function fn(xsC, yC) {\n  return function (xsy) {\n    return arityN(xsy.length, defineNameU(function () {\n      for (var _len = arguments.length, xs = Array(_len), _key = 0; _key < _len; _key++) {\n        xs[_key] = arguments[_key];\n      }\n\n      return yC(xsy.apply(null, xsC(xs)));\n    }, xsy.name));\n  };\n};\n\nvar res = function res(yC) {\n  return fn(id, yC);\n};\n\nvar args = function args(xsC) {\n  return fn(xsC, id);\n};\n\nvar nth = function nth(i, xC) {\n  return function (xs) {\n    var ys = xs.slice(0);\n    ys[i] = xC(ys[i]);\n    return ys;\n  };\n};\n\nvar par = function par(i, xC) {\n  return args(nth(i, xC));\n};\n\nvar and = function and() {\n  for (var _len2 = arguments.length, xCs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    xCs[_key2] = arguments[_key2];\n  }\n\n  return function (x) {\n    for (var i = 0, n = xCs.length; i < n; ++i) {\n      x = xCs[i](x);\n    }return x;\n  };\n};\n\nvar or = function or() {\n  for (var _len3 = arguments.length, xCs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    xCs[_key3] = arguments[_key3];\n  }\n\n  return function (x) {\n    var es = null;\n    for (var i = 0, n = xCs.length; i < n; ++i) {\n      try {\n        return xCs[i](x);\n      } catch (e) {\n        es = e;\n      }\n    }\n    throw es;\n  };\n};\n\nvar ef = function ef(xE) {\n  return defineNameU(function (x) {\n    xE(x);\n    return x;\n  }, xE.name);\n};\n\nvar tup = function tup() {\n  for (var _len4 = arguments.length, xCs = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    xCs[_key4] = arguments[_key4];\n  }\n\n  return function (xs) {\n    if (xs.length !== xCs.length) throw Error('Expected array of ' + xCs.length + ' elements, but got ' + xs.length);\n    return and.apply(null, xCs.map(function (xC, i) {\n      return nth(i, xC);\n    }))(xs);\n  };\n};\n\nvar arr = function arr(xC) {\n  return function (xs) {\n    return xs.map(xC);\n  };\n};\n\n//\n\nvar id$1 = function id$$1(x) {\n  return x;\n};\n\nvar setName = process.env.NODE_ENV === 'production' ? function (x) {\n  return x;\n} : function (to, name) {\n  return defineNameU(to, name);\n};\n\nvar copyName = process.env.NODE_ENV === 'production' ? function (x) {\n  return x;\n} : function (to, from) {\n  return defineNameU(to, from.name);\n};\n\nvar toRegExpU = function toRegExpU(str, flags) {\n  return isString(str) ? new RegExp(replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&', str), flags) : str;\n};\n\n//\n\nvar returnAsync = function returnAsync(x) {\n  return Promise.resolve(x);\n};\n\nvar chainAsync = function chainAsync(xyP, xP) {\n  return null != xP && isFunction(xP.then) ? xP.then(xyP) : xyP(xP);\n};\n\n//\n\nvar toStringPartial = function toStringPartial(x) {\n  return void 0 !== x ? String(x) : '';\n};\n\nvar sliceIndex = function sliceIndex(m, l, d, i) {\n  return void 0 !== i ? Math.min(Math.max(m, i < 0 ? l + i : i), l) : d;\n};\n\nvar cpair = function cpair(xs) {\n  return function (x) {\n    return [x, xs];\n  };\n};\n\nvar unto = function unto(c) {\n  return function (x) {\n    return void 0 !== x ? x : c;\n  };\n};\nvar unto0 = /*#__PURE__*/unto(0);\n\nvar notPartial = function complement(x) {\n  return void 0 !== x ? !x : x;\n};\n\nvar singletonPartial = function singletonPartial(x) {\n  return void 0 !== x ? [x] : x;\n};\n\nvar expect = function expect(p, f) {\n  return copyName(function (x) {\n    return p(x) ? f(x) : void 0;\n  }, f);\n};\n\nfunction deepFreeze(x) {\n  if (isArray(x)) {\n    x.forEach(deepFreeze);\n    freeze(x);\n  } else if (isObject(x)) {\n    for (var k in x) {\n      deepFreeze(x[k]);\n    }freeze(x);\n  }\n  return x;\n}\n\nfunction freezeArrayOfObjects(xs) {\n  xs.forEach(freeze);\n  return freeze(xs);\n}\n\nfunction freezeObjectOfObjects(xs) {\n  if (xs) for (var k in xs) {\n    freeze(xs[k]);\n  }return freeze(xs);\n}\n\nvar isArrayOrPrimitive = function isArrayOrPrimitive(x) {\n  return !(x instanceof Object) || isArray(x);\n};\n\nvar rev = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function reverse(xs) {\n  if (seemsArrayLike(xs)) {\n    var n = xs.length;\n    var ys = Array(n);\n    var i = 0;\n    while (n) {\n      ys[i++] = xs[--n];\n    }return ys;\n  }\n});\n\n//\n\nvar isEmptyArrayStringOrObject = function isEmptyArrayStringOrObject(x) {\n  return acyclicEqualsU(array0, x) || acyclicEqualsU(object0, x) || x === '';\n};\n\nvar warnEmpty = function warnEmpty(o, v, f) {\n  var msg = '`' + f + '(' + JSON.stringify(v) + ')` is likely unnecessary, because combinators no longer remove empty arrays, objects, or strings by default.  See CHANGELOG for more information.';\n  return function (x) {\n    if (acyclicEqualsU(v, x)) warn(o, msg);\n    return x;\n  };\n};\n\n//\n\nvar mapPartialIndexU = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function (xi2y, xs, skip) {\n    var ys = fn$$1(xi2y, xs, skip);\n    if (xs !== ys) freeze(ys);\n    return ys;\n  };\n})(function (xi2y, xs, skip) {\n  var n = xs.length;\n  var ys = Array(n);\n  var j = 0;\n  var same = true;\n  for (var i = 0; i < n; ++i) {\n    var x = xs[i];\n    var y = xi2y(x, i);\n    if (skip !== y) {\n      ys[j++] = y;\n      if (same) same = x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;\n    }\n  }\n  if (j !== n) {\n    ys.length = j;\n    return ys;\n  } else if (same) {\n    return xs;\n  } else {\n    return ys;\n  }\n});\n\nvar mapIfArrayLike = function mapIfArrayLike(xi2y, xs) {\n  return seemsArrayLike(xs) ? mapPartialIndexU(xi2y, xs, void 0) : void 0;\n};\n\nvar copyToFrom = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function (ys, k, xs, i, j) {\n    return ys.length === k + j - i ? freeze(fn$$1(ys, k, xs, i, j)) : fn$$1(ys, k, xs, i, j);\n  };\n})(function (ys, k, xs, i, j) {\n  while (i < j) {\n    ys[k++] = xs[i++];\n  }return ys;\n});\n\n//\n\nfunction selectInArrayLike(xi2v, xs) {\n  for (var i = 0, n = xs.length; i < n; ++i) {\n    var v = xi2v(xs[i], i);\n    if (void 0 !== v) return v;\n  }\n}\n\n//\n\nvar Select = {\n  map: sndU,\n  of: function of() {},\n  ap: function ap(l, r) {\n    return void 0 !== l ? l : r;\n  }\n};\n\nvar ConcatOf = function ConcatOf(ap, empty) {\n  return { map: sndU, ap: ap, of: always(empty) };\n};\n\nvar Sum = /*#__PURE__*/ConcatOf(addU, 0);\n\nvar mumBy = function mumBy(ord) {\n  return curry(function mumBy(xi2y, t, s) {\n    var minX = void 0;\n    var minY = void 0;\n    traverseU(Select, function (x, i) {\n      var y = xi2y(x, i);\n      if (void 0 !== y && (void 0 === minY || ord(y, minY))) {\n        minX = x;\n        minY = y;\n      }\n    }, t, s);\n    return minX;\n  });\n};\n\n//\n\nvar traverseU = function traverse(C, xi2yC, t, s) {\n  return toFunction(t)(s, void 0, C, xi2yC);\n};\n\n//\n\nvar expectedOptic = 'Expecting an optic';\nvar opticIsEither = 'An optic can be either\\n- a string,\\n- a non-negative integer,\\n- a quaternary optic function,\\n- an ordinary unary or binary function, or\\n- an array of optics.\\nSee documentation of `toFunction` and `compose` for details.';\nvar header = 'partial.lenses: ';\n\nfunction warn(f, m) {\n  if (!f.warned) {\n    f.warned = 1;\n    console.warn(header + m);\n  }\n}\n\nfunction errorGiven(m, o, e) {\n  m = header + m + '.';\n  e = e ? '\\n' + e : '';\n  console.error(m, 'Given:', o, e);\n  throw Error(m + e);\n}\n\nvar reqIndex = function index(x) {\n  if (!Number.isInteger(x) || x < 0) errorGiven('`index` expects a non-negative integer', x);\n};\n\nfunction reqFunction(o) {\n  if (!(isFunction(o) && (o.length === 4 || o.length <= 2))) errorGiven(expectedOptic, o, opticIsEither);\n}\n\nfunction reqFn(x) {\n  if (!isFunction(x)) errorGiven('Expected a function', x);\n}\n\nfunction reqArray(o) {\n  if (!isArray(o)) errorGiven(expectedOptic, o, opticIsEither);\n}\n\nfunction reqOptic(o) {\n  switch (typeof o) {\n    case 'string':\n      break;\n    case 'number':\n      reqIndex(o);\n      break;\n    case 'object':\n      reqArray(o);\n      for (var i = 0, n = o.length; i < n; ++i) {\n        reqOptic(o[i]);\n      }break;\n    default:\n      reqFunction(o);\n      break;\n  }\n}\n\n//\n\nvar reqString = function reqString(msg) {\n  return function (x) {\n    if (!isString(x)) errorGiven(msg, x);\n  };\n};\n\nvar reqMaybeArray = function reqMaybeArray(msg) {\n  return function (zs) {\n    if (!(void 0 === zs || seemsArrayLike(zs))) errorGiven(msg, zs);\n  };\n};\n\n//\n\nvar reqApplicative = function reqApplicative(name, arg) {\n  return function (C) {\n    if (!C.of) errorGiven('`' + name + (arg ? '(' + arg + ')' : '') + '` requires an applicative', C, 'Note that you cannot `get` a traversal. Perhaps you wanted to `collect` it?');\n  };\n};\n\nvar reqMonad = function reqMonad(name) {\n  return function (C) {\n    if (!C.chain) errorGiven('`' + name + '` requires a monad', C, 'Note that you can only `modify`, `remove`, `set`, and `traverse` a transform.');\n  };\n};\n\n//\n\nvar mkTraverse = function mkTraverse(after, toC) {\n  return curryN(4, copyName(function (xi2yC, m) {\n    return m = toC(m), function (t, s) {\n      return after(traverseU(m, xi2yC, t, s));\n    };\n  }, toC));\n};\n\n//\n\nvar consExcept = function consExcept(skip) {\n  return function (t) {\n    return function (h) {\n      return skip !== h ? [h, t] : t;\n    };\n  };\n};\nvar consTo = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (n) {\n  var xs = [];\n  while (consExcept !== n) {\n    xs.push(n[0]);\n    n = n[1];\n  }\n  return xs.reverse();\n});\n\nfunction traversePartialIndex(A, xi2yA, xs, skip) {\n  var map = A.map,\n      ap = A.ap;\n\n  var xsA = A.of(consExcept);\n  var n = xs.length;\n  if (map === sndU) {\n    for (var i = 0; i < n; ++i) {\n      xsA = ap(xsA, xi2yA(xs[i], i));\n    }return xsA;\n  } else {\n    var cons = consExcept(skip);\n    for (var _i2 = 0; _i2 < n; ++_i2) {\n      xsA = ap(map(cons, xsA), xi2yA(xs[_i2], _i2));\n    }return map(consTo, xsA);\n  }\n}\n\n//\n\nvar lensFrom = function lensFrom(get, set) {\n  return function (i) {\n    return function (x, _i, F, xi2yF) {\n      return F.map(function (v) {\n        return set(i, v, x);\n      }, xi2yF(get(i, x), i));\n    };\n  };\n};\n\n//\n\nvar getProp = function getProp(k, o) {\n  return o instanceof Object ? o[k] : void 0;\n};\n\nvar setProp = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (k, v, o) {\n  return void 0 !== v ? assocPartialU(k, v, o) : dissocPartialU(k, o) || object0;\n});\n\nvar funProp = /*#__PURE__*/lensFrom(getProp, setProp);\n\n//\n\nvar getIndex = function getIndex(i, xs) {\n  return seemsArrayLike(xs) ? xs[i] : void 0;\n};\n\nvar setIndex = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : fn(nth(0, ef(reqIndex)), freeze))(function (i, x, xs) {\n  if (!seemsArrayLike(xs)) xs = '';\n  var n = xs.length;\n  if (void 0 !== x) {\n    var m = Math.max(i + 1, n);\n    var ys = Array(m);\n    for (var j = 0; j < m; ++j) {\n      ys[j] = xs[j];\n    }ys[i] = x;\n    return ys;\n  } else {\n    if (n <= i) return copyToFrom(Array(n), 0, xs, 0, n);\n    var _ys = Array(n - 1);\n    for (var _j = 0; _j < i; ++_j) {\n      _ys[_j] = xs[_j];\n    }for (var _j2 = i + 1; _j2 < n; ++_j2) {\n      _ys[_j2 - 1] = xs[_j2];\n    }return _ys;\n  }\n});\n\nvar funIndex = /*#__PURE__*/lensFrom(getIndex, setIndex);\n\n//\n\nvar composedMiddle = function composedMiddle(o, r) {\n  return function (F, xi2yF) {\n    return xi2yF = r(F, xi2yF), function (x, i) {\n      return o(x, i, F, xi2yF);\n    };\n  };\n};\n\nfunction composed(oi0, os) {\n  var n = os.length - oi0;\n  if (n < 2) {\n    return n ? toFunction(os[oi0]) : identity;\n  } else {\n    var _last = toFunction(os[oi0 + --n]);\n    var r = function r(F, xi2yF) {\n      return function (x, i) {\n        return _last(x, i, F, xi2yF);\n      };\n    };\n    while (--n) {\n      r = composedMiddle(toFunction(os[oi0 + n]), r);\n    }var _first = toFunction(os[oi0]);\n    return function (x, i, F, xi2yF) {\n      return _first(x, i, F, r(F, xi2yF));\n    };\n  }\n}\n\nvar setU = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqOptic)))(function set(o, x, s) {\n  switch (typeof o) {\n    case 'string':\n      return setProp(o, x, s);\n    case 'number':\n      return setIndex(o, x, s);\n    case 'object':\n      return modifyComposed(o, 0, s, x);\n    default:\n      return o.length === 4 ? o(s, void 0, Identity, always(x)) : s;\n  }\n});\n\nvar modifyU = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqOptic)))(function modify(o, xi2x, s) {\n  switch (typeof o) {\n    case 'string':\n      return setProp(o, xi2x(getProp(o, s), o), s);\n    case 'number':\n      return setIndex(o, xi2x(getIndex(o, s), o), s);\n    case 'object':\n      return modifyComposed(o, xi2x, s);\n    default:\n      return o.length === 4 ? o(s, void 0, Identity, xi2x) : (xi2x(o(s, void 0), void 0), s);\n  }\n});\n\nvar modifyAsyncU = function modifyAsyncU(o, f, s) {\n  return returnAsync(toFunction(o)(s, void 0, IdentityAsync, f));\n};\n\nfunction makeIx(i) {\n  var ix = function ix(s, j) {\n    return ix.v = j, s;\n  };\n  ix.v = i;\n  return ix;\n}\n\nfunction getNestedU(l, s, j, ix) {\n  for (var n = l.length, o; j < n; ++j) {\n    switch (typeof (o = l[j])) {\n      case 'string':\n        s = getProp(ix.v = o, s);\n        break;\n      case 'number':\n        s = getIndex(ix.v = o, s);\n        break;\n      case 'object':\n        s = getNestedU(o, s, 0, ix);\n        break;\n      default:\n        s = o(s, ix.v, Constant, ix);\n    }\n  }return s;\n}\n\nvar getU = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqOptic)))(function (l, s) {\n  switch (typeof l) {\n    case 'string':\n      return getProp(l, s);\n    case 'number':\n      return getIndex(l, s);\n    case 'object':\n      for (var i = 0, n = l.length, o; i < n; ++i) {\n        switch (typeof (o = l[i])) {\n          case 'string':\n            s = getProp(o, s);\n            break;\n          case 'number':\n            s = getIndex(o, s);\n            break;\n          default:\n            return getNestedU(l, s, i, makeIx(l[i - 1]));\n        }\n      }return s;\n    default:\n      return l(s, void 0, Constant, id$1);\n  }\n});\n\nfunction modifyComposed(os, xi2y, x, y) {\n  var n = os.length;\n  var xs = Array(n);\n  for (var i = 0, o; i < n; ++i) {\n    xs[i] = x;\n    switch (typeof (o = os[i])) {\n      case 'string':\n        x = getProp(o, x);\n        break;\n      case 'number':\n        x = getIndex(o, x);\n        break;\n      default:\n        x = composed(i, os)(x, os[i - 1], Identity, xi2y || always(y));\n        n = i;\n        break;\n    }\n  }\n  if (n === os.length) x = xi2y ? xi2y(x, os[n - 1]) : y;\n  for (var _o; 0 <= --n;) {\n    x = isString(_o = os[n]) ? setProp(_o, x, xs[n]) : setIndex(_o, x, xs[n]);\n  }return x;\n}\n\n//\n\nvar lensU = function lens(get, set) {\n  return copyName(function (x, i, F, xi2yF) {\n    return F.map(function (y) {\n      return set(y, x, i);\n    }, xi2yF(get(x, i), i));\n  }, get);\n};\n\nvar isoU = function iso(bwd, fwd) {\n  return copyName(function (x, i, F, xi2yF) {\n    return F.map(fwd, xi2yF(bwd(x), i));\n  }, bwd);\n};\n\nvar stringIsoU = function stringIsoU(bwd, fwd) {\n  return isoU(expect(isString, bwd), expect(isString, fwd));\n};\n\nvar numberIsoU = function numberIsoU(bwd, fwd) {\n  return isoU(expect(isNumber, bwd), expect(isNumber, fwd));\n};\n\n//\n\nvar getPick = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (template, x) {\n  var r = void 0;\n  for (var k in template) {\n    var t = template[k];\n    var v = isObject(t) ? getPick(t, x) : getU(t, x);\n    if (void 0 !== v) {\n      if (!r) r = {};\n      r[k] = v;\n    }\n  }\n  return r;\n});\n\nvar reqTemplate = function reqTemplate(name) {\n  return function (template) {\n    if (!isObject(template)) errorGiven('`' + name + '` expects a plain Object template', template);\n  };\n};\n\nvar reqObject = function reqObject(msg) {\n  return function (value) {\n    if (!(void 0 === value || value instanceof Object)) errorGiven(msg, value);\n  };\n};\n\nvar setPick = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(1, ef(reqObject('`pick` must be set with undefined or an object'))))(function (template, value, x) {\n  for (var k in template) {\n    var v = value && value[k];\n    var t = template[k];\n    x = isObject(t) ? setPick(t, v, x) : setU(t, v, x);\n  }\n  return x;\n});\n\n//\n\nvar toObject$1 = function toObject$$1(x) {\n  return constructorOf(x) !== Object ? toObject(x) : x;\n};\n\n//\n\nvar identity = function identity(x, i, _F, xi2yF) {\n  return xi2yF(x, i);\n};\n\n//\n\nvar branchAssemble = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(res(freeze)))(function (ks) {\n  return function (xs) {\n    var r = {};\n    var i = ks.length;\n    while (i--) {\n      var v = xs[0];\n      if (void 0 !== v) {\n        r[ks[i]] = v;\n      }\n      xs = xs[1];\n    }\n    return r;\n  };\n});\n\nvar branchOr1LevelIdentity = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function (otherwise, k2o, xO, x, A, xi2yA) {\n    var y = fn$$1(otherwise, k2o, xO, x, A, xi2yA);\n    if (x !== y) freeze(y);\n    return y;\n  };\n})(function (otherwise, k2o, xO, x, A, xi2yA) {\n  var written = void 0;\n  var same = true;\n  var r = {};\n  for (var k in k2o) {\n    written = 1;\n    var _x2 = xO[k];\n    var y = k2o[k](_x2, k, A, xi2yA);\n    if (void 0 !== y) {\n      r[k] = y;\n      if (same) same = _x2 === y && (_x2 !== 0 || 1 / _x2 === 1 / y) || _x2 !== _x2 && y !== y;\n    } else {\n      same = false;\n    }\n  }\n  var t = written;\n  for (var _k in xO) {\n    if (void 0 === (t && k2o[_k])) {\n      written = 1;\n      var _x3 = xO[_k];\n      var _y = otherwise(_x3, _k, A, xi2yA);\n      if (void 0 !== _y) {\n        r[_k] = _y;\n        if (same) same = _x3 === _y && (_x3 !== 0 || 1 / _x3 === 1 / _y) || _x3 !== _x3 && _y !== _y;\n      } else {\n        same = false;\n      }\n    }\n  }\n  return written ? same && xO === x ? x : r : x;\n});\n\nvar branchOr1Level = function branchOr1Level(otherwise, k2o) {\n  return function (x, _i, A, xi2yA) {\n    var xO = x instanceof Object ? toObject$1(x) : object0;\n\n    if (Identity === A) {\n      return branchOr1LevelIdentity(otherwise, k2o, xO, x, A, xi2yA);\n    } else if (Select === A) {\n      for (var k in k2o) {\n        var y = k2o[k](xO[k], k, A, xi2yA);\n        if (void 0 !== y) return y;\n      }\n      for (var _k2 in xO) {\n        if (void 0 === k2o[_k2]) {\n          var _y2 = otherwise(xO[_k2], _k2, A, xi2yA);\n          if (void 0 !== _y2) return _y2;\n        }\n      }\n    } else {\n      var map = A.map,\n          ap = A.ap,\n          of = A.of;\n\n      var xsA = of(cpair);\n      var ks = [];\n      for (var _k3 in k2o) {\n        ks.push(_k3);\n        xsA = ap(map(cpair, xsA), k2o[_k3](xO[_k3], _k3, A, xi2yA));\n      }\n      var t = ks.length ? true : void 0;\n      for (var _k4 in xO) {\n        if (void 0 === (t && k2o[_k4])) {\n          ks.push(_k4);\n          xsA = ap(map(cpair, xsA), otherwise(xO[_k4], _k4, A, xi2yA));\n        }\n      }\n      return ks.length ? map(branchAssemble(ks), xsA) : of(x);\n    }\n  };\n};\n\nfunction branchOrU(otherwise, template) {\n  var k2o = create(null);\n  for (var k in template) {\n    var v = template[k];\n    k2o[k] = isObject(v) ? branchOrU(otherwise, v) : toFunction(v);\n  }\n  return branchOr1Level(otherwise, k2o);\n}\n\nvar replaced = function replaced(inn, out, x) {\n  return acyclicEqualsU(x, inn) ? out : x;\n};\n\nfunction findIndexHint(hint, xi2b, xs) {\n  var u = hint.hint;\n  var n = xs.length;\n  if (n <= u) u = n - 1;\n  if (u < 0) u = 0;\n  var d = u - 1;\n  for (; 0 <= d && u < n; ++u, --d) {\n    if (xi2b(xs[u], u, hint)) return u;\n    if (xi2b(xs[d], d, hint)) return d;\n  }\n  for (; u < n; ++u) {\n    if (xi2b(xs[u], u, hint)) return u;\n  }for (; 0 <= d; --d) {\n    if (xi2b(xs[d], d, hint)) return d;\n  }return n;\n}\n\nvar partitionIntoIndex = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : dep(function (_xi2b, _xs, ts, fs) {\n  return res(ef(function () {\n    freeze(ts);\n    freeze(fs);\n  }));\n}))(function (xi2b, xs, ts, fs) {\n  for (var i = 0, n = xs.length, x; i < n; ++i) {\n    (xi2b(x = xs[i], i) ? ts : fs).push(x);\n  }\n});\n\nvar fromReader = function fromReader(wi2x) {\n  return copyName(function (w, i, F, xi2yF) {\n    return F.map(always(w), xi2yF(wi2x(w, i), i));\n  }, wi2x);\n};\n\n//\n\nvar reValue = function reValue(m) {\n  return m[0];\n};\nvar reIndex = function reIndex(m) {\n  return m.index;\n};\nvar reLastIndex = function reLastIndex(m) {\n  return reIndex(m) + m[0].length;\n};\n\nvar reNext = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function (m, re) {\n    var res$$1 = fn$$1(m, re);\n    if ('' === res$$1) warn(reNext, '`matches(' + re + ')` traversal terminated due to empty match.  `matches` traversal shouldn\\'t be used with regular expressions that can produce empty matches.');\n    return res$$1;\n  };\n})(function (m, re) {\n  var lastIndex = re.lastIndex;\n  re.lastIndex = reLastIndex(m);\n  var n = re.exec(m.input);\n  re.lastIndex = lastIndex;\n  return n && n[0] && n;\n});\n\n//\n\nvar iterCollect = function iterCollect(s) {\n  return function (xs) {\n    return function (x) {\n      return [s, x, xs];\n    };\n  };\n};\n\nvar iterToArray = function iterToArray(xs) {\n  var ys = [];\n  while (iterCollect !== xs) {\n    ys.push(xs[0], xs[1]);\n    xs = xs[2];\n  }\n  return ys;\n};\n\nfunction iterSelect(xi2y, t, s) {\n  while (s = reNext(s, t)) {\n    var y = xi2y(reValue(s), reIndex(s));\n    if (void 0 !== y) return y;\n  }\n}\n\nfunction iterEager(map, ap, of, xi2yA, t, s) {\n  var r = of(iterCollect);\n  while (s = reNext(s, t)) {\n    r = ap(ap(map(iterCollect, of(s)), r), xi2yA(reValue(s), reIndex(s)));\n  }return r;\n}\n\n//\n\nvar keyed = /*#__PURE__*/isoU( /*#__PURE__*/expect( /*#__PURE__*/isInstanceOf(Object), /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freezeArrayOfObjects))(function keyed(x) {\n  x = toObject$1(x);\n  var es = [];\n  for (var key in x) {\n    es.push([key, x[key]]);\n  }return es;\n})), /*#__PURE__*/expect(isArray, /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (es) {\n  var o = {};\n  for (var i = 0, n = es.length; i < n; ++i) {\n    var entry = es[i];\n    if (entry.length === 2) o[entry[0]] = entry[1];\n  }\n  return o;\n})));\n\n//\n\nvar matchesJoin = function matchesJoin(input) {\n  return function (matchesIn) {\n    var result = '';\n    var lastIndex = 0;\n    var matches = iterToArray(matchesIn);\n    var n = matches.length;\n    for (var j = n - 2; j !== -2; j += -2) {\n      var m = matches[j];\n      result += input.slice(lastIndex, reIndex(m));\n      var s = matches[j + 1];\n      if (void 0 !== s) result += s;\n      lastIndex = reLastIndex(m);\n    }\n\n    result += input.slice(lastIndex);\n    return result;\n  };\n};\n\n//\n\nvar disjointBwd = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freezeObjectOfObjects))(function (groupOf, x) {\n  if (x instanceof Object) {\n    var y = {};\n    x = toObject$1(x);\n    for (var key in x) {\n      var group = groupOf(key);\n      var g = y[group];\n      if (undefined === g) y[group] = g = {};\n      g[key] = x[key];\n    }\n    return y;\n  }\n});\n\nvar disjointFwd = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(res(freeze)))(function (groupOf) {\n  return function (y) {\n    if (y instanceof Object) {\n      var x = {};\n      y = toObject$1(y);\n      for (var group in y) {\n        var g = y[group];\n        if (g instanceof Object) {\n          g = toObject$1(g);\n          for (var key in g) {\n            if (groupOf(key) === group) {\n              x[key] = g[key];\n            }\n          }\n        }\n      }\n      return x;\n    }\n  };\n});\n\n//\n\nvar eitherU = function eitherU(t, e) {\n  return function either(c) {\n    return function either(x, i, C, xi2yC) {\n      return (c(x, i) ? t : e)(x, i, C, xi2yC);\n    };\n  };\n};\n\nvar orElseU = function orElse(back, prim) {\n  prim = toFunction(prim);\n  back = toFunction(back);\n  return function orElse(x, i, C, xi2yC) {\n    return (isDefined$1(prim, x) ? prim : back)(x, i, C, xi2yC);\n  };\n};\n\nfunction zeroOp(y, i, C, xi2yC, x) {\n  var of = C.of;\n  return of ? of(y) : C.map(always(y), xi2yC(x, i));\n}\n\n//\n\nvar elemsI = function elemsI(xs, _i, A, xi2yA) {\n  return A === Identity ? mapPartialIndexU(xi2yA, xs, void 0) : A === Select ? selectInArrayLike(xi2yA, xs) : traversePartialIndex(A, xi2yA, xs, void 0);\n};\n\n//\n\nvar seq2U = function seq2U(l, r) {\n  return function (x, i, M, xi2yM) {\n    return M.chain(function (x) {\n      return r(x, i, M, xi2yM);\n    }, l(x, i, M, xi2yM));\n  };\n};\n\n//\n\nvar pickInAux = function pickInAux(t, k) {\n  return [k, pickIn(t)];\n};\n\n//\n\nvar condOfDefault = /*#__PURE__*/always(zeroOp);\nvar condOfCase = function condOfCase(p, o, r) {\n  return function (y, j) {\n    return p(y, j) ? o : r(y, j);\n  };\n};\n\n// Auxiliary\n\nvar seemsArrayLike = function seemsArrayLike(x) {\n  return x instanceof Object && (x = x.length, x === x >> 0 && 0 <= x) || isString(x);\n};\n\n// Internals\n\nvar Identity = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : freeze)({\n  map: applyU,\n  of: id$1,\n  ap: applyU,\n  chain: applyU\n});\n\nvar IdentityAsync = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : freeze)({\n  map: chainAsync,\n  ap: function ap(xyP, xP) {\n    return chainAsync(function (xP) {\n      return chainAsync(function (xyP) {\n        return xyP(xP);\n      }, xyP);\n    }, xP);\n  },\n  of: id$1,\n  chain: chainAsync\n});\n\nvar Constant = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : freeze)({\n  map: sndU\n});\n\nvar toFunction = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqOptic)))(function toFunction(o) {\n  switch (typeof o) {\n    case 'string':\n      return funProp(o);\n    case 'number':\n      return funIndex(o);\n    case 'object':\n      return composed(0, o);\n    default:\n      return o.length === 4 ? o : fromReader(o);\n  }\n});\n\n// Operations on optics\n\nvar assign$1 = /*#__PURE__*/curry(function assign$$1(o, x, s) {\n  return setU([o, propsOf(x)], x, s);\n});\n\nvar modify = /*#__PURE__*/curry(modifyU);\n\nvar modifyAsync = /*#__PURE__*/curry(modifyAsyncU);\n\nvar remove = /*#__PURE__*/curry(function remove(o, s) {\n  return setU(o, void 0, s);\n});\n\nvar set = /*#__PURE__*/curry(setU);\n\nvar transform = /*#__PURE__*/curry(function transform(o, s) {\n  return modifyU(o, id$1, s);\n});\n\nvar transformAsync = /*#__PURE__*/curry(function transformAsync(o, s) {\n  return modifyAsyncU(o, id$1, s);\n});\n\nvar traverse = /*#__PURE__*/curry(traverseU);\n\n// Nesting\n\nfunction compose() {\n  var n = arguments.length;\n  if (n < 2) {\n    return n ? arguments[0] : identity;\n  } else {\n    var os = Array(n);\n    while (n--) {\n      os[n] = arguments[n];\n    }return os;\n  }\n}\n\nfunction flat() {\n  var r = [flatten];\n  for (var i = 0, n = arguments.length; i < n; ++i) {\n    r.push(arguments[i], flatten);\n  }return r;\n}\n\n// Recursing\n\nfunction lazy(o2o) {\n  var _memo = function memo(x, i, C, xi2yC) {\n    return (_memo = toFunction(o2o(rec)))(x, i, C, xi2yC);\n  };\n  function rec(x, i, C, xi2yC) {\n    return _memo(x, i, C, xi2yC);\n  }\n  return rec;\n}\n\n// Adapting\n\nvar choices = function choices(o) {\n  for (var _len = arguments.length, os = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    os[_key - 1] = arguments[_key];\n  }\n\n  return os.length ? orElseU(os.reduceRight(orElseU), o) : o;\n};\n\nvar choose = function choose(xiM2o) {\n  return copyName(function (x, i, C, xi2yC) {\n    return toFunction(xiM2o(x, i))(x, i, C, xi2yC);\n  }, xiM2o);\n};\n\nvar cond = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function cond() {\n    var pair = tup(ef(reqFn), ef(reqOptic));\n\n    for (var _len2 = arguments.length, cs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      cs[_key2] = arguments[_key2];\n    }\n\n    arr(pair)(cs.slice(0, -1));\n    arr(or(tup(ef(reqOptic)), pair))(cs.slice(-1));\n    return fn$$1.apply(undefined, cs);\n  };\n})(function cond() {\n  var n = arguments.length;\n  var r = zero;\n  while (n--) {\n    var c = arguments[n];\n    r = c.length < 2 ? toFunction(c[0]) : eitherU(toFunction(c[1]), r)(c[0]);\n  }\n  return r;\n});\n\nvar condOf = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function condOf(of) {\n    var pair = tup(ef(reqFn), ef(reqOptic));\n\n    for (var _len3 = arguments.length, cs = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      cs[_key3 - 1] = arguments[_key3];\n    }\n\n    arr(pair)(cs.slice(0, -1));\n    arr(or(tup(ef(reqOptic)), pair))(cs.slice(-1));\n    return fn$$1.apply(undefined, [of].concat(cs));\n  };\n})(function condOf(of) {\n  of = toFunction(of);\n  var op = condOfDefault;\n  var n = arguments.length;\n  while (--n) {\n    var c = arguments[n];\n    op = c.length === 1 ? always(toFunction(c[0])) : condOfCase(c[0], toFunction(c[1]), op);\n  }\n  return function condOf(x, i, C, xi2yC) {\n    return of(x, i, Constant, op)(x, i, C, xi2yC);\n  };\n});\n\nvar ifElse = /*#__PURE__*/curry(function ifElse(c, t, e) {\n  return eitherU(toFunction(t), toFunction(e))(c);\n});\n\nvar iftes = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function iftes(_c, _t) {\n    warn(iftes, '`iftes` has been obsoleted.  Use `ifElse` or `cond` instead.  See CHANGELOG for details.');\n    return fn$$1.apply(null, arguments);\n  };\n})(function iftes(_c, _t) {\n  var n = arguments.length;\n  var r = n & 1 ? toFunction(arguments[--n]) : zero;\n  while (0 <= (n -= 2)) {\n    r = eitherU(toFunction(arguments[n + 1]), r)(arguments[n]);\n  }return r;\n});\n\nvar orElse = /*#__PURE__*/curry(orElseU);\n\n// Querying\n\nvar chain = /*#__PURE__*/curry(function chain(xi2yO, xO) {\n  return [xO, choose(function (xM, i) {\n    return void 0 !== xM ? xi2yO(xM, i) : zero;\n  })];\n});\n\nvar choice = function choice() {\n  for (var _len4 = arguments.length, os = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    os[_key4] = arguments[_key4];\n  }\n\n  return os.reduceRight(orElseU, zero);\n};\n\nvar unless = /*#__PURE__*/eitherU(zeroOp, identity);\n\nvar when = /*#__PURE__*/eitherU(identity, zeroOp);\n\nvar optional = /*#__PURE__*/when(isDefined);\n\nvar zero = function zero(x, i, C, xi2yC) {\n  return zeroOp(x, i, C, xi2yC);\n};\n\n// Transforming\n\nvar assignOp = function assignOp(x) {\n  return [propsOf(x), setOp(x)];\n};\n\nvar modifyOp = function modifyOp(xi2y) {\n  return function modifyOp(x, i, C, xi2yC) {\n    return zeroOp(x = xi2y(x, i), i, C, xi2yC, x);\n  };\n};\n\nvar setOp = function setOp(y) {\n  return function setOp(_x, i, C, xi2yC) {\n    return zeroOp(y, i, C, xi2yC, y);\n  };\n};\n\nvar removeOp = /*#__PURE__*/setOp();\n\n// Debugging\n\nfunction log() {\n  var show = curry(function log(dir, x) {\n    console.log.apply(console, copyToFrom([], 0, arguments, 0, arguments.length).concat([dir, x]));\n    return x;\n  });\n  return isoU(show('get'), show('set'));\n}\n\n// Sequencing\n\nvar seq = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function seq() {\n    return par(2, ef(reqMonad('seq')))(fn$$1.apply(undefined, arguments));\n  };\n})(function seq() {\n  var n = arguments.length;\n  var r = zero;\n  if (n) {\n    r = toFunction(arguments[--n]);\n    while (n) {\n      r = seq2U(toFunction(arguments[--n]), r);\n    }\n  }\n  return r;\n});\n\n// Creating new traversals\n\nvar branchOr = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(1, ef(reqTemplate('branchOr'))))( /*#__PURE__*/curryN(2, function branchOr(otherwise) {\n  otherwise = toFunction(otherwise);\n  return function branchOr(template) {\n    return branchOrU(otherwise, template);\n  };\n}));\n\nvar branch = /*#__PURE__*/branchOr(zero);\n\nfunction branches() {\n  var n = arguments.length;\n  var template = {};\n  for (var i = 0; i < n; ++i) {\n    template[arguments[i]] = identity;\n  }return branch(template);\n}\n\n// Traversals and combinators\n\nvar elems = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(2, ef(reqApplicative('elems'))))(function elems(xs, i, A, xi2yA) {\n  return seemsArrayLike(xs) ? elemsI(xs, i, A, xi2yA) : A.of(xs);\n});\n\nvar elemsTotal = function elemsTotal(xs, i, A, xi2yA) {\n  return seemsArrayLike(xs) ? A === Identity ? mapPartialIndexU(xi2yA, xs, mapPartialIndexU) : A === Select ? selectInArrayLike(xi2yA, xs) : traversePartialIndex(A, xi2yA, xs, traversePartialIndex) : A.of(xs);\n};\n\nvar entries = /*#__PURE__*/setName( /*#__PURE__*/toFunction([keyed, elems]), 'entries');\n\nvar keys$1 = /*#__PURE__*/setName( /*#__PURE__*/toFunction([keyed, elems, 0]), 'keys');\n\nvar matches = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : dep(function (re) {\n  return re.global ? res(par(2, ef(reqApplicative('matches', re)))) : id$1;\n}))(function matches(re) {\n  return function matches(x, _i, C, xi2yC) {\n    if (isString(x)) {\n      var map = C.map;\n\n      if (re.global) {\n        var m0 = [''];\n        m0.input = x;\n        m0.index = 0;\n        if (Select === C) {\n          return iterSelect(xi2yC, re, m0);\n        } else {\n          var ap = C.ap,\n              of = C.of;\n\n          return map(matchesJoin(x), iterEager(map, ap, of, xi2yC, re, m0));\n        }\n      } else {\n        var m = x.match(re);\n        if (m) return map(function (y) {\n          return x.replace(re, void 0 !== y ? y : '');\n        }, xi2yC(m[0], reIndex(m)));\n      }\n    }\n    return zeroOp(x, void 0, C, xi2yC);\n  };\n});\n\nvar values = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(2, ef(reqApplicative('values'))))( /*#__PURE__*/setName( /*#__PURE__*/branchOr1Level(identity, protoless0), 'values'));\n\nvar children = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(2, ef(reqApplicative('children'))))(function children(x, i, C, xi2yC) {\n  return isArray(x) ? elemsI(x, i, C, xi2yC) : isObject(x) ? values(x, i, C, xi2yC) : C.of(x);\n});\n\nvar flatten = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(2, ef(reqApplicative('flatten'))))(function flatten(x, i, C, xi2yC) {\n  var rec = function rec(x, i) {\n    return isArray(x) ? elemsI(x, i, C, rec) : void 0 !== x ? xi2yC(x, i) : C.of(x);\n  };\n  return rec(x, i);\n});\n\nfunction query() {\n  var r = [];\n  for (var i = 0, n = arguments.length; i < n; ++i) {\n    var o = toFunction(arguments[i]);\n    r.push(satisfying(isDefined$1(o)), o);\n  }\n  return r;\n}\n\nvar satisfying = function satisfying(p) {\n  return function satisfying(x, i, C, xi2yC) {\n    var rec = function rec(x, i) {\n      return p(x, i) ? xi2yC(x, i) : children(x, i, C, rec);\n    };\n    return rec(x, i);\n  };\n};\n\nvar leafs = /*#__PURE__*/satisfying(function (x) {\n  return void 0 !== x && !isArray(x) && !isObject(x);\n});\n\n// Folds over traversals\n\nvar all = /*#__PURE__*/curry(function all(xi2b, t, s) {\n  return !traverseU(Select, function (x, i) {\n    if (!xi2b(x, i)) return true;\n  }, t, s);\n});\n\nvar and$1 = /*#__PURE__*/all(id$1);\n\nvar any = /*#__PURE__*/curry(function any(xi2b, t, s) {\n  return !!traverseU(Select, function (x, i) {\n    if (xi2b(x, i)) return true;\n  }, t, s);\n});\n\nvar collectAs = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? curry : res(freeze))(function collectAs(xi2y, t, s) {\n  var results = [];\n  traverseU(Select, function (x, i) {\n    var y = xi2y(x, i);\n    if (void 0 !== y) results.push(y);\n  }, t, s);\n  return results;\n});\n\nvar collect = /*#__PURE__*/collectAs(id$1);\n\nvar concatAs = /*#__PURE__*/mkTraverse(id$1, function concatAs(m) {\n  return ConcatOf(m.concat, m.empty());\n});\n\nvar concat = /*#__PURE__*/concatAs(id$1);\n\nvar countIf = /*#__PURE__*/curry(function countIf(p, t, s) {\n  return traverseU(Sum, function (x, i) {\n    return p(x, i) ? 1 : 0;\n  }, t, s);\n});\n\nvar count = /*#__PURE__*/countIf(isDefined);\n\nvar countsAs = /*#__PURE__*/curry(function countsAs(xi2k, t, s) {\n  var counts = new Map();\n  traverseU(Select, function (x, i) {\n    var k = xi2k(x, i);\n    var n = counts.get(k);\n    counts.set(k, void 0 !== n ? n + 1 : 1);\n  }, t, s);\n  return counts;\n});\n\nvar counts = /*#__PURE__*/countsAs(id$1);\n\nvar foldl = /*#__PURE__*/curry(function foldl(f, r, t, s) {\n  traverseU(Select, function (x, i) {\n    r = f(r, x, i);\n  }, t, s);\n  return r;\n});\n\nvar foldr = /*#__PURE__*/curry(function foldr(f, r, t, s) {\n  var is = [];\n  var xs = [];\n  traverseU(Select, function (x, i) {\n    xs.push(x);\n    is.push(i);\n  }, t, s);\n  for (var i = xs.length - 1; 0 <= i; --i) {\n    r = f(r, xs[i], is[i]);\n  }return r;\n});\n\nvar forEach = /*#__PURE__*/curry(function forEach(f, t, s) {\n  return traverseU(Select, function (x, i) {\n    f(x, i);\n  }, t, s);\n});\n\nvar forEachWith = /*#__PURE__*/curry(function forEachWith(newC, ef$$1, t, s) {\n  var c = newC();\n  traverseU(Select, function (x, i) {\n    ef$$1(c, x, i);\n  }, t, s);\n  return c;\n});\n\nvar isDefined$1 = /*#__PURE__*/curry(function isDefined$$1(t, s) {\n  return void 0 !== traverseU(Select, id$1, t, s);\n});\n\nvar isEmpty = /*#__PURE__*/curry(function isEmpty(t, s) {\n  return !traverseU(Select, always(true), t, s);\n});\n\nvar joinAs = /*#__PURE__*/mkTraverse(toStringPartial, /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqString('`join` and `joinAs` expect a string delimiter'))))(function joinAs(d) {\n  return ConcatOf(function (x, y) {\n    return void 0 !== x ? void 0 !== y ? x + d + y : x : y;\n  });\n}));\n\nvar join = /*#__PURE__*/joinAs(id$1);\n\nvar maximumBy = /*#__PURE__*/mumBy(gtU);\n\nvar maximum = /*#__PURE__*/maximumBy(id$1);\n\nvar meanAs = /*#__PURE__*/curry(function meanAs(xi2y, t, s) {\n  var sum = 0;\n  var num = 0;\n  traverseU(Select, function (x, i) {\n    var y = xi2y(x, i);\n    if (void 0 !== y) {\n      num += 1;\n      sum += y;\n    }\n  }, t, s);\n  return sum / num;\n});\n\nvar mean = /*#__PURE__*/meanAs(id$1);\n\nvar minimumBy = /*#__PURE__*/mumBy(ltU);\n\nvar minimum = /*#__PURE__*/minimumBy(id$1);\n\nvar none = /*#__PURE__*/curry(function none(xi2b, t, s) {\n  return !traverseU(Select, function (x, i) {\n    if (xi2b(x, i)) return true;\n  }, t, s);\n});\n\nvar or$1 = /*#__PURE__*/any(id$1);\n\nvar productAs = /*#__PURE__*/traverse( /*#__PURE__*/ConcatOf(multiplyU, 1));\n\nvar product = /*#__PURE__*/productAs( /*#__PURE__*/unto(1));\n\nvar selectAs = /*#__PURE__*/traverse(Select);\n\nvar select = /*#__PURE__*/selectAs(id$1);\n\nvar sumAs = /*#__PURE__*/traverse(Sum);\n\nvar sum = /*#__PURE__*/sumAs(unto0);\n\n// Operations on lenses\n\nfunction get(l, s) {\n  return 1 < arguments.length ? getU(l, s) : function (s) {\n    return getU(l, s);\n  };\n}\n\n// Creating new lenses\n\nvar lens = /*#__PURE__*/curry(lensU);\n\nvar setter = /*#__PURE__*/lens(id$1);\n\nvar foldTraversalLens = /*#__PURE__*/curry(function foldTraversalLens(fold, traversal) {\n  return lensU(fold(traversal), set(traversal));\n});\n\n// Enforcing invariants\n\nfunction defaults(out) {\n  function o2u(x) {\n    return replaced(out, void 0, x);\n  }\n  return function defaults(x, i, F, xi2yF) {\n    return F.map(o2u, xi2yF(void 0 !== x ? x : out, i));\n  };\n}\n\nvar define = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function define(inn) {\n    var res$$1 = fn$$1(inn);\n    if (isEmptyArrayStringOrObject(inn)) return toFunction([isoU(warnEmpty(fn$$1, inn, 'define'), id$1), res$$1, isoU(id$1, warnEmpty(define, inn, 'define'))]);else return res$$1;\n  };\n})(function define(v) {\n  var untoV = unto(v);\n  return function define(x, i, F, xi2yF) {\n    return F.map(untoV, xi2yF(void 0 !== x ? x : v, i));\n  };\n});\n\nvar normalize = function normalize(xi2x) {\n  return [reread(xi2x), rewrite(xi2x)];\n};\n\nvar required = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function required(inn) {\n    var res$$1 = fn$$1(inn);\n    if (isEmptyArrayStringOrObject(inn)) return toFunction([res$$1, isoU(id$1, warnEmpty(required, inn, 'required'))]);else return res$$1;\n  };\n})(function required(inn) {\n  return replace$1(inn, void 0);\n});\n\nvar reread = function reread(xi2x) {\n  return function (x, i, _F, xi2yF) {\n    return xi2yF(void 0 !== x ? xi2x(x, i) : x, i);\n  };\n};\n\nvar rewrite = function rewrite(yi2y) {\n  return function (x, i, F, xi2yF) {\n    return F.map(function (y) {\n      return void 0 !== y ? yi2y(y, i) : y;\n    }, xi2yF(x, i));\n  };\n};\n\n// Lensing arrays\n\nfunction append(xs, _, F, xi2yF) {\n  var i = seemsArrayLike(xs) ? xs.length : 0;\n  return F.map(function (x) {\n    return setIndex(i, x, xs);\n  }, xi2yF(void 0, i));\n}\n\nvar filter = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(function (lens) {\n  return toFunction([lens, isoU(id$1, ef(reqMaybeArray('`filter` must be set with undefined or an array-like object')))]);\n}))(function filter(xi2b) {\n  return function filter(xs, i, F, xi2yF) {\n    var ts = void 0;\n    var fs = array0;\n    if (seemsArrayLike(xs)) partitionIntoIndex(xi2b, xs, ts = [], fs = []);\n    return F.map(function (ts) {\n      var tsN = ts ? ts.length : 0;\n      var fsN = fs.length;\n      var n = tsN + fsN;\n      return n === fsN ? fs : copyToFrom(copyToFrom(Array(n), 0, ts, 0, tsN), tsN, fs, 0, fsN);\n    }, xi2yF(ts, i));\n  };\n});\n\nfunction find(xih2b) {\n  var hint = arguments.length > 1 ? arguments[1] : { hint: 0 };\n  return function find(xs, _i, F, xi2yF) {\n    var ys = seemsArrayLike(xs) ? xs : '';\n    var i = hint.hint = findIndexHint(hint, xih2b, ys);\n    return F.map(function (v) {\n      return setIndex(i, v, ys);\n    }, xi2yF(ys[i], i));\n  };\n}\n\nfunction findWith(o) {\n  var oo = toFunction(o);\n  var p = isDefined$1(oo);\n  return [arguments.length > 1 ? find(p, arguments[1]) : find(p), oo];\n}\n\nvar first = 0;\n\nvar index = process.env.NODE_ENV !== 'production' ? /*#__PURE__*/ef(reqIndex) : id$1;\n\nvar last = /*#__PURE__*/choose(function last(maybeArray) {\n  return seemsArrayLike(maybeArray) && maybeArray.length ? maybeArray.length - 1 : 0;\n});\n\nvar prefix = function prefix(n) {\n  return slice(0, n);\n};\n\nvar slice = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? curry : res(function (lens) {\n  return toFunction([lens, isoU(id$1, ef(reqMaybeArray('`slice` must be set with undefined or an array-like object')))]);\n}))(function slice(begin, end) {\n  return function slice(xs, i, F, xsi2yF) {\n    var seems = seemsArrayLike(xs);\n    var xsN = seems && xs.length;\n    var b = sliceIndex(0, xsN, 0, begin);\n    var e = sliceIndex(b, xsN, xsN, end);\n    return F.map(function (zs) {\n      var zsN = zs ? zs.length : 0;\n      var bPzsN = b + zsN;\n      var n = xsN - e + bPzsN;\n      return copyToFrom(copyToFrom(copyToFrom(Array(n), 0, xs, 0, b), b, zs, 0, zsN), bPzsN, xs, e, xsN);\n    }, xsi2yF(seems ? copyToFrom(Array(Math.max(0, e - b)), 0, xs, b, e) : void 0, i));\n  };\n});\n\nvar suffix = function suffix(n) {\n  return slice(0 === n ? Infinity : !n ? 0 : -n, void 0);\n};\n\n// Lensing objects\n\nvar pickIn = function pickIn(t) {\n  return isObject(t) ? pick(modify(values, pickInAux, t)) : t;\n};\n\nvar prop = process.env.NODE_ENV === 'production' ? id$1 : function (x) {\n  if (!isString(x)) errorGiven('`prop` expects a string', x);\n  return x;\n};\n\nfunction props() {\n  var n = arguments.length;\n  var template = {};\n  for (var i = 0, k; i < n; ++i) {\n    template[k = arguments[i]] = k;\n  }return pick(template);\n}\n\nvar propsOf = function propsOf(o) {\n  return props.apply(null, keys(o));\n};\n\nfunction removable() {\n  for (var _len5 = arguments.length, ps = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    ps[_key5] = arguments[_key5];\n  }\n\n  function drop(y) {\n    if (!(y instanceof Object)) return y;\n    for (var i = 0, n = ps.length; i < n; ++i) {\n      if (hasU(ps[i], y)) return y;\n    }\n  }\n  return function (x, i, F, xi2yF) {\n    return F.map(drop, xi2yF(x, i));\n  };\n}\n\n// Providing defaults\n\nvar valueOr = function valueOr(v) {\n  return function (x, i, _F, xi2yF) {\n    return xi2yF(x != null ? x : v, i);\n  };\n};\n\n// Transforming data\n\nvar pick = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqTemplate('pick'))))(function pick(template) {\n  return function (x, i, F, xi2yF) {\n    return F.map(function (v) {\n      return setPick(template, v, x);\n    }, xi2yF(getPick(template, x), i));\n  };\n});\n\nvar replace$1 = /*#__PURE__*/curry(function replace$$1(inn, out) {\n  function o2i(x) {\n    return replaced(out, inn, x);\n  }\n  return function replace$$1(x, i, F, xi2yF) {\n    return F.map(o2i, xi2yF(replaced(inn, out, x), i));\n  };\n});\n\n// Operations on isomorphisms\n\nfunction getInverse(o, s) {\n  return 1 < arguments.length ? setU(o, s, void 0) : function (s) {\n    return setU(o, s, void 0);\n  };\n}\n\n// Creating new isomorphisms\n\nvar iso = /*#__PURE__*/curry(isoU);\n\n// Isomorphism combinators\n\nvar array = function array(elem) {\n  var fwd = getInverse(elem);\n  var bwd = get(elem);\n  var mapFwd = function mapFwd(x) {\n    return mapIfArrayLike(fwd, x);\n  };\n  return function (x, i, F, xi2yF) {\n    return F.map(mapFwd, xi2yF(mapIfArrayLike(bwd, x), i));\n  };\n};\n\nvar inverse = function inverse(iso) {\n  return function (x, i, F, xi2yF) {\n    return F.map(function (x) {\n      return getU(iso, x);\n    }, xi2yF(setU(iso, x, void 0), i));\n  };\n};\n\n// Basic isomorphisms\n\nvar complement = /*#__PURE__*/isoU(notPartial, notPartial);\n\nvar is = function is(v) {\n  return isoU(function is(x) {\n    return acyclicEqualsU(v, x);\n  }, function (b) {\n    return true === b ? v : void 0;\n  });\n};\n\n// Array isomorphisms\n\nvar indexed = /*#__PURE__*/isoU( /*#__PURE__*/expect(seemsArrayLike, /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freezeArrayOfObjects))(function indexed(xs) {\n  var n = xs.length;\n  var xis = Array(n);\n  for (var i = 0; i < n; ++i) {\n    xis[i] = [i, xs[i]];\n  }return xis;\n})), /*#__PURE__*/expect(isArray, /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (xis) {\n  var n = xis.length;\n  var xs = Array(n);\n  for (var i = 0; i < n; ++i) {\n    var xi = xis[i];\n    if (xi.length === 2) xs[xi[0]] = xi[1];\n  }\n  n = xs.length;\n  var j = 0;\n  for (var _i3 = 0; _i3 < n; ++_i3) {\n    var x = xs[_i3];\n    if (void 0 !== x) {\n      if (_i3 !== j) xs[j] = x;\n      ++j;\n    }\n  }\n  xs.length = j;\n  return xs;\n})));\n\nvar reverse = /*#__PURE__*/isoU(rev, rev);\n\nvar singleton = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (iso) {\n  return copyName(toFunction([isoU(id$1, freeze), iso]), iso);\n})(function singleton(x, i, F, xi2yF) {\n  return F.map(singletonPartial, xi2yF((x instanceof Object || isString(x)) && x.length === 1 ? x[0] : void 0, i));\n});\n\n// Object isomorphisms\n\nvar disjoint = function disjoint(groupOf) {\n  return function disjoint(x, i, F, xi2yF) {\n    var fwd = disjointFwd(groupOf);\n    return F.map(fwd, xi2yF(disjointBwd(groupOf, x), i));\n  };\n};\n\n// Standard isomorphisms\n\nvar uri = /*#__PURE__*/stringIsoU(decodeURI, encodeURI);\n\nvar uriComponent = /*#__PURE__*/stringIsoU(decodeURIComponent, encodeURIComponent);\n\nvar json = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(function (iso) {\n  return toFunction([iso, isoU(deepFreeze, id$1)]);\n}))(function json(options) {\n  var _ref = options || object0,\n      reviver = _ref.reviver,\n      replacer = _ref.replacer,\n      space = _ref.space;\n\n  return isoU(expect(isString, function (text) {\n    return JSON.parse(text, reviver);\n  }), expect(isDefined, function (value) {\n    return JSON.stringify(value, replacer, space);\n  }));\n});\n\n// String isomorphisms\n\nvar dropPrefix = function dropPrefix(pfx) {\n  return stringIsoU(function dropPrefix(x) {\n    return x.startsWith(pfx) ? x.slice(pfx.length) : undefined;\n  }, function (x) {\n    return pfx + x;\n  });\n};\n\nvar dropSuffix = function dropSuffix(sfx) {\n  return stringIsoU(function dropSuffix(x) {\n    return x.endsWith(sfx) ? x.slice(0, x.length - sfx.length) : undefined;\n  }, function (x) {\n    return x + sfx;\n  });\n};\n\nvar replaces = /*#__PURE__*/curry(function replaces(i, o) {\n  return stringIsoU(replace(toRegExpU(i, 'g'), o), replace(toRegExpU(o, 'g'), i));\n});\n\nvar split = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function split(_sep) {\n    return toFunction([fn$$1.apply(null, arguments), isoU(freeze, id$1)]);\n  };\n})(function split(sep) {\n  var re = arguments.length > 1 ? arguments[1] : sep;\n  return isoU(expect(isString, function (x) {\n    return x.split(re);\n  }), expect(isArray, function (xs) {\n    return xs.join(sep);\n  }));\n});\n\nvar uncouple = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function uncouple(_sep) {\n    return toFunction([fn$$1.apply(null, arguments), isoU(freeze, id$1)]);\n  };\n})(function uncouple(sep) {\n  var re = toRegExpU(arguments.length > 1 ? arguments[1] : sep, '');\n  return isoU(expect(isString, function (x) {\n    var m = re.exec(x);\n    return m ? [x.slice(0, reIndex(m)), x.slice(reLastIndex(m))] : [x, ''];\n  }), function (kv) {\n    if (isArray(kv) && kv.length === 2) {\n      var k = kv[0];\n      var v = kv[1];\n      return v ? k + sep + v : k;\n    }\n  });\n});\n\n// Arithmetic isomorphisms\n\nvar add$1 = function add$$1(c) {\n  return numberIsoU(add(c), add(-c));\n};\nvar divide = function divide(c) {\n  return numberIsoU(divideBy(c), multiply(c));\n};\nvar multiply$1 = function multiply$$1(c) {\n  return numberIsoU(multiply(c), divideBy(c));\n};\nvar negate$1 = /*#__PURE__*/numberIsoU(negate, negate);\nvar subtract = function subtract(c) {\n  return numberIsoU(add(-c), add(c));\n};\n\n// Interop\n\nvar pointer = function pointer(s) {\n  if (s[0] === '#') s = getU(uriComponent, s);\n  var ts = s.split('/');\n  var n = ts.length;\n  for (var i = 1; i < n; ++i) {\n    var t = ts[i];\n    ts[i - 1] = /^(0|[1-9]\\d*)$/.test(t) ? ifElse(isArrayOrPrimitive, Number(t), t) : '-' === t ? ifElse(isArrayOrPrimitive, append, t) : t.replace('~1', '/').replace('~0', '~');\n  }\n  ts.length = n - 1;\n  return ts;\n};\n\nexport { seemsArrayLike, Identity, IdentityAsync, Constant, toFunction, assign$1 as assign, modify, modifyAsync, remove, set, transform, transformAsync, traverse, compose, flat, lazy, choices, choose, cond, condOf, ifElse, iftes, orElse, chain, choice, unless, when, optional, zero, assignOp, modifyOp, setOp, removeOp, log, seq, branchOr, branch, branches, elems, elemsTotal, entries, keys$1 as keys, matches, values, children, flatten, query, satisfying, leafs, all, and$1 as and, any, collectAs, collect, concatAs, concat, countIf, count, countsAs, counts, foldl, foldr, forEach, forEachWith, isDefined$1 as isDefined, isEmpty, joinAs, join, maximumBy, maximum, meanAs, mean, minimumBy, minimum, none, or$1 as or, productAs, product, selectAs, select, sumAs, sum, get, lens, setter, foldTraversalLens, defaults, define, normalize, required, reread, rewrite, append, filter, find, findWith, first, index, last, prefix, slice, suffix, pickIn, prop, props, propsOf, removable, valueOr, pick, replace$1 as replace, getInverse, iso, array, inverse, complement, identity, is, indexed, reverse, singleton, disjoint, keyed, uri, uriComponent, json, dropPrefix, dropSuffix, replaces, split, uncouple, add$1 as add, divide, multiply$1 as multiply, negate$1 as negate, subtract, pointer };\n","import {StreamSink} from \"sodiumjs\";\n\nexport const sBallStart_Sink = new StreamSink<void>();\nexport const sBallStop_Sink = new StreamSink<void>();\n\n","import {quat} from \"gl-matrix\";\nimport * as L from \"partial.lenses\";\nimport {GltfScene, Camera, NumberArray, gltf_updateNodeTransforms} from \"pure3d\";\nimport {World} from \"types/World-Types\";\nimport {S} from \"utils/Utils\";\n\n//Lenses\nconst NODES = \"nodes\";\nconst TRANSFORM = \"transform\";\nconst TRS = \"trs\";\nconst TRANSLATION = \"translation\";\nconst CAMERA = \"camera\";\nconst SCENES = \"scenes\";\n\n//Functions - triggered from FRP\nexport const setCamera = ({camera}:{camera: Camera}) => (world:World):World => \n    mapScenes (L.set(CAMERA) (camera)) (world);\n\nexport const setBallTranslationY = (n:number) => (world:World):World => {\n    return L.set([SCENES, 0, NODES, 0, TRANSFORM, TRS, TRANSLATION, 1]) (n) (world);\n}\n\n//Additional functions\nexport const updateTransforms = (world:World):World => {\n    return mapScenes\n        (scene => L.set \n            (NODES)\n            (gltf_updateNodeTransforms \n                ({\n                    updateLocal: true,\n                    updateModel: true,\n                    updateView: true,\n                    camera: scene.camera\n                })\n                (scene.nodes)\n            )\n            (scene)\n        )\n        (world);\n}\n\n//Internal helpers\n\nconst mapScenes = (fn:(scene:GltfScene) => GltfScene) => (world:World):World => \n    L.set   \n        (SCENES) \n        (S.map\n            (fn)\n            (world.scenes)\n        )\n        (world);\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dictionary_1 = require(\"./Dictionary\");\nvar util = require(\"./util\");\nvar FactoryDictionary = /** @class */ (function (_super) {\n    __extends(FactoryDictionary, _super);\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>The default factory function should return a new object of the provided\n     * type. Example:</p>\n     * <pre>\n     * function petFactory() {\n     *  return new Pet();\n     * }\n     * </pre>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function():V=} defaultFactoryFunction function used to create a\n     * default object.\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function FactoryDictionary(defaultFactoryFunction, toStrFunction) {\n        var _this = _super.call(this, toStrFunction) || this;\n        _this.defaultFactoryFunction = defaultFactoryFunction;\n        return _this;\n    }\n    /**\n     * Associates the specified default value with the specified key in this dictionary,\n     * if it didn't contain the key yet. If the key existed, the existing value will be used.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} defaultValue default value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or the default value,\n     * if the key didn't exist yet.\n     */\n    FactoryDictionary.prototype.setDefault = function (key, defaultValue) {\n        var currentValue = _super.prototype.getValue.call(this, key);\n        if (util.isUndefined(currentValue)) {\n            this.setValue(key, defaultValue);\n            return defaultValue;\n        }\n        return currentValue;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns a default value created by the factory passed in the constructor,\n     * if this dictionary contains no mapping for this key. The missing key will\n     * automatically be added to the dictionary.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * a default value if the map contains no mapping for this key.\n     */\n    FactoryDictionary.prototype.getValue = function (key) {\n        return this.setDefault(key, this.defaultFactoryFunction());\n    };\n    return FactoryDictionary;\n}(Dictionary_1.default));\nexports.default = FactoryDictionary;\n//# sourceMappingURL=FactoryDictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar collections = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar Heap = /** @class */ (function () {\n    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function Heap(compareFunction) {\n        /**\n         * Array used to store the elements of the heap.\n         * @type {Array.<Object>}\n         * @private\n         */\n        this.data = [];\n        this.compare = compareFunction || collections.defaultCompare;\n    }\n    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    Heap.prototype.leftChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 1;\n    };\n    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    Heap.prototype.rightChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 2;\n    };\n    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    Heap.prototype.parentIndex = function (nodeIndex) {\n        return Math.floor((nodeIndex - 1) / 2);\n    };\n    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */\n    Heap.prototype.minIndex = function (leftChild, rightChild) {\n        if (rightChild >= this.data.length) {\n            if (leftChild >= this.data.length) {\n                return -1;\n            }\n            else {\n                return leftChild;\n            }\n        }\n        else {\n            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                return leftChild;\n            }\n            else {\n                return rightChild;\n            }\n        }\n    };\n    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    Heap.prototype.siftUp = function (index) {\n        var parent = this.parentIndex(index);\n        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n            arrays.swap(this.data, parent, index);\n            index = parent;\n            parent = this.parentIndex(index);\n        }\n    };\n    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */\n    Heap.prototype.siftDown = function (nodeIndex) {\n        //smaller child index\n        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n            arrays.swap(this.data, min, nodeIndex);\n            nodeIndex = min;\n            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        }\n    };\n    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */\n    Heap.prototype.peek = function () {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */\n    Heap.prototype.add = function (element) {\n        if (collections.isUndefined(element)) {\n            return false;\n        }\n        this.data.push(element);\n        this.siftUp(this.data.length - 1);\n        return true;\n    };\n    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */\n    Heap.prototype.removeRoot = function () {\n        if (this.data.length > 0) {\n            var obj = this.data[0];\n            this.data[0] = this.data[this.data.length - 1];\n            this.data.splice(this.data.length - 1, 1);\n            if (this.data.length > 0) {\n                this.siftDown(0);\n            }\n            return obj;\n        }\n        return undefined;\n    };\n    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */\n    Heap.prototype.contains = function (element) {\n        var equF = collections.compareToEquals(this.compare);\n        return arrays.contains(this.data, element, equF);\n    };\n    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */\n    Heap.prototype.size = function () {\n        return this.data.length;\n    };\n    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.data.length <= 0;\n    };\n    /**\n     * Removes all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.data.length = 0;\n    };\n    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Heap.prototype.forEach = function (callback) {\n        arrays.forEach(this.data, callback);\n    };\n    return Heap;\n}());\nexports.default = Heap;\n//# sourceMappingURL=Heap.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedList_1 = require(\"./LinkedList\");\nvar Queue = /** @class */ (function () {\n    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Queue() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.enqueue = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.add = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.dequeue = function () {\n        if (this.list.size() !== 0) {\n            var el = this.list.first();\n            this.list.removeElementAtIndex(0);\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.peek = function () {\n        if (this.list.size() !== 0) {\n            return this.list.first();\n        }\n        return undefined;\n    };\n    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */\n    Queue.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */\n    Queue.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */\n    Queue.prototype.isEmpty = function () {\n        return this.list.size() <= 0;\n    };\n    /**\n     * Removes all of the elements from this queue.\n     */\n    Queue.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Queue.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Queue;\n}()); // End of queue\nexports.default = Queue;\n//# sourceMappingURL=Queue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Queue_1 = require(\"./Queue\");\n/**\n * General binary search tree implementation.\n *\n * This interface allows one to search elements using a subset of their attributes (thus the\n * tree can be used as an index for complex objects).\n * The attributes required to define an ordering in the tree must be defined in the type K.\n * Any additional attribute must be defined in the type V.\n *\n * @see BSTree\n */\nvar BSTreeKV = /** @class */ (function () {\n    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function BSTreeKV(compareFunction) {\n        this.root = null;\n        this.compare = compareFunction || util.defaultCompare;\n        this.nElements = 0;\n    }\n    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */\n    BSTreeKV.prototype.add = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        if (this.insertNode(this.createNode(element)) !== null) {\n            this.nElements++;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this tree.\n     */\n    BSTreeKV.prototype.clear = function () {\n        this.root = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */\n    BSTreeKV.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */\n    BSTreeKV.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */\n    BSTreeKV.prototype.contains = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        return this.searchNode(this.root, element) !== null;\n    };\n    /**\n     * Looks for the value with the provided search key.\n     * @param {Object} element The key to look for\n     * @return {Object} The value found or undefined if it was not found.\n     */\n    BSTreeKV.prototype.search = function (element) {\n        var ret = this.searchNode(this.root, element);\n        if (ret === null) {\n            return undefined;\n        }\n        return ret.element;\n    };\n    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */\n    BSTreeKV.prototype.remove = function (element) {\n        var node = this.searchNode(this.root, element);\n        if (node === null) {\n            return false;\n        }\n        this.removeNode(node);\n        this.nElements--;\n        return true;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.inorderTraversal = function (callback) {\n        this.inorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.preorderTraversal = function (callback) {\n        this.preorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.postorderTraversal = function (callback) {\n        this.postorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.levelTraversal = function (callback) {\n        this.levelTraversalAux(this.root, callback);\n    };\n    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTreeKV.prototype.minimum = function () {\n        if (this.isEmpty() || this.root === null) {\n            return undefined;\n        }\n        return this.minimumAux(this.root).element;\n    };\n    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTreeKV.prototype.maximum = function () {\n        if (this.isEmpty() || this.root === null) {\n            return undefined;\n        }\n        return this.maximumAux(this.root).element;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    BSTreeKV.prototype.forEach = function (callback) {\n        this.inorderTraversal(callback);\n    };\n    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */\n    BSTreeKV.prototype.toArray = function () {\n        var array = [];\n        this.inorderTraversal(function (element) {\n            array.push(element);\n            return true;\n        });\n        return array;\n    };\n    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */\n    BSTreeKV.prototype.height = function () {\n        return this.heightAux(this.root);\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.searchNode = function (node, element) {\n        var cmp = 1;\n        while (node !== null && cmp !== 0) {\n            cmp = this.compare(element, node.element);\n            if (cmp < 0) {\n                node = node.leftCh;\n            }\n            else if (cmp > 0) {\n                node = node.rightCh;\n            }\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.transplant = function (n1, n2) {\n        if (n1.parent === null) {\n            this.root = n2;\n        }\n        else if (n1 === n1.parent.leftCh) {\n            n1.parent.leftCh = n2;\n        }\n        else {\n            n1.parent.rightCh = n2;\n        }\n        if (n2 !== null) {\n            n2.parent = n1.parent;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.removeNode = function (node) {\n        if (node.leftCh === null) {\n            this.transplant(node, node.rightCh);\n        }\n        else if (node.rightCh === null) {\n            this.transplant(node, node.leftCh);\n        }\n        else {\n            var y = this.minimumAux(node.rightCh);\n            if (y.parent !== node) {\n                this.transplant(y, y.rightCh);\n                y.rightCh = node.rightCh;\n                y.rightCh.parent = y;\n            }\n            this.transplant(node, y);\n            y.leftCh = node.leftCh;\n            y.leftCh.parent = y;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.inorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.levelTraversalAux = function (node, callback) {\n        var queue = new Queue_1.default();\n        if (node !== null) {\n            queue.enqueue(node);\n        }\n        node = queue.dequeue() || null;\n        while (node != null) {\n            if (callback(node.element) === false) {\n                return;\n            }\n            if (node.leftCh !== null) {\n                queue.enqueue(node.leftCh);\n            }\n            if (node.rightCh !== null) {\n                queue.enqueue(node.rightCh);\n            }\n            node = queue.dequeue() || null;\n        }\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.preorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.postorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.rightCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n    };\n    BSTreeKV.prototype.minimumAux = function (node) {\n        while (node != null && node.leftCh !== null) {\n            node = node.leftCh;\n        }\n        return node;\n    };\n    BSTreeKV.prototype.maximumAux = function (node) {\n        while (node != null && node.rightCh !== null) {\n            node = node.rightCh;\n        }\n        return node;\n    };\n    /**\n      * @private\n      */\n    BSTreeKV.prototype.heightAux = function (node) {\n        if (node === null) {\n            return -1;\n        }\n        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n    };\n    /*\n    * @private\n    */\n    BSTreeKV.prototype.insertNode = function (node) {\n        var parent = null;\n        var position = this.root;\n        while (position !== null) {\n            var cmp = this.compare(node.element, position.element);\n            if (cmp === 0) {\n                return null;\n            }\n            else if (cmp < 0) {\n                parent = position;\n                position = position.leftCh;\n            }\n            else {\n                parent = position;\n                position = position.rightCh;\n            }\n        }\n        node.parent = parent;\n        if (parent === null) {\n            // tree is empty\n            this.root = node;\n        }\n        else if (this.compare(node.element, parent.element) < 0) {\n            parent.leftCh = node;\n        }\n        else {\n            parent.rightCh = node;\n        }\n        return node;\n    };\n    /**\n    * @private\n    */\n    BSTreeKV.prototype.createNode = function (element) {\n        return {\n            element: element,\n            leftCh: null,\n            rightCh: null,\n            parent: null\n        };\n    };\n    return BSTreeKV;\n}());\nexports.default = BSTreeKV;\n//# sourceMappingURL=BSTreeKV.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar Set = /** @class */ (function () {\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Set(toStringFunction) {\n        this.dictionary = new Dictionary_1.default(toStringFunction);\n    }\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    Set.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    Set.prototype.add = function (element) {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    };\n    /**\n     * Performs an intersecion between this and another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.intersection = function (otherSet) {\n        var set = this;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    };\n    /**\n     * Performs a union between this and another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.union = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.add(element);\n            return true;\n        });\n    };\n    /**\n     * Performs a difference between this and another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.difference = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.remove(element);\n            return true;\n        });\n    };\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    Set.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSub = true;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    };\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    Set.prototype.remove = function (element) {\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Set.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            return callback(v);\n        });\n    };\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    Set.prototype.toArray = function () {\n        return this.dictionary.values();\n    };\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    Set.prototype.isEmpty = function () {\n        return this.dictionary.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    Set.prototype.size = function () {\n        return this.dictionary.size();\n    };\n    /**\n     * Removes all of the elements from this set.\n     */\n    Set.prototype.clear = function () {\n        this.dictionary.clear();\n    };\n    /*\n    * Provides a string representation for display\n    */\n    Set.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    return Set;\n}()); // end of Set\nexports.default = Set;\n//# sourceMappingURL=Set.js.map","export const Quadratic = (a:number) => (b:number) => (c:number) => {\n    \n    const root_part = Math.sqrt(b * b - 4 * a * c);\n    const denom = 2 * a;\n \n    const root1 = ( -b + root_part ) / denom;\n    const root2 = ( -b - root_part ) / denom;\n\n    return [root1, root2]; \n}\n","export enum WorkerCommands {\n    TICK,\n    RENDER,\n    READY,\n    INIT,\n    WORLD_START,\n    BALL_START,\n    BALL_STOP\n}\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","       /*                   *\\\n      //                     \\\\\n     //   @@  @@     @@  @@   \\\\\n    //      @@       @@  @@    \\\\\n    \\\\      @@       @@  @@    //\n     \\\\   @@  @@  @    @@ @   //\n      \\\\          /       @  //\n       \\*             @@@@  */\n\n//. <a href=\"https://github.com/fantasyland/fantasy-land\"><img alt=\"Fantasy Land\" src=\"https://raw.githubusercontent.com/fantasyland/fantasy-land/master/logo.png\" width=\"75\" height=\"75\" align=\"left\"></a>\n//.\n//. # sanctuary-pair\n//.\n//. Pair is the canonical product type: a value of type `Pair a b` always\n//. contains exactly two values: one of type `a`; one of type `b`.\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-show', 'sanctuary-type-classes'], f);\n  } else {\n    self.sanctuaryPair = f (self.sanctuaryShow, self.sanctuaryTypeClasses);\n  }\n\n} (function(show, Z) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    var $ = __doctest.require ('sanctuary-def');\n    var type = __doctest.require ('sanctuary-type-identifiers');\n    var S = (function() {\n      var S = __doctest.require ('sanctuary');\n      var PairType = $.BinaryType\n        ('sanctuary-pair/Pair')\n        ('')\n        (function(x) { return type (x) === Pair['@@type']; })\n        (function(p) { return [p.fst]; })\n        (function(p) { return [p.snd]; });\n      var env = Z.concat (S.env,\n                          [$.TypeClass, PairType ($.Unknown) ($.Unknown)]);\n      return S.create ({checkTypes: true, env: env});\n    } ());\n  }\n\n  var prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Pair,\n    '@@show':                 Pair$prototype$show,\n    'fantasy-land/compose':   Pair$prototype$compose,\n    'fantasy-land/map':       Pair$prototype$map,\n    'fantasy-land/bimap':     Pair$prototype$bimap,\n    'fantasy-land/reduce':    Pair$prototype$reduce,\n    'fantasy-land/traverse':  Pair$prototype$traverse,\n    'fantasy-land/extend':    Pair$prototype$extend,\n    'fantasy-land/extract':   Pair$prototype$extract\n    /* eslint-enable key-spacing */\n  };\n\n  var util =\n    typeof module === 'object' && typeof module.exports === 'object' ?\n    require ('util') :\n    /* istanbul ignore next */ {};\n  prototype[\n    util.inspect != null && typeof util.inspect.custom === 'symbol' ?\n    /* istanbul ignore next */ util.inspect.custom :\n    /* istanbul ignore next */ 'inspect'\n  ] = Pair$prototype$show;\n\n  /* istanbul ignore else */\n  if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n    prototype[Symbol.iterator] = function() {\n      return [this.fst, this.snd][Symbol.iterator] ();\n    };\n  }\n\n  //. `Pair a b` satisfies the following [Fantasy Land][] specifications:\n  //.\n  //. ```javascript\n  //. > const Useless = require ('sanctuary-useless')\n  //.\n  //. > S.map (k => k + ' '.repeat (16 - k.length) +\n  //. .             (Z[k].test (Pair (Useless) (Useless)) ? '\\u2705   ' :\n  //. .              Z[k].test (Pair (['foo']) (['bar'])) ? '\\u2705 * ' :\n  //. .              /* otherwise */                        '\\u274C   '))\n  //. .       (S.keys (Z.filter ($.test ([]) ($.TypeClass), Z)))\n  //. [ 'Setoid          ✅ * ',  // if ‘a’ and ‘b’ satisfy Setoid\n  //. . 'Ord             ✅ * ',  // if ‘a’ and ‘b’ satisfy Ord\n  //. . 'Semigroupoid    ✅   ',\n  //. . 'Category        ❌   ',\n  //. . 'Semigroup       ✅ * ',  // if ‘a’ and ‘b’ satisfy Semigroup\n  //. . 'Monoid          ❌   ',\n  //. . 'Group           ❌   ',\n  //. . 'Filterable      ❌   ',\n  //. . 'Functor         ✅   ',\n  //. . 'Bifunctor       ✅   ',\n  //. . 'Profunctor      ❌   ',\n  //. . 'Apply           ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'Applicative     ❌   ',\n  //. . 'Chain           ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'ChainRec        ❌   ',\n  //. . 'Monad           ❌   ',\n  //. . 'Alt             ❌   ',\n  //. . 'Plus            ❌   ',\n  //. . 'Alternative     ❌   ',\n  //. . 'Foldable        ✅   ',\n  //. . 'Traversable     ✅   ',\n  //. . 'Extend          ✅   ',\n  //. . 'Comonad         ✅   ',\n  //. . 'Contravariant   ❌   ' ]\n  //. ```\n\n  //# Pair :: a -> b -> Pair a b\n  //.\n  //. Pair's sole data constructor. Additionally, it serves as the\n  //. Pair [type representative][].\n  //.\n  //. ```javascript\n  //. > Pair (1) (2)\n  //. Pair (1) (2)\n  //. ```\n  function Pair(fst) {\n    return function(snd) {\n      var pair = Object.create (prototype);\n      if (Z.Setoid.test (fst) && Z.Setoid.test (snd)) {\n        pair['fantasy-land/equals'] = Pair$prototype$equals;\n        if (Z.Ord.test (fst) && Z.Ord.test (snd)) {\n          pair['fantasy-land/lte'] = Pair$prototype$lte;\n        }\n      }\n      if (Z.Semigroup.test (fst)) {\n        if (Z.Semigroup.test (snd)) {\n          pair['fantasy-land/concat'] = Pair$prototype$concat;\n        }\n        pair['fantasy-land/ap'] = Pair$prototype$ap;\n        pair['fantasy-land/chain'] = Pair$prototype$chain;\n      }\n      pair.fst = fst;\n      pair.snd = snd;\n      return pair;\n    };\n  }\n\n  //# Pair.fst :: Pair a b -> a\n  //.\n  //. `fst (Pair (x) (y))` is equivalent to `x`.\n  //.\n  //. ```javascript\n  //. > Pair.fst (Pair ('abc') ([1, 2, 3]))\n  //. 'abc'\n  //. ```\n  Pair.fst = function(p) { return p.fst; };\n\n  //# Pair.snd :: Pair a b -> b\n  //.\n  //. `snd (Pair (x) (y))` is equivalent to `y`.\n  //.\n  //. ```javascript\n  //. > Pair.snd (Pair ('abc') ([1, 2, 3]))\n  //. [1, 2, 3]\n  //. ```\n  Pair.snd = function(p) { return p.snd; };\n\n  //# Pair.swap :: Pair a b -> Pair b a\n  //.\n  //. `swap (Pair (x) (y))` is equivalent to `Pair (y) (x)`.\n  //.\n  //. ```javascript\n  //. > Pair.swap (Pair ('abc') ([1, 2, 3]))\n  //. Pair ([1, 2, 3]) ('abc')\n  //. ```\n  Pair.swap = function(p) { return Pair (p.snd) (p.fst); };\n\n  //# Pair.@@type :: String\n  //.\n  //. Pair [type identifier][].\n  //.\n  //. ```javascript\n  //. > type (Pair ('abc') ([1, 2, 3]))\n  //. 'sanctuary-pair/Pair@1'\n  //.\n  //. > type.parse (type (Pair ('abc') ([1, 2, 3])))\n  //. {namespace: 'sanctuary-pair', name: 'Pair', version: 1}\n  //. ```\n  Pair['@@type'] = 'sanctuary-pair/Pair@1';\n\n  //# Pair#@@show :: (Showable a, Showable b) => Pair a b ~> () -> String\n  //.\n  //. `show (Pair (x) (y))` is equivalent to\n  //. `'Pair (' + show (x) + ') (' + show (y) + ')'`.\n  //.\n  //. ```javascript\n  //. > show (Pair ('abc') ([1, 2, 3]))\n  //. 'Pair (\"abc\") ([1, 2, 3])'\n  //. ```\n  function Pair$prototype$show() {\n    return 'Pair (' + show (this.fst) + ') (' + show (this.snd) + ')';\n  }\n\n  //# Pair#fantasy-land/equals :: (Setoid a, Setoid b) => Pair a b ~> Pair a b -> Boolean\n  //.\n  //. `Pair (x) (y)` is equal to `Pair (v) (w)` [iff][] `x` is equal to `v`\n  //. and `y` is equal to `w` according to [`Z.equals`][].\n  //.\n  //. ```javascript\n  //. > S.equals (Pair ('abc') ([1, 2, 3])) (Pair ('abc') ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Pair ('abc') ([1, 2, 3])) (Pair ('abc') ([3, 2, 1]))\n  //. false\n  //. ```\n  function Pair$prototype$equals(other) {\n    return Z.equals (this.fst, other.fst) && Z.equals (this.snd, other.snd);\n  }\n\n  //# Pair#fantasy-land/lte :: (Ord a, Ord b) => Pair a b ~> Pair a b -> Boolean\n  //.\n  //. `Pair (x) (y)` is less than or equal to `Pair (v) (w)` [iff][] `x` is\n  //. less than `v` or `x` is equal to `v` and `y` is less than or equal to\n  //. `w` according to [`Z.lte`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (Pair ('b') (2)))\n  //. .          ([Pair ('a') (1), Pair ('a') (2), Pair ('a') (3),\n  //. .            Pair ('b') (1), Pair ('b') (2), Pair ('b') (3),\n  //. .            Pair ('c') (1), Pair ('c') (2), Pair ('c') (3)])\n  //. [ Pair ('a') (1),\n  //. . Pair ('a') (2),\n  //. . Pair ('a') (3),\n  //. . Pair ('b') (1),\n  //. . Pair ('b') (2) ]\n  //. ```\n  function Pair$prototype$lte(other) {\n    return Z.equals (this.fst, other.fst) ? Z.lte (this.snd, other.snd)\n                                          : Z.lte (this.fst, other.fst);\n  }\n\n  //# Pair#fantasy-land/compose :: Pair a b ~> Pair b c -> Pair a c\n  //.\n  //. `compose (Pair (x) (y)) (Pair (v) (w))` is equivalent to `Pair (v) (y)`.\n  //.\n  //. ```javascript\n  //. > S.compose (Pair ('a') (0)) (Pair ([1, 2, 3]) ('b'))\n  //. Pair ([1, 2, 3]) (0)\n  //. ```\n  function Pair$prototype$compose(other) {\n    return Pair (this.fst) (other.snd);\n  }\n\n  //# Pair#fantasy-land/concat :: (Semigroup a, Semigroup b) => Pair a b ~> Pair a b -> Pair a b\n  //.\n  //. `concat (Pair (x) (y)) (Pair (v) (w))` is equivalent to\n  //. `Pair (concat (x) (v)) (concat (y) (w))`.\n  //.\n  //. ```javascript\n  //. > S.concat (Pair ('abc') ([1, 2, 3])) (Pair ('xyz') ([4, 5, 6]))\n  //. Pair ('abcxyz') ([1, 2, 3, 4, 5, 6])\n  //. ```\n  function Pair$prototype$concat(other) {\n    return Pair (Z.concat (this.fst, other.fst))\n                (Z.concat (this.snd, other.snd));\n  }\n\n  //# Pair#fantasy-land/map :: Pair a b ~> (b -> c) -> Pair a c\n  //.\n  //. `map (f) (Pair (x) (y))` is equivalent to `Pair (x) (f (y))`.\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) (Pair ('abc') (256))\n  //. Pair ('abc') (16)\n  //. ```\n  function Pair$prototype$map(f) {\n    return Pair (this.fst) (f (this.snd));\n  }\n\n  //# Pair#fantasy-land/bimap :: Pair a c ~> (a -> b, c -> d) -> Pair b d\n  //.\n  //. `bimap (f) (g) (Pair (x) (y))` is equivalent to `Pair (f (x)) (g (y))`.\n  //.\n  //. ```javascript\n  //. > S.bimap (S.toUpper) (Math.sqrt) (Pair ('abc') (256))\n  //. Pair ('ABC') (16)\n  //. ```\n  function Pair$prototype$bimap(f, g) {\n    return Pair (f (this.fst)) (g (this.snd));\n  }\n\n  //# Pair#fantasy-land/ap :: Semigroup a => Pair a b ~> Pair a (b -> c) -> Pair a c\n  //.\n  //. `ap (Pair (v) (f)) (Pair (x) (y))` is equivalent to\n  //. `Pair (concat (v) (x)) (f (y))`.\n  //.\n  //. ```javascript\n  //. > S.ap (Pair ('abc') (Math.sqrt)) (Pair ('xyz') (256))\n  //. Pair ('abcxyz') (16)\n  //. ```\n  function Pair$prototype$ap(other) {\n    return Pair (Z.concat (other.fst, this.fst)) (other.snd (this.snd));\n  }\n\n  //# Pair#fantasy-land/chain :: Semigroup a => Pair a b ~> (b -> Pair a c) -> Pair a c\n  //.\n  //. `chain (f) (Pair (x) (y))` is equivalent to\n  //. `Pair (concat (x) (fst (f (y)))) (snd (f (y)))`.\n  //.\n  //. ```javascript\n  //. > S.chain (n => Pair (show (n)) (Math.sqrt (n))) (Pair ('abc') (256))\n  //. Pair ('abc256') (16)\n  //. ```\n  function Pair$prototype$chain(f) {\n    var other = f (this.snd);\n    return Pair (Z.concat (this.fst, other.fst)) (other.snd);\n  }\n\n  //# Pair#fantasy-land/reduce :: Pair a b ~> ((c, b) -> c, c) -> c\n  //.\n  //. `reduce (f) (x) (Pair (v) (w))` is equivalent to `f (x) (w)`.\n  //.\n  //. ```javascript\n  //. > S.reduce (S.concat) ([1, 2, 3]) (Pair ('abc') ([4, 5, 6]))\n  //. [1, 2, 3, 4, 5, 6]\n  //. ```\n  function Pair$prototype$reduce(f, x) {\n    return f (x, this.snd);\n  }\n\n  //# Pair#fantasy-land/traverse :: Applicative f => Pair a b ~> (TypeRep f, b -> f c) -> f (Pair a c)\n  //.\n  //. `traverse (_) (f) (Pair (x) (y))` is equivalent to\n  //. `map (Pair (x)) (f (y))`.\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (Pair (123) ('foo bar baz'))\n  //. [Pair (123) ('foo'), Pair (123) ('bar'), Pair (123) ('baz')]\n  //. ```\n  function Pair$prototype$traverse(typeRep, f) {\n    return Z.map (Pair (this.fst), f (this.snd));\n  }\n\n  //# Pair#fantasy-land/extend :: Pair a b ~> (Pair a b -> c) -> Pair a c\n  //.\n  //. `extend (f) (Pair (x) (y))` is equivalent to\n  //. `Pair (x) (f (Pair (x) (y)))`.\n  //.\n  //. ```javascript\n  //. > S.extend (S.reduce (S.add) (1)) (Pair ('abc') (99))\n  //. Pair ('abc') (100)\n  //. ```\n  function Pair$prototype$extend(f) {\n    return Pair (this.fst) (f (this));\n  }\n\n  //# Pair#fantasy-land/extract :: Pair a b ~> () -> b\n  //.\n  //. `extract (Pair (x) (y))` is equivalent to `y`.\n  //.\n  //. ```javascript\n  //. > S.extract (Pair ('abc') ([1, 2, 3]))\n  //. [1, 2, 3]\n  //. ```\n  function Pair$prototype$extract() {\n    return this.snd;\n  }\n\n  return Pair;\n\n}));\n\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n    ,______  ______,  ,________,,_____,,_____,,__________  ,__________,\n    |      \\/      |  |        ||     ||     ||          \\ |          |\n    |_,          ,_|  |_      _||_    ||    _||_,   __    ||_,   _____|\n      |   \\  /   |     /      \\   \\   \\/   /    |        /   |      |\n    ,_|    ||    |_,,_/   /\\   \\_, \\      /   ,_|   __   \\ ,_|   ___|_,\n    |      ||      ||     ||     |  |    |    |           ||          |\n    |______||______||_____||_____|  |____|    |__________/ |__________|\n                                                                         */\n\n//. <a href=\"https://github.com/fantasyland/fantasy-land\"><img alt=\"Fantasy Land\" src=\"https://raw.githubusercontent.com/fantasyland/fantasy-land/master/logo.png\" width=\"75\" height=\"75\" align=\"left\"></a>\n//.\n//. # sanctuary-maybe\n//.\n//. The Maybe type represents optional values: a value of type `Maybe a` is\n//. either Nothing (the empty value) or a Just whose value is of type `a`.\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-show', 'sanctuary-type-classes'], f);\n  } else {\n    self.sanctuaryMaybe = f (self.sanctuaryShow, self.sanctuaryTypeClasses);\n  }\n\n} (function(show, Z) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    var $ = __doctest.require ('sanctuary-def');\n    var type = __doctest.require ('sanctuary-type-identifiers');\n    var S = (function() {\n      var S = __doctest.require ('sanctuary');\n      var MaybeType = $.UnaryType\n        ('sanctuary-maybe/Maybe')\n        ('')\n        (function(x) { return type (x) === Maybe['@@type']; })\n        (function(m) { return m.isJust ? [m.value] : []; });\n      var env = Z.concat (S.env, [$.TypeClass, MaybeType ($.Unknown)]);\n      return S.create ({checkTypes: true, env: env});\n    } ());\n  }\n\n  var Maybe = {};\n\n  var Nothing$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Maybe,\n    'isNothing':              true,\n    'isJust':                 false,\n    '@@show':                 Nothing$prototype$show,\n    'fantasy-land/equals':    Nothing$prototype$equals,\n    'fantasy-land/lte':       Nothing$prototype$lte,\n    'fantasy-land/concat':    Nothing$prototype$concat,\n    'fantasy-land/filter':    Nothing$prototype$filter,\n    'fantasy-land/map':       Nothing$prototype$map,\n    'fantasy-land/ap':        Nothing$prototype$ap,\n    'fantasy-land/chain':     Nothing$prototype$chain,\n    'fantasy-land/alt':       Nothing$prototype$alt,\n    'fantasy-land/reduce':    Nothing$prototype$reduce,\n    'fantasy-land/traverse':  Nothing$prototype$traverse,\n    'fantasy-land/extend':    Nothing$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var Just$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Maybe,\n    'isNothing':              false,\n    'isJust':                 true,\n    '@@show':                 Just$prototype$show,\n    'fantasy-land/filter':    Just$prototype$filter,\n    'fantasy-land/map':       Just$prototype$map,\n    'fantasy-land/ap':        Just$prototype$ap,\n    'fantasy-land/chain':     Just$prototype$chain,\n    'fantasy-land/alt':       Just$prototype$alt,\n    'fantasy-land/reduce':    Just$prototype$reduce,\n    'fantasy-land/traverse':  Just$prototype$traverse,\n    'fantasy-land/extend':    Just$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var util =\n    typeof module === 'object' && typeof module.exports === 'object' ?\n    require ('util') :\n    /* istanbul ignore next */ {};\n  var inspect =\n    util.inspect != null && typeof util.inspect.custom === 'symbol' ?\n    /* istanbul ignore next */ util.inspect.custom :\n    /* istanbul ignore next */ 'inspect';\n  Nothing$prototype[inspect] = Nothing$prototype$show;\n  Just$prototype[inspect] = Just$prototype$show;\n\n  //. `Maybe a` satisfies the following [Fantasy Land][] specifications:\n  //.\n  //. ```javascript\n  //. > const Useless = require ('sanctuary-useless')\n  //.\n  //. > S.map (k => k + ' '.repeat (16 - k.length) +\n  //. .             (Z[k].test (Just (Useless)) ? '\\u2705   ' :\n  //. .              Z[k].test (Nothing)        ? '\\u2705 * ' :\n  //. .              /* otherwise */              '\\u274C   '))\n  //. .       (S.keys (Z.filter ($.test ([]) ($.TypeClass), Z)))\n  //. [ 'Setoid          ✅ * ',  // if ‘a’ satisfies Setoid\n  //. . 'Ord             ✅ * ',  // if ‘a’ satisfies Ord\n  //. . 'Semigroupoid    ❌   ',\n  //. . 'Category        ❌   ',\n  //. . 'Semigroup       ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'Monoid          ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'Group           ❌   ',\n  //. . 'Filterable      ✅   ',\n  //. . 'Functor         ✅   ',\n  //. . 'Bifunctor       ❌   ',\n  //. . 'Profunctor      ❌   ',\n  //. . 'Apply           ✅   ',\n  //. . 'Applicative     ✅   ',\n  //. . 'Chain           ✅   ',\n  //. . 'ChainRec        ✅   ',\n  //. . 'Monad           ✅   ',\n  //. . 'Alt             ✅   ',\n  //. . 'Plus            ✅   ',\n  //. . 'Alternative     ✅   ',\n  //. . 'Foldable        ✅   ',\n  //. . 'Traversable     ✅   ',\n  //. . 'Extend          ✅   ',\n  //. . 'Comonad         ❌   ',\n  //. . 'Contravariant   ❌   ' ]\n  //. ```\n\n  //# Maybe :: TypeRep Maybe\n  //.\n  //. Maybe [type representative][].\n\n  //# Maybe.Nothing :: Maybe a\n  //.\n  //. The empty value of type `Maybe a`.\n  //.\n  //. ```javascript\n  //. > Nothing\n  //. Nothing\n  //. ```\n  var Nothing = Maybe.Nothing = Object.create (Nothing$prototype);\n\n  //# Maybe.Just :: a -> Maybe a\n  //.\n  //. Constructs a value of type `Maybe a` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > Just (42)\n  //. Just (42)\n  //. ```\n  var Just = Maybe.Just = function(value) {\n    var just = Object.create (Just$prototype);\n    if (Z.Setoid.test (value)) {\n      just['fantasy-land/equals'] = Just$prototype$equals;\n      if (Z.Ord.test (value)) {\n        just['fantasy-land/lte'] = Just$prototype$lte;\n      }\n    }\n    if (Z.Semigroup.test (value)) {\n      just['fantasy-land/concat'] = Just$prototype$concat;\n    }\n    just.value = value;\n    return just;\n  };\n\n  //# Maybe.@@type :: String\n  //.\n  //. Maybe [type identifier][].\n  //.\n  //. ```javascript\n  //. > type (Just (42))\n  //. 'sanctuary-maybe/Maybe@1'\n  //.\n  //. > type.parse (type (Just (42)))\n  //. {namespace: 'sanctuary-maybe', name: 'Maybe', version: 1}\n  //. ```\n  Maybe['@@type'] = 'sanctuary-maybe/Maybe@1';\n\n  //# Maybe.fantasy-land/empty :: () -> Maybe a\n  //.\n  //.   - `empty (Maybe)` is equivalent to `Nothing`\n  //.\n  //. ```javascript\n  //. > S.empty (Maybe)\n  //. Nothing\n  //. ```\n  Maybe['fantasy-land/empty'] = function() { return Nothing; };\n\n  //# Maybe.fantasy-land/of :: a -> Maybe a\n  //.\n  //.   - `of (Maybe) (x)` is equivalent to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.of (Maybe) (42)\n  //. Just (42)\n  //. ```\n  Maybe['fantasy-land/of'] = Just;\n\n  function next(x) { return {tag: next, value: x}; }\n  function done(x) { return {tag: done, value: x}; }\n\n  //# Maybe.fantasy-land/chainRec :: ((a -> c, b -> c, a) -> Maybe c, a) -> Maybe b\n  //.\n  //. ```javascript\n  //. > Z.chainRec (\n  //. .   Maybe,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Nothing : Just (x >= 1000 ? done (x) : next (x * x)),\n  //. .   1\n  //. . )\n  //. Nothing\n  //.\n  //. > Z.chainRec (\n  //. .   Maybe,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Nothing : Just (x >= 1000 ? done (x) : next (x * x)),\n  //. .   2\n  //. . )\n  //. Just (65536)\n  //. ```\n  Maybe['fantasy-land/chainRec'] = function(f, x) {\n    var r = next (x);\n    while (r.tag === next) {\n      var maybe = f (next, done, r.value);\n      if (maybe.isNothing) return maybe;\n      r = maybe.value;\n    }\n    return Just (r.value);\n  };\n\n  //# Maybe.fantasy-land/zero :: () -> Maybe a\n  //.\n  //.   - `zero (Maybe)` is equivalent to `Nothing`\n  //.\n  //. ```javascript\n  //. > S.zero (Maybe)\n  //. Nothing\n  //. ```\n  Maybe['fantasy-land/zero'] = function() { return Nothing; };\n\n  //# Maybe#@@show :: Showable a => Maybe a ~> () -> String\n  //.\n  //.   - `show (Nothing)` is equivalent to `'Nothing'`\n  //.   - `show (Just (x))` is equivalent to `'Just (' + show (x) + ')'`\n  //.\n  //. ```javascript\n  //. > show (Nothing)\n  //. 'Nothing'\n  //.\n  //. > show (Just (['foo', 'bar', 'baz']))\n  //. 'Just ([\"foo\", \"bar\", \"baz\"])'\n  //. ```\n  function Nothing$prototype$show() {\n    return 'Nothing';\n  }\n  function Just$prototype$show() {\n    return 'Just (' + show (this.value) + ')';\n  }\n\n  //# Maybe#fantasy-land/equals :: Setoid a => Maybe a ~> Maybe a -> Boolean\n  //.\n  //.   - `Nothing` is equal to `Nothing`\n  //.   - `Just (x)` is equal to `Just (y)` [iff][] `x` is equal to `y`\n  //.     according to [`Z.equals`][]\n  //.   - `Nothing` is never equal to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.equals (Nothing) (Nothing)\n  //. true\n  //.\n  //. > S.equals (Just ([1, 2, 3])) (Just ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Just ([1, 2, 3])) (Just ([3, 2, 1]))\n  //. false\n  //.\n  //. > S.equals (Just ([1, 2, 3])) (Nothing)\n  //. false\n  //. ```\n  function Nothing$prototype$equals(other) {\n    return other.isNothing;\n  }\n  function Just$prototype$equals(other) {\n    return other.isJust && Z.equals (this.value, other.value);\n  }\n\n  //# Maybe#fantasy-land/lte :: Ord a => Maybe a ~> Maybe a -> Boolean\n  //.\n  //.   - `Nothing` is (less than or) equal to `Nothing`\n  //.   - `Just (x)` is less than or equal to `Just (y)` [iff][] `x` is less\n  //.     than or equal to `y` according to [`Z.lte`][]\n  //.   - `Nothing` is always less than `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (Nothing)) ([Nothing, Just (0), Just (1), Just (2)])\n  //. [Nothing]\n  //.\n  //. > S.filter (S.lte (Just (1))) ([Nothing, Just (0), Just (1), Just (2)])\n  //. [Nothing, Just (0), Just (1)]\n  //. ```\n  function Nothing$prototype$lte(other) {\n    return true;\n  }\n  function Just$prototype$lte(other) {\n    return other.isJust && Z.lte (this.value, other.value);\n  }\n\n  //# Maybe#fantasy-land/concat :: Semigroup a => Maybe a ~> Maybe a -> Maybe a\n  //.\n  //.   - `concat (Nothing) (Nothing)` is equivalent to `Nothing`\n  //.   - `concat (Just (x)) (Just (y))` is equivalent to\n  //.     `Just (concat (x) (y))`\n  //.   - `concat (Nothing) (Just (x))` is equivalent to `Just (x)`\n  //.   - `concat (Just (x)) (Nothing)` is equivalent to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.concat (Nothing) (Nothing)\n  //. Nothing\n  //.\n  //. > S.concat (Just ([1, 2, 3])) (Just ([4, 5, 6]))\n  //. Just ([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat (Nothing) (Just ([1, 2, 3]))\n  //. Just ([1, 2, 3])\n  //.\n  //. > S.concat (Just ([1, 2, 3])) (Nothing)\n  //. Just ([1, 2, 3])\n  //. ```\n  function Nothing$prototype$concat(other) {\n    return other;\n  }\n  function Just$prototype$concat(other) {\n    return other.isJust ? Just (Z.concat (this.value, other.value)) : this;\n  }\n\n  //# Maybe#fantasy-land/filter :: Maybe a ~> (a -> Boolean) -> Maybe a\n  //.\n  //.   - `filterM (p) (Nothing)` is equivalent to `Nothing`\n  //.   - `filterM (p) (Just (x))` is equivalent to\n  //.     `p (x) ? Just (x) : Nothing`\n  //.\n  //. ```javascript\n  //. > S.filterM (isFinite) (Nothing)\n  //. Nothing\n  //.\n  //. > S.filterM (isFinite) (Just (Infinity))\n  //. Nothing\n  //.\n  //. > S.filterM (isFinite) (Just (Number.MAX_SAFE_INTEGER))\n  //. Just (9007199254740991)\n  //. ```\n  function Nothing$prototype$filter(pred) {\n    return this;\n  }\n  function Just$prototype$filter(pred) {\n    return pred (this.value) ? this : Nothing;\n  }\n\n  //# Maybe#fantasy-land/map :: Maybe a ~> (a -> b) -> Maybe b\n  //.\n  //.   - `map (f) (Nothing)` is equivalent to `Nothing`\n  //.   - `map (f) (Just (x))` is equivalent to `Just (f (x))`\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) (Nothing)\n  //. Nothing\n  //.\n  //. > S.map (Math.sqrt) (Just (9))\n  //. Just (3)\n  //. ```\n  function Nothing$prototype$map(f) {\n    return this;\n  }\n  function Just$prototype$map(f) {\n    return Just (f (this.value));\n  }\n\n  //# Maybe#fantasy-land/ap :: Maybe a ~> Maybe (a -> b) -> Maybe b\n  //.\n  //.   - `ap (Nothing) (Nothing)` is equivalent to `Nothing`\n  //.   - `ap (Nothing) (Just (x))` is equivalent to `Nothing`\n  //.   - `ap (Just (f)) (Nothing)` is equivalent to `Nothing`\n  //.   - `ap (Just (f)) (Just (x))` is equivalent to `Just (f (x))`\n  //.\n  //. ```javascript\n  //. > S.ap (Nothing) (Nothing)\n  //. Nothing\n  //.\n  //. > S.ap (Nothing) (Just (9))\n  //. Nothing\n  //.\n  //. > S.ap (Just (Math.sqrt)) (Nothing)\n  //. Nothing\n  //.\n  //. > S.ap (Just (Math.sqrt)) (Just (9))\n  //. Just (3)\n  //. ```\n  function Nothing$prototype$ap(other) {\n    return this;\n  }\n  function Just$prototype$ap(other) {\n    return other.isJust ? Just (other.value (this.value)) : other;\n  }\n\n  //# Maybe#fantasy-land/chain :: Maybe a ~> (a -> Maybe b) -> Maybe b\n  //.\n  //.   - `chain (f) (Nothing)` is equivalent to `Nothing`\n  //.   - `chain (f) (Just (x))` is equivalent to `f (x)`\n  //.\n  //. ```javascript\n  //. > const head = xs => xs.length === 0 ? Nothing : Just (xs[0])\n  //.\n  //. > S.chain (head) (Nothing)\n  //. Nothing\n  //.\n  //. > S.chain (head) (Just ([]))\n  //. Nothing\n  //.\n  //. > S.chain (head) (Just (['foo', 'bar', 'baz']))\n  //. Just ('foo')\n  //. ```\n  function Nothing$prototype$chain(f) {\n    return this;\n  }\n  function Just$prototype$chain(f) {\n    return f (this.value);\n  }\n\n  //# Maybe#fantasy-land/alt :: Maybe a ~> Maybe a -> Maybe a\n  //.\n  //.   - `alt (Nothing) (Nothing)` is equivalent to `Nothing`\n  //.   - `alt (Nothing) (Just (x))` is equivalent to `Just (x)`\n  //.   - `alt (Just (x)) (Nothing)` is equivalent to `Just (x)`\n  //.   - `alt (Just (x)) (Just (y))` is equivalent to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.alt (Nothing) (Nothing)\n  //. Nothing\n  //.\n  //. > S.alt (Nothing) (Just (1))\n  //. Just (1)\n  //.\n  //. > S.alt (Just (2)) (Nothing)\n  //. Just (2)\n  //.\n  //. > S.alt (Just (3)) (Just (4))\n  //. Just (3)\n  //. ```\n  function Nothing$prototype$alt(other) {\n    return other;\n  }\n  function Just$prototype$alt(other) {\n    return this;\n  }\n\n  //# Maybe#fantasy-land/reduce :: Maybe a ~> ((b, a) -> b, b) -> b\n  //.\n  //.   - `reduce (f) (x) (Nothing)` is equivalent to `x`\n  //.   - `reduce (f) (x) (Just (y))` is equivalent to `f (x) (y)`\n  //.\n  //. ```javascript\n  //. > S.reduce (S.concat) ('abc') (Nothing)\n  //. 'abc'\n  //.\n  //. > S.reduce (S.concat) ('abc') (Just ('xyz'))\n  //. 'abcxyz'\n  //. ```\n  function Nothing$prototype$reduce(f, x) {\n    return x;\n  }\n  function Just$prototype$reduce(f, x) {\n    return f (x, this.value);\n  }\n\n  //# Maybe#fantasy-land/traverse :: Applicative f => Maybe a ~> (TypeRep f, a -> f b) -> f (Maybe b)\n  //.\n  //.   - `traverse (A) (f) (Nothing)` is equivalent to `of (A) (Nothing)`\n  //.   - `traverse (A) (f) (Just (x))` is equivalent to `map (Just) (f (x))`\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (Nothing)\n  //. [Nothing]\n  //.\n  //. > S.traverse (Array) (S.words) (Just ('foo bar baz'))\n  //. [Just ('foo'), Just ('bar'), Just ('baz')]\n  //. ```\n  function Nothing$prototype$traverse(typeRep, f) {\n    return Z.of (typeRep, this);\n  }\n  function Just$prototype$traverse(typeRep, f) {\n    return Z.map (Just, f (this.value));\n  }\n\n  //# Maybe#fantasy-land/extend :: Maybe a ~> (Maybe a -> b) -> Maybe b\n  //.\n  //.   - `extend (f) (Nothing)` is equivalent to `Nothing`\n  //.   - `extend (f) (Just (x))` is equivalent to `Just (f (Just (x)))`\n  //.\n  //. ```javascript\n  //. > S.extend (S.reduce (S.add) (1)) (Nothing)\n  //. Nothing\n  //.\n  //. > S.extend (S.reduce (S.add) (1)) (Just (99))\n  //. Just (100)\n  //. ```\n  function Nothing$prototype$extend(f) {\n    return this;\n  }\n  function Just$prototype$extend(f) {\n    return Just (f (this));\n  }\n\n  return Maybe;\n\n}));\n\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*              ___                 ______\n               /  /\\               /  ___/\\\n        ______/  / / _______    __/  /___\\/\n       /  ___   / / /  ___  \\  /_   __/\\\n      /  /\\_/  / / /  /__/  /\\ \\/  /\\_\\/\n     /  / //  / / /  ______/ / /  / /\n    /  /_//  / / /  /______\\/ /  / /\n    \\_______/ /  \\_______/\\  /__/ /\n     \\______\\/    \\______\\/  \\__*/\n\n//. # sanctuary-def\n//.\n//. sanctuary-def is a run-time type system for JavaScript. It facilitates\n//. the definition of curried JavaScript functions which are explicit about\n//. the number of arguments to which they may be applied and the types of\n//. those arguments.\n//.\n//. It is conventional to import the package as `$`:\n//.\n//. ```javascript\n//. const $ = require ('sanctuary-def');\n//. ```\n//.\n//. The next step is to define an environment. An environment is an array\n//. of [types][]. [`env`][] is an environment containing all the built-in\n//. JavaScript types. It may be used as the basis for environments which\n//. include custom types in addition to the built-in types:\n//.\n//. ```javascript\n//. //    Integer :: Type\n//. const Integer = '...';\n//.\n//. //    NonZeroInteger :: Type\n//. const NonZeroInteger = '...';\n//.\n//. //    env :: Array Type\n//. const env = $.env.concat ([Integer, NonZeroInteger]);\n//. ```\n//.\n//. Type constructors such as `List :: Type -> Type` cannot be included in\n//. an environment as they're not of the correct type. One could, though,\n//. use a type constructor to define a fixed number of concrete types:\n//.\n//. ```javascript\n//. //    env :: Array Type\n//. const env = $.env.concat ([\n//.   List ($.Number),                // :: Type\n//.   List ($.String),                // :: Type\n//.   List (List ($.Number)),         // :: Type\n//.   List (List ($.String)),         // :: Type\n//.   List (List (List ($.Number))),  // :: Type\n//.   List (List (List ($.String))),  // :: Type\n//. ]);\n//. ```\n//.\n//. Not only would this be tedious, but one could never enumerate all possible\n//. types as there are infinitely many. Instead, one should use [`Unknown`][]:\n//.\n//. ```javascript\n//. //    env :: Array Type\n//. const env = $.env.concat ([List ($.Unknown)]);\n//. ```\n//.\n//. The next step is to define a `def` function for the environment:\n//.\n//. ```javascript\n//. const def = $.create ({checkTypes: true, env});\n//. ```\n//.\n//. The `checkTypes` option determines whether type checking is enabled.\n//. This allows one to only pay the performance cost of run-time type checking\n//. during development. For example:\n//.\n//. ```javascript\n//. const def = $.create ({\n//.   checkTypes: process.env.NODE_ENV === 'development',\n//.   env,\n//. });\n//. ```\n//.\n//. `def` is a function for defining functions. For example:\n//.\n//. ```javascript\n//. //    add :: Number -> Number -> Number\n//. const add =\n//. def ('add')\n//.     ({})\n//.     ([$.Number, $.Number, $.Number])\n//.     (x => y => x + y);\n//. ```\n//.\n//. `[$.Number, $.Number, $.Number]` specifies that `add` takes two arguments\n//. of type `Number`, one at a time, and returns a value of type `Number`.\n//.\n//. Applying `add` to two arguments, one at a time, gives the expected result:\n//.\n//. ```javascript\n//. add (2) (2);\n//. // => 4\n//. ```\n//.\n//. Applying `add` to multiple arguments at once results in an exception being\n//. thrown:\n//.\n//. ```javascript\n//. add (2, 2, 2);\n//. // ! TypeError: ‘add’ applied to the wrong number of arguments\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   Expected one argument but received three arguments:\n//. //\n//. //     - 2\n//. //     - 2\n//. //     - 2\n//. ```\n//.\n//. Applying `add` to one argument produces a function awaiting the remaining\n//. argument. This is known as partial application. Partial application allows\n//. more specific functions to be defined in terms of more general ones:\n//.\n//. ```javascript\n//. //    inc :: Number -> Number\n//. const inc = add (1);\n//.\n//. inc (7);\n//. // => 8\n//. ```\n//.\n//. JavaScript's implicit type coercion often obfuscates the source of type\n//. errors. Consider the following function:\n//.\n//. ```javascript\n//. //    _add :: Number -> Number -> Number\n//. const _add = x => y => x + y;\n//. ```\n//.\n//. The type signature indicates that `_add` takes arguments of type `Number`,\n//. but this is not enforced. This allows type errors to be silently ignored:\n//.\n//. ```javascript\n//. _add ('2') ('2');\n//. // => '22'\n//. ```\n//.\n//. `add`, on the other hand, throws if applied to arguments of the wrong\n//. types:\n//.\n//. ```javascript\n//. add ('2') ('2');\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   1)  \"2\" :: String\n//. //\n//. //   The value at position 1 is not a member of ‘Number’.\n//. ```\n//.\n//. Type checking is performed as arguments are provided (rather than once all\n//. arguments have been provided), so type errors are reported early:\n//.\n//. ```javascript\n//. add ('X');\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   1)  \"X\" :: String\n//. //\n//. //   The value at position 1 is not a member of ‘Number’.\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-either'),\n                        require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'),\n                        require ('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-either',\n             'sanctuary-show',\n             'sanctuary-type-classes',\n             'sanctuary-type-identifiers'],\n            f);\n  } else {\n    self.sanctuaryDef = f (self.sanctuaryEither,\n                           self.sanctuaryShow,\n                           self.sanctuaryTypeClasses,\n                           self.sanctuaryTypeIdentifiers);\n  }\n\n} (function(Either, show, Z, type) {\n\n  'use strict';\n\n  var MAX_SAFE_INTEGER = Math.pow (2, 53) - 1;\n  var MIN_SAFE_INTEGER = -MAX_SAFE_INTEGER;\n\n  var slice             = Array.prototype.slice;\n  var hasOwnProperty    = Object.prototype.hasOwnProperty;\n  var toString          = Object.prototype.toString;\n\n  var inspect = (function() {\n    /* istanbul ignore else */\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n      var util = require ('util');\n      /* istanbul ignore else */\n      if (typeof util.inspect.custom === 'symbol') return util.inspect.custom;\n    }\n    return 'inspect';\n  } ());\n\n  //  Left :: a -> Either a b\n  var Left = Either.Left;\n\n  //  Right :: b -> Either a b\n  var Right = Either.Right;\n\n  //  K :: a -> b -> a\n  function K(x) { return function(y) { return x; }; }\n\n  //  W :: (a -> a -> b) -> a -> b\n  function W(f) { return function(x) { return f (x) (x); }; }\n\n  //  always0 :: a -> () -> a\n  function always0(x) { return function() { return x; }; }\n\n  //  always2 :: a -> (b, c) -> a\n  function always2(x) { return function(y, z) { return x; }; }\n\n  //  compose :: (b -> c, a -> b) -> (a -> c)\n  function compose(f, g) {\n    return function(x) {\n      return f (g (x));\n    };\n  }\n\n  //  id :: a -> a\n  function id(x) { return x; }\n\n  //  init :: Array a -> Array a\n  function init(xs) { return xs.slice (0, -1); }\n\n  //  isEmpty :: Array a -> Boolean\n  function isEmpty(xs) { return xs.length === 0; }\n\n  //  isPrefix :: Array a -> Array a -> Boolean\n  function isPrefix(candidate) {\n    return function(xs) {\n      if (candidate.length > xs.length) return false;\n      for (var idx = 0; idx < candidate.length; idx += 1) {\n        if (candidate[idx] !== xs[idx]) return false;\n      }\n      return true;\n    };\n  }\n\n  //  joinWith :: (String, Array String) -> String\n  function joinWith(separator, ss) {\n    return ss.join (separator);\n  }\n\n  //  last :: Array a -> a\n  function last(xs) { return xs[xs.length - 1]; }\n\n  //  memberOf :: Array a -> a -> Boolean\n  function memberOf(xs) {\n    return function(y) {\n      return xs.some (function(x) { return Z.equals (x, y); });\n    };\n  }\n\n  //  or :: (Array a, Array a) -> Array a\n  function or(xs, ys) { return isEmpty (xs) ? ys : xs; }\n\n  //  strRepeat :: (String, Integer) -> String\n  function strRepeat(s, times) {\n    return joinWith (s, Array (times + 1));\n  }\n\n  //  r :: Char -> String -> String\n  function r(c) {\n    return function(s) {\n      return strRepeat (c, s.length);\n    };\n  }\n\n  //  _ :: String -> String\n  var _ = r (' ');\n\n  //  sortedKeys :: Object -> Array String\n  function sortedKeys(o) {\n    return (Object.keys (o)).sort ();\n  }\n\n  //  stripOutermostParens :: String -> String\n  function stripOutermostParens(s) {\n    return s.slice ('('.length, -')'.length);\n  }\n\n  //  toMarkdownList :: (String, String, a -> String, Array a) -> String\n  function toMarkdownList(empty, s, f, xs) {\n    return isEmpty (xs) ?\n      empty :\n      Z.reduce (function(s, x) { return s + '  - ' + f (x) + '\\n'; }, s, xs);\n  }\n\n  //  trimTrailingSpaces :: String -> String\n  function trimTrailingSpaces(s) {\n    return s.replace (/[ ]+$/gm, '');\n  }\n\n  //  unless :: (Boolean, (a -> a), a) -> a\n  function unless(bool, f, x) {\n    return bool ? x : f (x);\n  }\n\n  //  when :: (Boolean, (a -> a), a) -> a\n  function when(bool, f, x) {\n    return bool ? f (x) : x;\n  }\n\n  //  wrap :: String -> String -> String -> String\n  function wrap(prefix) {\n    return function(suffix) {\n      return function(s) {\n        return prefix + s + suffix;\n      };\n    };\n  }\n\n  //  parenthesize :: String -> String\n  var parenthesize = wrap ('(') (')');\n\n  //  q :: String -> String\n  var q = wrap ('\\u2018') ('\\u2019');\n\n  //  stripNamespace :: String -> String\n  function stripNamespace(s) { return s.slice (s.indexOf ('/') + 1); }\n\n  //  _Type :: ... -> Type\n  function _Type(\n    type,       // :: String\n    name,       // :: String\n    url,        // :: String\n    format,     // :: (String -> String, String -> String -> String) -> String\n    test,       // :: Any -> Boolean\n    keys,       // :: Array String\n    types       // :: StrMap { extractor :: a -> Array b, type :: Type }\n  ) {\n    this._test = test;\n    this.format = format;\n    this.keys = keys;\n    this.name = name;\n    this.type = type;\n    this.types = types;\n    this.url = url;\n  }\n\n  _Type['@@type'] = 'sanctuary-def/Type';\n\n  //  Type#fantasy-land/equals :: Type ~> Type -> Boolean\n  _Type.prototype['fantasy-land/equals'] = function(other) {\n    return (\n      Z.equals (this.type, other.type) &&\n      Z.equals (this.name, other.name) &&\n      Z.equals (this.url, other.url) &&\n      Z.equals (this.keys, other.keys) &&\n      this.keys.every (function(k) {\n        return Z.equals (this.types[k].type, other.types[k].type);\n      }, this)\n    );\n  };\n\n  _Type.prototype.validate = function(x) {\n    if (!(this._test (x))) return Left ({value: x, propPath: []});\n    for (var idx = 0; idx < this.keys.length; idx += 1) {\n      var k = this.keys[idx];\n      var t = this.types[k];\n      for (var idx2 = 0, ys = t.extractor (x); idx2 < ys.length; idx2 += 1) {\n        var result = t.type.validate (ys[idx2]);\n        if (result.isLeft) {\n          var value = result.value.value;\n          var propPath = Z.concat ([k], result.value.propPath);\n          return Left ({value: value, propPath: propPath});\n        }\n      }\n    }\n    return Right (x);\n  };\n\n  _Type.prototype['@@show'] = function() {\n    return this.format (id, K (id));\n  };\n\n  var BINARY        = 'BINARY';\n  var FUNCTION      = 'FUNCTION';\n  var INCONSISTENT  = 'INCONSISTENT';\n  var NO_ARGUMENTS  = 'NO_ARGUMENTS';\n  var NULLARY       = 'NULLARY';\n  var RECORD        = 'RECORD';\n  var UNARY         = 'UNARY';\n  var UNKNOWN       = 'UNKNOWN';\n  var VARIABLE      = 'VARIABLE';\n\n  //  Inconsistent :: Type\n  var Inconsistent =\n  new _Type (INCONSISTENT, '', '', always2 ('???'), K (false), [], {});\n\n  //  NoArguments :: Type\n  var NoArguments =\n  new _Type (NO_ARGUMENTS, '', '', always2 ('()'), K (true), [], {});\n\n  //  typeEq :: String -> a -> Boolean\n  function typeEq(name) {\n    return function(x) {\n      return type (x) === name;\n    };\n  }\n\n  //  typeofEq :: String -> a -> Boolean\n  function typeofEq(typeof_) {\n    return function(x) {\n      // eslint-disable-next-line valid-typeof\n      return typeof x === typeof_;\n    };\n  }\n\n  //  functionUrl :: String -> String\n  function functionUrl(name) {\n    var version = '0.18.1';  // updated programmatically\n    return 'https://github.com/sanctuary-js/sanctuary-def/tree/v' + version +\n           '#' + stripNamespace (name);\n  }\n\n  //  NullaryTypeWithUrl :: (String, Any -> Boolean) -> Type\n  function NullaryTypeWithUrl(name, test) {\n    return NullaryType (name) (functionUrl (name)) (test);\n  }\n\n  //  EnumTypeWithUrl :: (String, Array Any) -> Type\n  function EnumTypeWithUrl(name, members) {\n    return EnumType (name) (functionUrl (name)) (members);\n  }\n\n  //  UnaryTypeWithUrl ::\n  //    (String, Any -> Boolean, t a -> Array a) -> (Type -> Type)\n  function UnaryTypeWithUrl(name, test, _1) {\n    return UnaryType (name) (functionUrl (name)) (test) (_1);\n  }\n\n  //  BinaryTypeWithUrl ::\n  //    (String, Any -> Boolean, t a b -> Array a, t a b -> Array b) ->\n  //      ((Type, Type) -> Type)\n  function BinaryTypeWithUrl(name, test, _1, _2) {\n    return BinaryType (name) (functionUrl (name)) (test) (_1) (_2);\n  }\n\n  //. ### Types\n  //.\n  //. Conceptually, a type is a set of values. One can think of a value of\n  //. type `Type` as a function of type `Any -> Boolean` which tests values\n  //. for membership in the set (though this is an oversimplification).\n\n  //# Any :: Type\n  //.\n  //. Type comprising every JavaScript value.\n  var Any = NullaryTypeWithUrl ('sanctuary-def/Any', K (true));\n\n  //# AnyFunction :: Type\n  //.\n  //. Type comprising every Function value.\n  var AnyFunction = NullaryTypeWithUrl ('Function', typeofEq ('function'));\n\n  //# Arguments :: Type\n  //.\n  //. Type comprising every [`arguments`][arguments] object.\n  var Arguments = NullaryTypeWithUrl ('Arguments', typeEq ('Arguments'));\n\n  //# Array :: Type -> Type\n  //.\n  //. Constructor for homogeneous Array types.\n  var Array_ = UnaryTypeWithUrl ('Array', typeEq ('Array'), id);\n\n  //# Array0 :: Type\n  //.\n  //. Type whose sole member is `[]`.\n  var Array0 = NullaryTypeWithUrl (\n    'sanctuary-def/Array0',\n    function(x) { return typeEq ('Array') (x) && x.length === 0; }\n  );\n\n  //# Array1 :: Type -> Type\n  //.\n  //. Constructor for singleton Array types.\n  var Array1 = UnaryTypeWithUrl (\n    'sanctuary-def/Array1',\n    function(x) { return typeEq ('Array') (x) && x.length === 1; },\n    id\n  );\n\n  //# Array2 :: Type -> Type -> Type\n  //.\n  //. Constructor for heterogeneous Array types of length 2. `['foo', true]` is\n  //. a member of `Array2 String Boolean`.\n  var Array2 = BinaryTypeWithUrl (\n    'sanctuary-def/Array2',\n    function(x) { return typeEq ('Array') (x) && x.length === 2; },\n    function(array2) { return [array2[0]]; },\n    function(array2) { return [array2[1]]; }\n  );\n\n  //# Boolean :: Type\n  //.\n  //. Type comprising `true` and `false`.\n  var Boolean_ = NullaryTypeWithUrl ('Boolean', typeofEq ('boolean'));\n\n  //# Date :: Type\n  //.\n  //. Type comprising every Date value.\n  var Date_ = NullaryTypeWithUrl ('Date', typeEq ('Date'));\n\n  //# Error :: Type\n  //.\n  //. Type comprising every Error value, including values of more specific\n  //. constructors such as [`SyntaxError`][] and [`TypeError`][].\n  var Error_ = NullaryTypeWithUrl ('Error', typeEq ('Error'));\n\n  //# FiniteNumber :: Type\n  //.\n  //. Type comprising every [`ValidNumber`][] value except `Infinity` and\n  //. `-Infinity`.\n  var FiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/FiniteNumber',\n    function(x) { return ValidNumber._test (x) && isFinite (x); }\n  );\n\n  //  augmentThunk :: NonEmpty (Array Type) -> NonEmpty (Array Type)\n  function augmentThunk(types) {\n    return types.length === 1 ? Z.concat ([NoArguments], types) : types;\n  }\n\n  //# Function :: NonEmpty (Array Type) -> Type\n  //.\n  //. Constructor for Function types.\n  //.\n  //. Examples:\n  //.\n  //.   - `$.Function ([$.Date, $.String])` represents the `Date -> String`\n  //.     type; and\n  //.   - `$.Function ([a, b, a])` represents the `(a, b) -> a` type.\n  function Function_(_types) {\n    var types = augmentThunk (_types);\n\n    function format(outer, inner) {\n      var xs = types.map (function(t, idx) {\n        return unless (t.type === RECORD || isEmpty (t.keys),\n                       stripOutermostParens,\n                       inner ('$' + show (idx + 1)) (show (t)));\n      });\n      var parenthesize = wrap (outer ('(')) (outer (')'));\n      return parenthesize (unless (types.length === 2,\n                                   parenthesize,\n                                   joinWith (outer (', '), init (xs))) +\n                           outer (' -> ') +\n                           last (xs));\n    }\n\n    var test = AnyFunction._test;\n\n    var $keys = [];\n    var $types = {};\n    types.forEach (function(t, idx) {\n      var k = '$' + show (idx + 1);\n      $keys.push (k);\n      $types[k] = {extractor: K ([]), type: t};\n    });\n\n    return new _Type (FUNCTION, '', '', format, test, $keys, $types);\n  }\n\n  //# GlobalRegExp :: Type\n  //.\n  //. Type comprising every [`RegExp`][] value whose `global` flag is `true`.\n  //.\n  //. See also [`NonGlobalRegExp`][].\n  var GlobalRegExp = NullaryTypeWithUrl (\n    'sanctuary-def/GlobalRegExp',\n    function(x) { return RegExp_._test (x) && x.global; }\n  );\n\n  //# HtmlElement :: Type\n  //.\n  //. Type comprising every [HTML element][].\n  var HtmlElement = NullaryTypeWithUrl (\n    'sanctuary-def/HtmlElement',\n    function(x) {\n      return /^\\[object HTML.+Element\\]$/.test (toString.call (x));\n    }\n  );\n\n  //# Integer :: Type\n  //.\n  //. Type comprising every integer in the range\n  //. [[`Number.MIN_SAFE_INTEGER`][min] .. [`Number.MAX_SAFE_INTEGER`][max]].\n  var Integer = NullaryTypeWithUrl (\n    'sanctuary-def/Integer',\n    function(x) {\n      return ValidNumber._test (x) &&\n             Math.floor (x) === x &&\n             x >= MIN_SAFE_INTEGER &&\n             x <= MAX_SAFE_INTEGER;\n    }\n  );\n\n  //# NegativeFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value less than zero.\n  var NegativeFiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NegativeFiniteNumber',\n    function(x) { return FiniteNumber._test (x) && x < 0; }\n  );\n\n  //# NegativeInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value less than zero.\n  var NegativeInteger = NullaryTypeWithUrl (\n    'sanctuary-def/NegativeInteger',\n    function(x) { return Integer._test (x) && x < 0; }\n  );\n\n  //# NegativeNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value less than zero.\n  var NegativeNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NegativeNumber',\n    function(x) { return Number_._test (x) && x < 0; }\n  );\n\n  //# NonEmpty :: Type -> Type\n  //.\n  //. Constructor for non-empty types. `$.NonEmpty ($.String)`, for example, is\n  //. the type comprising every [`String`][] value except `''`.\n  //.\n  //. The given type must satisfy the [Monoid][] and [Setoid][] specifications.\n  var NonEmpty = UnaryTypeWithUrl (\n    'sanctuary-def/NonEmpty',\n    function(x) {\n      return Z.Monoid.test (x) &&\n             Z.Setoid.test (x) &&\n             !(Z.equals (x, Z.empty (x.constructor)));\n    },\n    function(monoid) { return [monoid]; }\n  );\n\n  //# NonGlobalRegExp :: Type\n  //.\n  //. Type comprising every [`RegExp`][] value whose `global` flag is `false`.\n  //.\n  //. See also [`GlobalRegExp`][].\n  var NonGlobalRegExp = NullaryTypeWithUrl (\n    'sanctuary-def/NonGlobalRegExp',\n    function(x) { return RegExp_._test (x) && !x.global; }\n  );\n\n  //# NonNegativeInteger :: Type\n  //.\n  //. Type comprising every non-negative [`Integer`][] value (including `-0`).\n  //. Also known as the set of natural numbers under ISO 80000-2:2009.\n  var NonNegativeInteger = NullaryTypeWithUrl (\n    'sanctuary-def/NonNegativeInteger',\n    function(x) { return Integer._test (x) && x >= 0; }\n  );\n\n  //# NonZeroFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value except `0` and `-0`.\n  var NonZeroFiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NonZeroFiniteNumber',\n    function(x) { return FiniteNumber._test (x) && x !== 0; }\n  );\n\n  //# NonZeroInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value except `0` and `-0`.\n  var NonZeroInteger = NullaryTypeWithUrl (\n    'sanctuary-def/NonZeroInteger',\n    function(x) { return Integer._test (x) && x !== 0; }\n  );\n\n  //# NonZeroValidNumber :: Type\n  //.\n  //. Type comprising every [`ValidNumber`][] value except `0` and `-0`.\n  var NonZeroValidNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NonZeroValidNumber',\n    function(x) { return ValidNumber._test (x) && x !== 0; }\n  );\n\n  //# Null :: Type\n  //.\n  //. Type whose sole member is `null`.\n  var Null = NullaryTypeWithUrl ('Null', typeEq ('Null'));\n\n  //# Nullable :: Type -> Type\n  //.\n  //. Constructor for types which include `null` as a member.\n  var Nullable = UnaryTypeWithUrl (\n    'sanctuary-def/Nullable',\n    K (true),\n    function(nullable) {\n      // eslint-disable-next-line eqeqeq\n      return nullable === null ? [] : [nullable];\n    }\n  );\n\n  //# Number :: Type\n  //.\n  //. Type comprising every primitive Number value (including `NaN`).\n  var Number_ = NullaryTypeWithUrl ('Number', typeofEq ('number'));\n\n  //# Object :: Type\n  //.\n  //. Type comprising every \"plain\" Object value. Specifically, values\n  //. created via:\n  //.\n  //.   - object literal syntax;\n  //.   - [`Object.create`][]; or\n  //.   - the `new` operator in conjunction with `Object` or a custom\n  //.     constructor function.\n  var Object_ = NullaryTypeWithUrl ('Object', typeEq ('Object'));\n\n  //# PositiveFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value greater than zero.\n  var PositiveFiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/PositiveFiniteNumber',\n    function(x) { return FiniteNumber._test (x) && x > 0; }\n  );\n\n  //# PositiveInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value greater than zero.\n  var PositiveInteger = NullaryTypeWithUrl (\n    'sanctuary-def/PositiveInteger',\n    function(x) { return Integer._test (x) && x > 0; }\n  );\n\n  //# PositiveNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value greater than zero.\n  var PositiveNumber = NullaryTypeWithUrl (\n    'sanctuary-def/PositiveNumber',\n    function(x) { return Number_._test (x) && x > 0; }\n  );\n\n  //# RegExp :: Type\n  //.\n  //. Type comprising every RegExp value.\n  var RegExp_ = NullaryTypeWithUrl ('RegExp', typeEq ('RegExp'));\n\n  //# RegexFlags :: Type\n  //.\n  //. Type comprising the canonical RegExp flags:\n  //.\n  //.   - `''`\n  //.   - `'g'`\n  //.   - `'i'`\n  //.   - `'m'`\n  //.   - `'gi'`\n  //.   - `'gm'`\n  //.   - `'im'`\n  //.   - `'gim'`\n  var RegexFlags = EnumTypeWithUrl (\n    'sanctuary-def/RegexFlags',\n    ['', 'g', 'i', 'm', 'gi', 'gm', 'im', 'gim']\n  );\n\n  //# StrMap :: Type -> Type\n  //.\n  //. Constructor for homogeneous Object types.\n  //.\n  //. `{foo: 1, bar: 2, baz: 3}`, for example, is a member of `StrMap Number`;\n  //. `{foo: 1, bar: 2, baz: 'XXX'}` is not.\n  var StrMap = UnaryTypeWithUrl (\n    'sanctuary-def/StrMap',\n    Object_._test,\n    function(strMap) {\n      return Z.reduce (function(xs, x) { xs.push (x); return xs; },\n                       [],\n                       strMap);\n    }\n  );\n\n  //# String :: Type\n  //.\n  //. Type comprising every primitive String value.\n  var String_ = NullaryTypeWithUrl ('String', typeofEq ('string'));\n\n  //# Symbol :: Type\n  //.\n  //. Type comprising every Symbol value.\n  var Symbol_ = NullaryTypeWithUrl ('Symbol', typeofEq ('symbol'));\n\n  //# Type :: Type\n  //.\n  //. Type comprising every `Type` value.\n  var Type = NullaryTypeWithUrl ('Type', typeEq ('sanctuary-def/Type'));\n\n  //# TypeClass :: Type\n  //.\n  //. Type comprising every [`TypeClass`][] value.\n  var TypeClass = NullaryTypeWithUrl (\n    'TypeClass',\n    typeEq ('sanctuary-type-classes/TypeClass')\n  );\n\n  //# Undefined :: Type\n  //.\n  //. Type whose sole member is `undefined`.\n  var Undefined = NullaryTypeWithUrl ('Undefined', typeEq ('Undefined'));\n\n  //# Unknown :: Type\n  //.\n  //. Type used to represent missing type information. The type of `[]`,\n  //. for example, is `Array ???`.\n  //.\n  //. May be used with type constructors when defining environments. Given a\n  //. type constructor `List :: Type -> Type`, one could use `List ($.Unknown)`\n  //. to include an infinite number of types in an environment:\n  //.\n  //.   - `List Number`\n  //.   - `List String`\n  //.   - `List (List Number)`\n  //.   - `List (List String)`\n  //.   - `List (List (List Number))`\n  //.   - `List (List (List String))`\n  //.   - `...`\n  var Unknown =\n  new _Type (UNKNOWN, '', '', always2 ('Unknown'), K (true), [], {});\n\n  //# ValidDate :: Type\n  //.\n  //. Type comprising every [`Date`][] value except `new Date (NaN)`.\n  var ValidDate = NullaryTypeWithUrl (\n    'sanctuary-def/ValidDate',\n    function(x) { return Date_._test (x) && !isNaN (x.valueOf ()); }\n  );\n\n  //# ValidNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value except `NaN`.\n  var ValidNumber = NullaryTypeWithUrl (\n    'sanctuary-def/ValidNumber',\n    function(x) { return Number_._test (x) && !isNaN (x); }\n  );\n\n  //# env :: Array Type\n  //.\n  //. An array of [types][]:\n  //.\n  //.   - <code>[AnyFunction](#AnyFunction)</code>\n  //.   - <code>[Arguments](#Arguments)</code>\n  //.   - <code>[Array](#Array) ([Unknown](#Unknown))</code>\n  //.   - <code>[Boolean](#Boolean)</code>\n  //.   - <code>[Date](#Date)</code>\n  //.   - <code>[Error](#Error)</code>\n  //.   - <code>[HtmlElement](#HtmlElement)</code>\n  //.   - <code>[Null](#Null)</code>\n  //.   - <code>[Number](#Number)</code>\n  //.   - <code>[Object](#Object)</code>\n  //.   - <code>[RegExp](#RegExp)</code>\n  //.   - <code>[StrMap](#StrMap) ([Unknown](#Unknown))</code>\n  //.   - <code>[String](#String)</code>\n  //.   - <code>[Symbol](#Symbol)</code>\n  //.   - <code>[Undefined](#Undefined)</code>\n  var env = [\n    AnyFunction,\n    Arguments,\n    Array_ (Unknown),\n    Boolean_,\n    Date_,\n    Error_,\n    HtmlElement,\n    Null,\n    Number_,\n    Object_,\n    RegExp_,\n    StrMap (Unknown),\n    String_,\n    Symbol_,\n    Undefined\n  ];\n\n  //  Unchecked :: String -> Type\n  function Unchecked(s) { return NullaryType (s) ('') (K (true)); }\n\n  //  production :: Boolean\n  var production =\n    typeof process !== 'undefined' &&\n    /* global process:false */\n    process != null &&\n    process.env != null &&\n    process.env.NODE_ENV === 'production';\n\n  var def = _create ({checkTypes: !production, env: env});\n\n  //  numbers :: Array String\n  var numbers = [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine'\n  ];\n\n  //  numArgs :: Integer -> String\n  function numArgs(n) {\n    return (n < numbers.length ? numbers[n] : show (n)) + ' ' +\n           (n === 1 ? 'argument' : 'arguments');\n  }\n\n  //  expandUnknown :: ... -> Array Type\n  function expandUnknown(\n    env,            // :: Array Type\n    seen,           // :: Array Object\n    value,          // :: Any\n    r               // :: { extractor :: a -> Array b, type :: Type }\n  ) {\n    return r.type.type === UNKNOWN ?\n      _determineActualTypes (env, seen, r.extractor (value)) :\n      [r.type];\n  }\n\n  //  _determineActualTypes :: ... -> Array Type\n  function _determineActualTypes(\n    env,            // :: Array Type\n    seen,           // :: Array Object\n    values          // :: Array Any\n  ) {\n    function refine(types, value) {\n      var seen$;\n      if (typeof value === 'object' && value != null ||\n          typeof value === 'function') {\n        //  Abort if a circular reference is encountered; add the current\n        //  object to the array of seen objects otherwise.\n        if (seen.indexOf (value) >= 0) return [];\n        seen$ = Z.concat (seen, [value]);\n      } else {\n        seen$ = seen;\n      }\n      return Z.chain (function(t) {\n        return (\n          t.name === 'sanctuary-def/Nullable' || (t.validate (value)).isLeft ?\n            [] :\n          t.type === UNARY ?\n            Z.map (fromUnaryType (t),\n                   expandUnknown (env, seen$, value, t.types.$1)) :\n          t.type === BINARY ?\n            xprod (t,\n                   expandUnknown (env, seen$, value, t.types.$1),\n                   expandUnknown (env, seen$, value, t.types.$2)) :\n          // else\n            [t]\n        );\n      }, types);\n    }\n\n    return isEmpty (values) ?\n      [Unknown] :\n      or (Z.reduce (refine, env, values), [Inconsistent]);\n  }\n\n  //  isConsistent :: Type -> Boolean\n  function isConsistent(t) {\n    return t.type === UNARY   ? isConsistent (t.types.$1.type) :\n           t.type === BINARY  ? isConsistent (t.types.$1.type) &&\n                                isConsistent (t.types.$2.type) :\n           /* else */           t.type !== INCONSISTENT;\n  }\n\n  //  determineActualTypesStrict :: (Array Type, Array Any) -> Array Type\n  function determineActualTypesStrict(env, values) {\n    return Z.filter (isConsistent,\n                     _determineActualTypes (env, [], values));\n  }\n\n  //  determineActualTypesLoose :: (Array Type, Array Any) -> Array Type\n  function determineActualTypesLoose(env, values) {\n    return Z.reject (function(t) { return t.type === INCONSISTENT; },\n                     _determineActualTypes (env, [], values));\n  }\n\n  //  TypeInfo = { name :: String\n  //             , constraints :: StrMap (Array TypeClass)\n  //             , types :: NonEmpty (Array Type) }\n  //\n  //  TypeVarMap = StrMap { types :: Array Type\n  //                      , valuesByPath :: StrMap (Array Any) }\n  //\n  //  PropPath = Array (Number | String)\n\n  //  updateTypeVarMap :: ... -> TypeVarMap\n  function updateTypeVarMap(\n    env,            // :: Array Type\n    typeVarMap,     // :: TypeVarMap\n    typeVar,        // :: Type\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    values          // :: Array Any\n  ) {\n    var $typeVarMap = {};\n    for (var typeVarName in typeVarMap) {\n      var entry = typeVarMap[typeVarName];\n      var $entry = {types: entry.types.slice (), valuesByPath: {}};\n      for (var k in entry.valuesByPath) {\n        $entry.valuesByPath[k] = entry.valuesByPath[k].slice ();\n      }\n      $typeVarMap[typeVarName] = $entry;\n    }\n    if (!(hasOwnProperty.call ($typeVarMap, typeVar.name))) {\n      $typeVarMap[typeVar.name] = {types: env.slice (), valuesByPath: {}};\n    }\n\n    var key = JSON.stringify (Z.concat ([index], propPath));\n    if (!(hasOwnProperty.call ($typeVarMap[typeVar.name].valuesByPath, key))) {\n      $typeVarMap[typeVar.name].valuesByPath[key] = [];\n    }\n\n    var isNullaryTypeVar = isEmpty (typeVar.keys);\n    var isValid = test (env);\n\n    function expandUnknownStrict(value, r) {\n      return Z.filter (isConsistent, expandUnknown (env, [], value, r));\n    }\n\n    values.forEach (function(value) {\n      $typeVarMap[typeVar.name].valuesByPath[key].push (value);\n      $typeVarMap[typeVar.name].types = Z.chain (function(t) {\n        return (\n          t.keys.length < typeVar.keys.length || !isValid (t) (value) ?\n            [] :\n          isNullaryTypeVar && t.type === UNARY ?\n            Z.map (fromUnaryType (t),\n                   expandUnknownStrict (value, t.types.$1)) :\n          isNullaryTypeVar && t.type === BINARY ?\n            xprod (t,\n                   expandUnknownStrict (value, t.types.$1),\n                   expandUnknownStrict (value, t.types.$2)) :\n          // else\n            [t]\n        );\n      }, $typeVarMap[typeVar.name].types);\n    });\n\n    return $typeVarMap;\n  }\n\n  //  underlineTypeVars :: (TypeInfo, StrMap (Array Any)) -> String\n  function underlineTypeVars(typeInfo, valuesByPath) {\n    //  Note: Sorting these keys lexicographically is not \"correct\", but it\n    //  does the right thing for indexes less than 10.\n    var paths = Z.map (JSON.parse, sortedKeys (valuesByPath));\n    return underline (\n      typeInfo,\n      K (K (_)),\n      function(index) {\n        return function(f) {\n          return function(t) {\n            return function(propPath) {\n              var indexedPropPath = Z.concat ([index], propPath);\n              return function(s) {\n                if (paths.some (isPrefix (indexedPropPath))) {\n                  var key = JSON.stringify (indexedPropPath);\n                  if (!(hasOwnProperty.call (valuesByPath, key))) return s;\n                  if (!(isEmpty (valuesByPath[key]))) return f (s);\n                }\n                return _ (s);\n              };\n            };\n          };\n        };\n      }\n    );\n  }\n\n  //  satisfactoryTypes :: ... -> Either (() -> Error)\n  //                                     { typeVarMap :: TypeVarMap\n  //                                     , types :: Array Type }\n  function satisfactoryTypes(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    typeVarMap,     // :: TypeVarMap\n    expType,        // :: Type\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    values          // :: Array Any\n  ) {\n    var recur = satisfactoryTypes;\n\n    for (var idx = 0; idx < values.length; idx += 1) {\n      var result = expType.validate (values[idx]);\n      if (result.isLeft) {\n        return Left (function() {\n          return invalidValue (env,\n                               typeInfo,\n                               index,\n                               Z.concat (propPath, result.value.propPath),\n                               result.value.value);\n        });\n      }\n    }\n\n    switch (expType.type) {\n\n      case VARIABLE:\n        var typeVarName = expType.name;\n        var constraints = typeInfo.constraints;\n        if (hasOwnProperty.call (constraints, typeVarName)) {\n          var typeClasses = constraints[typeVarName];\n          for (idx = 0; idx < values.length; idx += 1) {\n            for (var idx2 = 0; idx2 < typeClasses.length; idx2 += 1) {\n              if (!typeClasses[idx2].test (values[idx])) {\n                return Left (function() {\n                  return typeClassConstraintViolation (\n                    env,\n                    typeInfo,\n                    typeClasses[idx2],\n                    index,\n                    propPath,\n                    values[idx],\n                    typeVarMap\n                  );\n                });\n              }\n            }\n          }\n        }\n\n        var typeVarMap$ = updateTypeVarMap (env,\n                                            typeVarMap,\n                                            expType,\n                                            index,\n                                            propPath,\n                                            values);\n\n        var okTypes = typeVarMap$[typeVarName].types;\n        return isEmpty (okTypes) ?\n          Left (function() {\n            return typeVarConstraintViolation (\n              env,\n              typeInfo,\n              index,\n              propPath,\n              typeVarMap$[typeVarName].valuesByPath\n            );\n          }) :\n          Z.reduce (function(e, t) {\n            return Z.chain (function(r) {\n              //  The `a` in `Functor f => f a` corresponds to the `a`\n              //  in `Maybe a` but to the `b` in `Either a b`. A type\n              //  variable's $1 will correspond to either $1 or $2 of\n              //  the actual type depending on the actual type's arity.\n              var offset = t.keys.length - expType.keys.length;\n              return expType.keys.reduce (function(e, k, idx) {\n                var extractor = t.types[t.keys[offset + idx]].extractor;\n                return Z.reduce (function(e, x) {\n                  return Z.chain (function(r) {\n                    return recur (env,\n                                  typeInfo,\n                                  r.typeVarMap,\n                                  expType.types[k].type,\n                                  index,\n                                  Z.concat (propPath, [k]),\n                                  [x]);\n                  }, e);\n                }, e, Z.chain (extractor, values));\n              }, Right (r));\n            }, e);\n          }, Right ({typeVarMap: typeVarMap$, types: okTypes}), okTypes);\n\n      case UNARY:\n        return Z.map (\n          function(result) {\n            return {\n              typeVarMap: result.typeVarMap,\n              types: Z.map (fromUnaryType (expType),\n                            or (result.types, [expType.types.$1.type]))\n            };\n          },\n          recur (env,\n                 typeInfo,\n                 typeVarMap,\n                 expType.types.$1.type,\n                 index,\n                 Z.concat (propPath, ['$1']),\n                 Z.chain (expType.types.$1.extractor, values))\n        );\n\n      case BINARY:\n        return Z.chain (\n          function(result) {\n            var $1s = result.types;\n            return Z.map (\n              function(result) {\n                var $2s = result.types;\n                return {\n                  typeVarMap: result.typeVarMap,\n                  types: xprod (expType,\n                                or ($1s, [expType.types.$1.type]),\n                                or ($2s, [expType.types.$2.type]))\n                };\n              },\n              recur (env,\n                     typeInfo,\n                     result.typeVarMap,\n                     expType.types.$2.type,\n                     index,\n                     Z.concat (propPath, ['$2']),\n                     Z.chain (expType.types.$2.extractor, values))\n            );\n          },\n          recur (env,\n                 typeInfo,\n                 typeVarMap,\n                 expType.types.$1.type,\n                 index,\n                 Z.concat (propPath, ['$1']),\n                 Z.chain (expType.types.$1.extractor, values))\n        );\n\n      case RECORD:\n        return Z.reduce (function(e, k) {\n          return Z.chain (function(r) {\n            return recur (env,\n                          typeInfo,\n                          r.typeVarMap,\n                          expType.types[k].type,\n                          index,\n                          Z.concat (propPath, [k]),\n                          Z.chain (expType.types[k].extractor, values));\n          }, e);\n        }, Right ({typeVarMap: typeVarMap, types: [expType]}), expType.keys);\n\n      default:\n        return Right ({typeVarMap: typeVarMap, types: [expType]});\n    }\n  }\n\n  //# test :: Array Type -> Type -> a -> Boolean\n  //.\n  //. Takes an environment, a type, and any value. Returns `true` if the value\n  //. is a member of the type; `false` otherwise.\n  //.\n  //. The environment is only significant if the type contains\n  //. [type variables][].\n  //.\n  //. One may define a more restrictive type in terms of a more general one:\n  //.\n  //. ```javascript\n  //. //    NonNegativeInteger :: Type\n  //. const NonNegativeInteger = $.NullaryType\n  //.   ('my-package/NonNegativeInteger')\n  //.   ('http://example.com/my-package#NonNegativeInteger')\n  //.   (x => $.test ([]) ($.Integer) (x) && x >= 0);\n  //. ```\n  //.\n  //. Using types as predicates is useful in other contexts too. One could,\n  //. for example, define a [record type][] for each endpoint of a REST API\n  //. and validate the bodies of incoming POST requests against these types.\n  function test(env) {\n    return function(t) {\n      return function(x) {\n        var typeInfo = {name: 'name', constraints: {}, types: [t]};\n        return (satisfactoryTypes (env, typeInfo, {}, t, 0, [], [x])).isRight;\n      };\n    };\n  }\n\n  //. ### Type constructors\n  //.\n  //. sanctuary-def provides several functions for defining types.\n\n  //# NullaryType :: String -> String -> (Any -> Boolean) -> Type\n  //.\n  //. Type constructor for types with no type variables (such as [`Number`][]).\n  //.\n  //. To define a nullary type `t` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`); and\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true` if\n  //.     (and only if) the value is a member of `t`.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Integer :: Type\n  //. const Integer = $.NullaryType\n  //.   ('my-package/Integer')\n  //.   ('http://example.com/my-package#Integer')\n  //.   (x => typeof x === 'number' &&\n  //.         Math.floor (x) === x &&\n  //.         x >= Number.MIN_SAFE_INTEGER &&\n  //.         x <= Number.MAX_SAFE_INTEGER);\n  //.\n  //. //    NonZeroInteger :: Type\n  //. const NonZeroInteger = $.NullaryType\n  //.   ('my-package/NonZeroInteger')\n  //.   ('http://example.com/my-package#NonZeroInteger')\n  //.   (x => $.test ([]) (Integer) (x) && x !== 0);\n  //.\n  //. //    rem :: Integer -> NonZeroInteger -> Integer\n  //. const rem =\n  //. def ('rem')\n  //.     ({})\n  //.     ([Integer, NonZeroInteger, Integer])\n  //.     (x => y => x % y);\n  //.\n  //. rem (42) (5);\n  //. // => 2\n  //.\n  //. rem (0.5);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   rem :: Integer -> NonZeroInteger -> Integer\n  //. //          ^^^^^^^\n  //. //             1\n  //. //\n  //. //   1)  0.5 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘Integer’.\n  //.\n  //. rem (42) (0);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   rem :: Integer -> NonZeroInteger -> Integer\n  //. //                     ^^^^^^^^^^^^^^\n  //. //                           1\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘NonZeroInteger’.\n  //. ```\n  function NullaryType(name) {\n    function format(outer, inner) {\n      return outer (stripNamespace (name));\n    }\n    return function(url) {\n      return function(test) {\n        return new _Type (NULLARY, name, url, format, test, [], {});\n      };\n    };\n  }\n\n  var CheckedNullaryType =\n  def ('NullaryType')\n      ({})\n      ([String_, String_, Function_ ([Any, Boolean_]), Type])\n      (NullaryType);\n\n  //# UnaryType :: String -> String -> (Any -> Boolean) -> (t a -> Array a) -> Type -> Type\n  //.\n  //. Type constructor for types with one type variable (such as [`Array`][]).\n  //.\n  //. To define a unary type `t a` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`);\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if (and only if) the value is a member of `t x` for some type `x`;\n  //.\n  //.   - a function which takes any value of type `t a` and returns an array\n  //.     of the values of type `a` contained in the `t` (exposed as\n  //.     `t.types.$1.extractor`); and\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`).\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. const show = require ('sanctuary-show');\n  //. const type = require ('sanctuary-type-identifiers');\n  //.\n  //. //    maybeTypeIdent :: String\n  //. const maybeTypeIdent = 'my-package/Maybe';\n  //.\n  //. //    Maybe :: Type -> Type\n  //. const Maybe = $.UnaryType\n  //.   (maybeTypeIdent)\n  //.   ('http://example.com/my-package#Maybe')\n  //.   (x => type (x) === maybeTypeIdent)\n  //.   (maybe => maybe.isJust ? [maybe.value] : []);\n  //.\n  //. //    MaybeTypeRep :: TypeRep Maybe\n  //. const MaybeTypeRep = {'@@type': maybeTypeIdent};\n  //.\n  //. //    Nothing :: Maybe a\n  //. const Nothing = {\n  //.   'constructor': MaybeTypeRep,\n  //.   'isJust': false,\n  //.   'isNothing': true,\n  //.   '@@show': () => 'Nothing',\n  //. };\n  //.\n  //. //    Just :: a -> Maybe a\n  //. const Just = x => ({\n  //.   'constructor': MaybeTypeRep,\n  //.   'isJust': true,\n  //.   'isNothing': false,\n  //.   '@@show': () => `Just (${show (x)})`,\n  //.   'value': x,\n  //. });\n  //.\n  //. //    fromMaybe :: a -> Maybe a -> a\n  //. const fromMaybe =\n  //. def ('fromMaybe')\n  //.     ({})\n  //.     ([a, Maybe (a), a])\n  //.     (x => m => m.isJust ? m.value : x);\n  //.\n  //. fromMaybe (0) (Just (42));\n  //. // => 42\n  //.\n  //. fromMaybe (0) (Nothing);\n  //. // => 0\n  //.\n  //. fromMaybe (0) (Just ('XXX'));\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   fromMaybe :: a -> Maybe a -> a\n  //. //                ^          ^\n  //. //                1          2\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   2)  \"XXX\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  function UnaryType(name) {\n    return function(url) {\n      return function(test) {\n        return function(_1) {\n          return function($1) {\n            function format(outer, inner) {\n              return outer ('(' + stripNamespace (name) + ' ') +\n                     inner ('$1') (show ($1)) +\n                     outer (')');\n            }\n            var types = {$1: {extractor: _1, type: $1}};\n            return new _Type (UNARY, name, url, format, test, ['$1'], types);\n          };\n        };\n      };\n    };\n  }\n\n  var CheckedUnaryType =\n  def ('UnaryType')\n      ({})\n      ([String_,\n        String_,\n        Function_ ([Any, Boolean_]),\n        Function_ ([Unchecked ('t a'), Array_ (Unchecked ('a'))]),\n        AnyFunction])\n      (function(name) {\n         return function(url) {\n           return function(test) {\n             return compose (def (stripNamespace (name)) ({}) ([Type, Type]),\n                             UnaryType (name) (url) (test));\n           };\n         };\n       });\n\n  //  fromUnaryType :: Type -> (Type -> Type)\n  function fromUnaryType(t) {\n    return UnaryType (t.name) (t.url) (t._test) (t.types.$1.extractor);\n  }\n\n  //# BinaryType :: String -> String -> (Any -> Boolean) -> (t a b -> Array a) -> (t a b -> Array b) -> Type -> Type -> Type\n  //.\n  //. Type constructor for types with two type variables (such as\n  //. [`Array2`][]).\n  //.\n  //. To define a binary type `t a b` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`);\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if (and only if) the value is a member of `t x y` for some types\n  //.     `x` and `y`;\n  //.\n  //.   - a function which takes any value of type `t a b` and returns an array\n  //.     of the values of type `a` contained in the `t` (exposed as\n  //.     `t.types.$1.extractor`);\n  //.\n  //.   - a function which takes any value of type `t a b` and returns an array\n  //.     of the values of type `b` contained in the `t` (exposed as\n  //.     `t.types.$2.extractor`);\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`); and\n  //.\n  //.   - the type of `b` (exposed as `t.types.$2.type`).\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. const type = require ('sanctuary-type-identifiers');\n  //.\n  //. //    pairTypeIdent :: String\n  //. const pairTypeIdent = 'my-package/Pair';\n  //.\n  //. //    $Pair :: Type -> Type -> Type\n  //. const $Pair = $.BinaryType\n  //.   (pairTypeIdent)\n  //.   ('http://example.com/my-package#Pair')\n  //.   (x => type (x) === pairTypeIdent)\n  //.   (({fst}) => [fst])\n  //.   (({snd}) => [snd]);\n  //.\n  //. //    PairTypeRep :: TypeRep Pair\n  //. const PairTypeRep = {'@@type': pairTypeIdent};\n  //.\n  //. //    Pair :: a -> b -> Pair a b\n  //. const Pair =\n  //. def ('Pair')\n  //.     ({})\n  //.     ([a, b, $Pair (a) (b)])\n  //.     (fst => snd => ({\n  //.        'constructor': PairTypeRep,\n  //.        'fst': fst,\n  //.        'snd': snd,\n  //.        '@@show': () => `Pair (${show (fst)}) (${show (snd)})`,\n  //.      }));\n  //.\n  //. //    Rank :: Type\n  //. const Rank = $.NullaryType\n  //.   ('my-package/Rank')\n  //.   ('http://example.com/my-package#Rank')\n  //.   (x => typeof x === 'string' &&\n  //.         /^(A|2|3|4|5|6|7|8|9|10|J|Q|K)$/.test (x));\n  //.\n  //. //    Suit :: Type\n  //. const Suit = $.NullaryType\n  //.   ('my-package/Suit')\n  //.   ('http://example.com/my-package#Suit')\n  //.   (x => typeof x === 'string' &&\n  //.         /^[\\u2660\\u2663\\u2665\\u2666]$/.test (x));\n  //.\n  //. //    Card :: Type\n  //. const Card = $Pair (Rank) (Suit);\n  //.\n  //. //    showCard :: Card -> String\n  //. const showCard =\n  //. def ('showCard')\n  //.     ({})\n  //.     ([Card, $.String])\n  //.     (card => card.fst + card.snd);\n  //.\n  //. showCard (Pair ('A') ('♠'));\n  //. // => 'A♠'\n  //.\n  //. showCard (Pair ('X') ('♠'));\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   showCard :: Pair Rank Suit -> String\n  //. //                    ^^^^\n  //. //                     1\n  //. //\n  //. //   1)  \"X\" :: String\n  //. //\n  //. //   The value at position 1 is not a member of ‘Rank’.\n  //. ```\n  function BinaryType(name) {\n    return function(url) {\n      return function(test) {\n        return function(_1) {\n          return function(_2) {\n            return function($1) {\n              return function($2) {\n                function format(outer, inner) {\n                  return outer ('(' + stripNamespace (name) + ' ') +\n                         inner ('$1') (show ($1)) +\n                         outer (' ') +\n                         inner ('$2') (show ($2)) +\n                         outer (')');\n                }\n                return new _Type (BINARY,\n                                  name,\n                                  url,\n                                  format,\n                                  test,\n                                  ['$1', '$2'],\n                                  {$1: {extractor: _1, type: $1},\n                                   $2: {extractor: _2, type: $2}});\n              };\n            };\n          };\n        };\n      };\n    };\n  }\n\n  var CheckedBinaryType =\n  def ('BinaryType')\n      ({})\n      ([String_,\n        String_,\n        Function_ ([Any, Boolean_]),\n        Function_ ([Unchecked ('t a b'), Array_ (Unchecked ('a'))]),\n        Function_ ([Unchecked ('t a b'), Array_ (Unchecked ('b'))]),\n        AnyFunction])\n      (function(name) {\n         return function(url) {\n           return function(test) {\n             return function(_1) {\n               return function(_2) {\n                 return def (stripNamespace (name))\n                            ({})\n                            ([Type, Type, Type])\n                            (BinaryType (name) (url) (test) (_1) (_2));\n               };\n             };\n           };\n         };\n       });\n\n  //  xprod :: (Type, Array Type, Array Type) -> Array Type\n  function xprod(t, $1s, $2s) {\n    return Z.chain (\n      function(specialize) { return Z.map (specialize, $2s); },\n      Z.map (BinaryType (t.name)\n                        (t.url)\n                        (t._test)\n                        (t.types.$1.extractor)\n                        (t.types.$2.extractor),\n             $1s)\n    );\n  }\n\n  //# EnumType :: String -> String -> Array Any -> Type\n  //.\n  //. Type constructor for [enumerated types][] (such as [`RegexFlags`][]).\n  //.\n  //. To define an enumerated type `t` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`); and\n  //.\n  //.   - an array of distinct values.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Denomination :: Type\n  //. const Denomination = $.EnumType\n  //.   ('my-package/Denomination')\n  //.   ('http://example.com/my-package#Denomination')\n  //.   ([10, 20, 50, 100, 200]);\n  //. ```\n  function EnumType(name) {\n    return function(url) {\n      return compose (NullaryType (name) (url), memberOf);\n    };\n  }\n\n  var CheckedEnumType =\n  def ('EnumType')\n      ({})\n      ([String_, String_, Array_ (Any), Type])\n      (EnumType);\n\n  //# RecordType :: StrMap Type -> Type\n  //.\n  //. `RecordType` is used to construct record types. The type definition\n  //. specifies the name and type of each required field. A field is an\n  //. enumerable property (either an own property or an inherited property).\n  //.\n  //. To define a record type one must provide:\n  //.\n  //.   - an object mapping field name to type.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Point :: Type\n  //. const Point = $.RecordType ({x: $.FiniteNumber, y: $.FiniteNumber});\n  //.\n  //. //    dist :: Point -> Point -> FiniteNumber\n  //. const dist =\n  //. def ('dist')\n  //.     ({})\n  //.     ([Point, Point, $.FiniteNumber])\n  //.     (p => q => Math.sqrt (Math.pow (p.x - q.x, 2) +\n  //.                           Math.pow (p.y - q.y, 2)));\n  //.\n  //. dist ({x: 0, y: 0}) ({x: 3, y: 4});\n  //. // => 5\n  //.\n  //. dist ({x: 0, y: 0}) ({x: 3, y: 4, color: 'red'});\n  //. // => 5\n  //.\n  //. dist ({x: 0, y: 0}) ({x: NaN, y: NaN});\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber\n  //. //                                                              ^^^^^^^^^^^^\n  //. //                                                                   1\n  //. //\n  //. //   1)  NaN :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘FiniteNumber’.\n  //.\n  //. dist (0);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber\n  //. //           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //. //                              1\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘{ x :: FiniteNumber, y :: FiniteNumber }’.\n  //. ```\n  function RecordType(fields) {\n    var keys = sortedKeys (fields);\n\n    function format(outer, inner) {\n      if (isEmpty (keys)) return outer ('{}');\n      var reprs = Z.map (function(k) {\n        var t = fields[k];\n        return outer (' ') +\n               outer (/^(?!\\d)[$\\w]+$/.test (k) ? k : show (k)) +\n               outer (' :: ') +\n               unless (t.type === RECORD || isEmpty (t.keys),\n                       stripOutermostParens,\n                       inner (k) (show (t)));\n      }, keys);\n      return wrap (outer ('{')) (outer (' }')) (joinWith (outer (','), reprs));\n    }\n\n    function test(x) {\n      var missing = {};\n      keys.forEach (function(k) { missing[k] = k; });\n      for (var k in x) delete missing[k];\n      return isEmpty (Object.keys (missing));\n    }\n\n    var $types = {};\n    keys.forEach (function(k) {\n      $types[k] = {extractor: function(x) { return [x[k]]; }, type: fields[k]};\n    });\n\n    return new _Type (RECORD, '', '', format, test, keys, $types);\n  }\n\n  var CheckedRecordType =\n  def ('RecordType') ({}) ([StrMap (Type), Type]) (RecordType);\n\n  //# TypeVariable :: String -> Type\n  //.\n  //. Polymorphism is powerful. Not being able to define a function for\n  //. all types would be very limiting indeed: one couldn't even define the\n  //. identity function!\n  //.\n  //. Before defining a polymorphic function one must define one or more type\n  //. variables:\n  //.\n  //. ```javascript\n  //. const a = $.TypeVariable ('a');\n  //. const b = $.TypeVariable ('b');\n  //.\n  //. //    id :: a -> a\n  //. const id = def ('id') ({}) ([a, a]) (x => x);\n  //.\n  //. id (42);\n  //. // => 42\n  //.\n  //. id (null);\n  //. // => null\n  //. ```\n  //.\n  //. The same type variable may be used in multiple positions, creating a\n  //. constraint:\n  //.\n  //. ```javascript\n  //. //    cmp :: a -> a -> Number\n  //. const cmp =\n  //. def ('cmp')\n  //.     ({})\n  //.     ([a, a, $.Number])\n  //.     (x => y => x < y ? -1 : x > y ? 1 : 0);\n  //.\n  //. cmp (42) (42);\n  //. // => 0\n  //.\n  //. cmp ('a') ('z');\n  //. // => -1\n  //.\n  //. cmp ('z') ('a');\n  //. // => 1\n  //.\n  //. cmp (0) ('1');\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   cmp :: a -> a -> Number\n  //. //          ^    ^\n  //. //          1    2\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   2)  \"1\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  function TypeVariable(name) {\n    return new _Type (VARIABLE, name, '', always2 (name), K (true), [], {});\n  }\n\n  var CheckedTypeVariable =\n  def ('TypeVariable') ({}) ([String_, Type]) (TypeVariable);\n\n  //# UnaryTypeVariable :: String -> Type -> Type\n  //.\n  //. Combines [`UnaryType`][] and [`TypeVariable`][].\n  //.\n  //. To define a unary type variable `t a` one must provide:\n  //.\n  //.   - a name (conventionally matching `^[a-z]$`); and\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`).\n  //.\n  //. Consider the type of a generalized `map`:\n  //.\n  //. ```haskell\n  //. map :: Functor f => (a -> b) -> f a -> f b\n  //. ```\n  //.\n  //. `f` is a unary type variable. With two (nullary) type variables, one\n  //. unary type variable, and one [type class][] it's possible to define a\n  //. fully polymorphic `map` function:\n  //.\n  //. ```javascript\n  //. const $ = require ('sanctuary-def');\n  //. const Z = require ('sanctuary-type-classes');\n  //.\n  //. const a = $.TypeVariable ('a');\n  //. const b = $.TypeVariable ('b');\n  //. const f = $.UnaryTypeVariable ('f');\n  //.\n  //. //    map :: Functor f => (a -> b) -> f a -> f b\n  //. const map =\n  //. def ('map')\n  //.     ({f: [Z.Functor]})\n  //.     ([$.Function ([a, b]), f (a), f (b)])\n  //.     (f => functor => Z.map (f, functor));\n  //. ```\n  //.\n  //. Whereas a regular type variable is fully resolved (`a` might become\n  //. `Array (Array String)`, for example), a unary type variable defers to\n  //. its type argument, which may itself be a type variable. The type argument\n  //. corresponds to the type argument of a unary type or the *second* type\n  //. argument of a binary type. The second type argument of `Map k v`, for\n  //. example, is `v`. One could replace `Functor => f` with `Map k` or with\n  //. `Map Integer`, but not with `Map`.\n  //.\n  //. This shallow inspection makes it possible to constrain a value's \"outer\"\n  //. and \"inner\" types independently.\n  function UnaryTypeVariable(name) {\n    return function($1) {\n      function format(outer, inner) {\n        return outer ('(' + name + ' ') +\n               inner ('$1') (show ($1)) +\n               outer (')');\n      }\n      var types = {$1: {extractor: K ([]), type: $1}};\n      return new _Type (VARIABLE, name, '', format, K (true), ['$1'], types);\n    };\n  }\n\n  var CheckedUnaryTypeVariable =\n  def ('UnaryTypeVariable')\n      ({})\n      ([String_, AnyFunction])\n      (function(name) {\n         return def (name) ({}) ([Type, Type]) (UnaryTypeVariable (name));\n       });\n\n  //# BinaryTypeVariable :: String -> Type -> Type -> Type\n  //.\n  //. Combines [`BinaryType`][] and [`TypeVariable`][].\n  //.\n  //. To define a binary type variable `t a b` one must provide:\n  //.\n  //.   - a name (conventionally matching `^[a-z]$`);\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`); and\n  //.\n  //.   - the type of `b` (exposed as `t.types.$2.type`).\n  //.\n  //. The more detailed explanation of [`UnaryTypeVariable`][] also applies to\n  //. `BinaryTypeVariable`.\n  function BinaryTypeVariable(name) {\n    return function($1) {\n      return function($2) {\n        function format(outer, inner) {\n          return outer ('(' + name + ' ') +\n                 inner ('$1') (show ($1)) +\n                 outer (' ') +\n                 inner ('$2') (show ($2)) +\n                 outer (')');\n        }\n        var keys = ['$1', '$2'];\n        var types = {$1: {extractor: K ([]), type: $1},\n                     $2: {extractor: K ([]), type: $2}};\n        return new _Type (VARIABLE, name, '', format, K (true), keys, types);\n      };\n    };\n  }\n\n  var CheckedBinaryTypeVariable =\n  def ('BinaryTypeVariable')\n      ({})\n      ([String_, AnyFunction])\n      (function(name) {\n         return def (name)\n                    ({})\n                    ([Type, Type, Type])\n                    (BinaryTypeVariable (name));\n       });\n\n  //# Thunk :: Type -> Type\n  //.\n  //. `$.Thunk (T)` is shorthand for `$.Function ([T])`, the type comprising\n  //. every nullary function (thunk) which returns a value of type `T`.\n  var Thunk =\n  def ('Thunk')\n      ({})\n      ([Type, Type])\n      (function(t) { return Function_ ([t]); });\n\n  //# Predicate :: Type -> Type\n  //.\n  //. `$.Predicate (T)` is shorthand for `$.Function ([T, $.Boolean])`, the\n  //. type comprising every predicate function which takes a value of type `T`.\n  var Predicate =\n  def ('Predicate')\n      ({})\n      ([Type, Type])\n      (function(t) { return Function_ ([t, Boolean_]); });\n\n  //. ### Type classes\n  //.\n  //. `concatS`, defined earlier, is a function which concatenates two strings.\n  //. This is overly restrictive, since other types support concatenation\n  //. (Array, for example).\n  //.\n  //. One could use a type variable to define a polymorphic \"concat\" function:\n  //.\n  //. ```javascript\n  //. //    _concat :: a -> a -> a\n  //. const _concat =\n  //. def ('_concat')\n  //.     ({})\n  //.     ([a, a, a])\n  //.     (x => y => x.concat (y));\n  //.\n  //. _concat ('fizz') ('buzz');\n  //. // => 'fizzbuzz'\n  //.\n  //. _concat ([1, 2]) ([3, 4]);\n  //. // => [1, 2, 3, 4]\n  //.\n  //. _concat ([1, 2]) ('buzz');\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   _concat :: a -> a -> a\n  //. //              ^    ^\n  //. //              1    2\n  //. //\n  //. //   1)  [1, 2] :: Array Number\n  //. //\n  //. //   2)  \"buzz\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  //.\n  //. The type of `_concat` is misleading: it suggests that it can operate on\n  //. any two values of *any* one type. In fact there's an implicit constraint,\n  //. since the type must support concatenation (in [mathematical][semigroup]\n  //. terms, the type must have a [semigroup][FL:Semigroup]). Violating this\n  //. implicit constraint results in a run-time error in the implementation:\n  //.\n  //. ```javascript\n  //. _concat (null) (null);\n  //. // ! TypeError: Cannot read property 'concat' of null\n  //. ```\n  //.\n  //. The solution is to constrain `a` by first defining a [`TypeClass`][]\n  //. value, then specifying the constraint in the definition of the \"concat\"\n  //. function:\n  //.\n  //. ```javascript\n  //. const Z = require ('sanctuary-type-classes');\n  //.\n  //. //    Semigroup :: TypeClass\n  //. const Semigroup = Z.TypeClass (\n  //.   'my-package/Semigroup',\n  //.   'http://example.com/my-package#Semigroup',\n  //.   [],\n  //.   x => x != null && typeof x.concat === 'function'\n  //. );\n  //.\n  //. //    concat :: Semigroup a => a -> a -> a\n  //. const concat =\n  //. def ('concat')\n  //.     ({a: [Semigroup]})\n  //.     ([a, a, a])\n  //.     (x => y => x.concat (y));\n  //.\n  //. concat ([1, 2]) ([3, 4]);\n  //. // => [1, 2, 3, 4]\n  //.\n  //. concat (null) (null);\n  //. // ! TypeError: Type-class constraint violation\n  //. //\n  //. //   concat :: Semigroup a => a -> a -> a\n  //. //             ^^^^^^^^^^^    ^\n  //. //                            1\n  //. //\n  //. //   1)  null :: Null\n  //. //\n  //. //   ‘concat’ requires ‘a’ to satisfy the Semigroup type-class constraint; the value at position 1 does not.\n  //. //\n  //. //   See http://example.com/my-package#Semigroup for information about the my-package/Semigroup type class.\n  //. ```\n  //.\n  //. Multiple constraints may be placed on a type variable by including\n  //. multiple `TypeClass` values in the array (e.g. `{a: [Foo, Bar, Baz]}`).\n\n  //  invalidArgumentsCount :: (TypeInfo, Integer, Integer, Array Any) -> Error\n  //\n  //  This function is used in `curry` when a function defined via `def`\n  //  is applied to too many arguments.\n  function invalidArgumentsCount(typeInfo, index, numArgsExpected, args) {\n    return new TypeError (trimTrailingSpaces (\n      q (typeInfo.name) + ' applied to the wrong number of arguments\\n\\n' +\n      underline (\n        typeInfo,\n        K (K (_)),\n        function(index_) {\n          return function(f) {\n            return K (K (index_ === index ? f : _));\n          };\n        }\n      ) + '\\n' +\n      'Expected ' + numArgs (numArgsExpected) +\n      ' but received ' + numArgs (args.length) +\n      toMarkdownList ('.\\n', ':\\n\\n', show, args)\n    ));\n  }\n\n  //  constraintsRepr :: ... -> String\n  function constraintsRepr(\n    constraints,    // :: StrMap (Array TypeClass)\n    outer,          // :: String -> String\n    inner           // :: String -> TypeClass -> String -> String\n  ) {\n    var $reprs = [];\n    (sortedKeys (constraints)).forEach (function(k) {\n      var f = inner (k);\n      constraints[k].forEach (function(typeClass) {\n        $reprs.push (\n          f (typeClass) (stripNamespace (typeClass.name) + ' ' + k)\n        );\n      });\n    });\n    return when ($reprs.length > 0,\n                 function(s) { return s + outer (' => '); },\n                 when ($reprs.length > 1,\n                       wrap (outer ('(')) (outer (')')),\n                       joinWith (outer (', '), $reprs)));\n  }\n\n  //  label :: String -> String -> String\n  function label(label) {\n    return function(s) {\n      var delta = s.length - label.length;\n      return strRepeat (' ', Math.floor (delta / 2)) + label +\n             strRepeat (' ', Math.ceil (delta / 2));\n    };\n  }\n\n  //  typeVarNames :: Type -> Array String\n  function typeVarNames(t) {\n    return Z.concat (\n      t.type === VARIABLE ? [t.name] : [],\n      Z.chain (function(k) { return typeVarNames (t.types[k].type); }, t.keys)\n    );\n  }\n\n  //  showTypeWith :: TypeInfo -> Type -> String\n  function showTypeWith(typeInfo) {\n    var names = Z.chain (typeVarNames, typeInfo.types);\n    return function(t) {\n      var code = 'a'.charCodeAt (0);\n      return unless (\n        t.type === FUNCTION || t.type === RECORD || isEmpty (t.keys),\n        stripOutermostParens,\n        (show (t)).replace (/\\bUnknown\\b/g, function() {\n          // eslint-disable-next-line no-plusplus\n          do var name = String.fromCharCode (code++);\n          while (names.indexOf (name) >= 0);\n          return name;\n        })\n      );\n    };\n  }\n\n  //  showTypeQuoted :: Type -> String\n  function showTypeQuoted(t) {\n    return q (unless (t.type === RECORD || isEmpty (t.keys),\n                      stripOutermostParens,\n                      show (t)));\n  }\n\n  //  showValuesAndTypes :: ... -> String\n  function showValuesAndTypes(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    values,         // :: Array Any\n    pos             // :: Integer\n  ) {\n    var showType = showTypeWith (typeInfo);\n    return show (pos) + ')  ' + joinWith ('\\n    ', Z.map (function(x) {\n      var types = determineActualTypesLoose (env, [x]);\n      return show (x) + ' :: ' + joinWith (', ', Z.map (showType, types));\n    }, values));\n  }\n\n  //  typeSignature :: TypeInfo -> String\n  function typeSignature(typeInfo) {\n    var reprs = Z.map (showTypeWith (typeInfo), typeInfo.types);\n    var arity = reprs.length - 1;\n    return typeInfo.name + ' :: ' +\n             constraintsRepr (typeInfo.constraints, id, K (K (id))) +\n             when (arity === 0,\n                   parenthesize,\n                   joinWith (' -> ', init (reprs))) +\n             ' -> ' + last (reprs);\n  }\n\n  //  _underline :: ... -> String\n  function _underline(\n    t,              // :: Type\n    propPath,       // :: PropPath\n    formatType3     // :: Type -> Array String -> String -> String\n  ) {\n    return unless (t.type === RECORD ||\n                     isEmpty (t.keys) ||\n                     t.type === FUNCTION && isEmpty (propPath) ||\n                     !isEmpty (propPath),\n                   stripOutermostParens,\n                   formatType3 (t) (propPath) (t.format (_, function(k) {\n                     return K (_underline (t.types[k].type,\n                                           Z.concat (propPath, [k]),\n                                           formatType3));\n                   })));\n  }\n\n  //  underline :: ... -> String\n  function underline(\n    typeInfo,               // :: TypeInfo\n    underlineConstraint,    // :: String -> TypeClass -> String -> String\n    formatType5\n    // :: Integer -> (String -> String) -> Type -> PropPath -> String -> String\n  ) {\n    var st = typeInfo.types.reduce (function(st, t, index) {\n      var formatType4 = formatType5 (index);\n      st.numbers.push (_underline (t, [], formatType4 (function(s) {\n        return label (show (st.counter += 1)) (s);\n      })));\n      st.carets.push (_underline (t, [], W (function(type) {\n        var repr = show (type);\n        var parenthesized = repr.slice (0, 1) + repr.slice (-1) === '()';\n        return formatType4 (function(s) {\n          return parenthesized && repr !== '()' && s.length === repr.length ?\n            _ ('(') + r ('^') (s.slice (1, -1)) + _ (')') :\n            r ('^') (s);\n        });\n      })));\n      return st;\n    }, {carets: [], numbers: [], counter: 0});\n\n    return typeSignature (typeInfo) + '\\n' +\n           _ (typeInfo.name + ' :: ') +\n              constraintsRepr (typeInfo.constraints, _, underlineConstraint) +\n              joinWith (_ (' -> '), st.carets) + '\\n' +\n           _ (typeInfo.name + ' :: ') +\n              constraintsRepr (typeInfo.constraints, _, K (K (_))) +\n              joinWith (_ (' -> '), st.numbers) + '\\n';\n  }\n\n  //  resolvePropPath :: (Type, Array String) -> Type\n  function resolvePropPath(t, propPath) {\n    return Z.reduce (function(t, prop) { return t.types[prop].type; },\n                     t,\n                     propPath);\n  }\n\n  //  formatType6 ::\n  //    PropPath -> Integer -> (String -> String) ->\n  //      Type -> PropPath -> String -> String\n  function formatType6(indexedPropPath) {\n    return function(index_) {\n      return function(f) {\n        return function(t) {\n          return function(propPath_) {\n            var indexedPropPath_ = Z.concat ([index_], propPath_);\n            var p = isPrefix (indexedPropPath_) (indexedPropPath);\n            var q = isPrefix (indexedPropPath) (indexedPropPath_);\n            return p && q ? f : p ? id : _;\n          };\n        };\n      };\n    };\n  }\n\n  //  see :: (String, { name :: String, url :: String? }) -> String\n  function see(label, record) {\n    return record.url == null || record.url === '' ?\n           '' :\n           '\\nSee ' + record.url +\n           ' for information about the ' + record.name + ' ' + label + '.\\n';\n  }\n\n  //  typeClassConstraintViolation :: ... -> Error\n  function typeClassConstraintViolation(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    typeClass,      // :: TypeClass\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    value,          // :: Any\n    typeVarMap      // :: TypeVarMap\n  ) {\n    var expType = resolvePropPath (typeInfo.types[index], propPath);\n    return new TypeError (trimTrailingSpaces (\n      'Type-class constraint violation\\n\\n' +\n      underline (typeInfo,\n                 function(tvn) {\n                   return function(tc) {\n                     return (\n                       tvn === expType.name && tc.name === typeClass.name ?\n                         r ('^') :\n                         _\n                     );\n                   };\n                 },\n                 formatType6 (Z.concat ([index], propPath))) +\n      '\\n' +\n      showValuesAndTypes (env, typeInfo, [value], 1) + '\\n\\n' +\n      q (typeInfo.name) + ' requires ' +\n      q (expType.name) + ' to satisfy the ' +\n      stripNamespace (typeClass.name) + ' type-class constraint; ' +\n      'the value at position 1 does not.\\n' +\n      see ('type class', typeClass)\n    ));\n  }\n\n  //  typeVarConstraintViolation :: ... -> Error\n  function typeVarConstraintViolation(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    valuesByPath    // :: StrMap (Array Any)\n  ) {\n    //  If we apply an ‘a -> a -> a -> a’ function to Left ('x'), Right (1),\n    //  and Right (null) we'd like to avoid underlining the first argument\n    //  position, since Left ('x') is compatible with the other ‘a’ values.\n    var key = JSON.stringify (Z.concat ([index], propPath));\n    var values = valuesByPath[key];\n\n    //  Note: Sorting these keys lexicographically is not \"correct\", but it\n    //  does the right thing for indexes less than 10.\n    var keys = Z.filter (function(k) {\n      var values_ = valuesByPath[k];\n      return (\n        //  Keep X, the position at which the violation was observed.\n        k === key ||\n        //  Keep positions whose values are incompatible with the values at X.\n        isEmpty (determineActualTypesStrict (env, Z.concat (values, values_)))\n      );\n    }, sortedKeys (valuesByPath));\n\n    var underlinedTypeVars =\n    underlineTypeVars (typeInfo,\n                       Z.reduce (function($valuesByPath, k) {\n                         $valuesByPath[k] = valuesByPath[k];\n                         return $valuesByPath;\n                       }, {}, keys));\n\n    return new TypeError (trimTrailingSpaces (\n      values.length === 1 &&\n      isEmpty (determineActualTypesLoose (env, values)) ?\n        'Unrecognized value\\n\\n' +\n        underlinedTypeVars + '\\n' +\n        '1)  ' + show (values[0]) + ' :: (no types)\\n\\n' +\n        toMarkdownList (\n          'The environment is empty! ' +\n          'Polymorphic functions require a non-empty environment.\\n',\n          'The value at position 1 is not a member of any type in ' +\n          'the environment.\\n\\n' +\n          'The environment contains the following types:\\n\\n',\n          showTypeWith (typeInfo),\n          env\n        ) :\n      // else\n        'Type-variable constraint violation\\n\\n' +\n        underlinedTypeVars + '\\n' +\n        (Z.reduce (function(st, k) {\n          var values = valuesByPath[k];\n          return isEmpty (values) ? st : {\n            idx: st.idx + 1,\n            s: st.s +\n               showValuesAndTypes (env, typeInfo, values, st.idx + 1) +\n               '\\n\\n'\n          };\n        }, {idx: 0, s: ''}, keys)).s +\n        'Since there is no type of which all the above values are ' +\n        'members, the type-variable constraint has been violated.\\n'\n    ));\n  }\n\n  //  invalidValue :: ... -> Error\n  function invalidValue(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    value           // :: Any\n  ) {\n    var t = resolvePropPath (typeInfo.types[index], propPath);\n    return new TypeError (trimTrailingSpaces (\n      'Invalid value\\n\\n' +\n      underline (typeInfo,\n                 K (K (_)),\n                 formatType6 (Z.concat ([index], propPath))) +\n      '\\n' +\n      showValuesAndTypes (env, typeInfo, [value], 1) + '\\n\\n' +\n      'The value at position 1 is not a member of ' +\n      showTypeQuoted (t) + '.\\n' +\n      see ('type', t)\n    ));\n  }\n\n  //  invalidArgumentsLength :: ... -> Error\n  //\n  //  This function is used in `wrapFunctionCond` to ensure that higher-order\n  //  functions defined via `def` only ever apply a function argument to the\n  //  correct number of arguments.\n  function invalidArgumentsLength(\n    typeInfo,           // :: TypeInfo\n    index,              // :: Integer\n    numArgsExpected,    // :: Integer\n    args                // :: Array Any\n  ) {\n    return new TypeError (trimTrailingSpaces (\n      q (typeInfo.name) +\n      ' applied ' + showTypeQuoted (typeInfo.types[index]) +\n      ' to the wrong number of arguments\\n\\n' +\n      underline (\n        typeInfo,\n        K (K (_)),\n        function(index_) {\n          return function(f) {\n            return function(t) {\n              return function(propPath) {\n                return function(s) {\n                  return index_ === index ?\n                    t.format (_, function(k) { return k === '$1' ? f : _; }) :\n                    _ (s);\n                };\n              };\n            };\n          };\n        }\n      ) + '\\n' +\n      'Expected ' + numArgs (numArgsExpected) +\n      ' but received ' + numArgs (args.length) +\n      toMarkdownList ('.\\n', ':\\n\\n', show, args)\n    ));\n  }\n\n  //  assertRight :: Either (() -> Error) a -> a !\n  function assertRight(either) {\n    if (either.isLeft) throw either.value ();\n    return either.value;\n  }\n\n  //  withTypeChecking :: ... -> Function\n  function withTypeChecking(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    impl            // :: Function\n  ) {\n    var n = typeInfo.types.length - 1;\n\n    //  wrapFunctionCond :: (TypeVarMap, Integer, a) -> a\n    function wrapFunctionCond(_typeVarMap, index, value) {\n      if (typeInfo.types[index].type !== FUNCTION) return value;\n\n      var expType = typeInfo.types[index];\n\n      //  checkValue :: (TypeVarMap, Integer, String, a) -> Either (() -> Error) TypeVarMap\n      function checkValue(typeVarMap, index, k, x) {\n        var propPath = [k];\n        var t = expType.types[k].type;\n        return (\n          t.type === VARIABLE ?\n            Z.chain (\n              function(typeVarMap) {\n                return isEmpty (typeVarMap[t.name].types) ?\n                  Left (function() {\n                    return typeVarConstraintViolation (\n                      env,\n                      typeInfo,\n                      index,\n                      propPath,\n                      typeVarMap[t.name].valuesByPath\n                    );\n                  }) :\n                  Right (typeVarMap);\n              },\n              Right (updateTypeVarMap (env,\n                                       typeVarMap,\n                                       t,\n                                       index,\n                                       propPath,\n                                       [x]))\n            ) :\n          // else\n            Z.map (\n              function(r) { return r.typeVarMap; },\n              satisfactoryTypes (env,\n                                 typeInfo,\n                                 typeVarMap,\n                                 t,\n                                 index,\n                                 propPath,\n                                 [x])\n            )\n        );\n      }\n\n      var isThunk = expType.types.$1.type.type === NO_ARGUMENTS;\n      var numArgsExpected = isThunk ? 0 : expType.keys.length - 1;\n      var typeVarMap = _typeVarMap;\n      return function(x) {\n        if (arguments.length !== numArgsExpected) {\n          throw invalidArgumentsLength (typeInfo,\n                                        index,\n                                        numArgsExpected,\n                                        slice.call (arguments));\n        }\n\n        var args = arguments;\n        typeVarMap = assertRight (\n          (init (expType.keys)).reduce (function(either, k, idx) {\n            var arg = args[idx];\n            return Z.chain (function(typeVarMap) {\n              return checkValue (typeVarMap, index, k, arg);\n            }, either);\n          }, Right (typeVarMap))\n        );\n\n        var output = value.apply (this, arguments);\n        var k = last (expType.keys);\n        typeVarMap = assertRight (checkValue (typeVarMap, index, k, output));\n        return output;\n      };\n    }\n\n    //  wrapNext :: (TypeVarMap, Array Any, Integer) -> (a -> b)\n    function wrapNext(_typeVarMap, _values, index) {\n      return function(x) {\n        var args = slice.call (arguments);\n        if (args.length !== 1) {\n          throw invalidArgumentsCount (typeInfo, index, 1, args);\n        }\n        var typeVarMap = (assertRight (\n          satisfactoryTypes (env,\n                             typeInfo,\n                             _typeVarMap,\n                             typeInfo.types[index],\n                             index,\n                             [],\n                             args)\n        )).typeVarMap;\n\n        var values = Z.concat (_values, args);\n        if (index + 1 === n) {\n          var value = values.reduce (function(f, x, idx) {\n            return f (wrapFunctionCond (typeVarMap, idx, x));\n          }, impl);\n          typeVarMap = (assertRight (\n            satisfactoryTypes (env,\n                               typeInfo,\n                               typeVarMap,\n                               typeInfo.types[n],\n                               n,\n                               [],\n                               [value])\n          )).typeVarMap;\n          return wrapFunctionCond (typeVarMap, n, value);\n        } else {\n          return wrapNext (typeVarMap, values, index + 1);\n        }\n      };\n    }\n\n    var wrapped = typeInfo.types[0].type === NO_ARGUMENTS ?\n      function() {\n        if (arguments.length !== 0) {\n          throw invalidArgumentsCount (typeInfo, 0, 0, slice.call (arguments));\n        }\n        var value = impl ();\n        var typeVarMap = assertRight (\n          satisfactoryTypes (env,\n                             typeInfo,\n                             {},\n                             typeInfo.types[n],\n                             n,\n                             [],\n                             [value])\n        ).typeVarMap;\n        return wrapFunctionCond (typeVarMap, n, value);\n      } :\n      wrapNext ({}, [], 0);\n\n    wrapped[inspect] = wrapped.toString = always0 (typeSignature (typeInfo));\n\n    return wrapped;\n  }\n\n  function _create(opts) {\n    function def(name) {\n      return function(constraints) {\n        return function(expTypes) {\n          return function(impl) {\n            return opts.checkTypes ?\n              withTypeChecking (opts.env,\n                                {name: name,\n                                 constraints: constraints,\n                                 types: augmentThunk (expTypes)},\n                                impl) :\n              impl;\n          };\n        };\n      };\n    }\n    return def (def.name)\n               ({})\n               ([String_,\n                 StrMap (Array_ (TypeClass)),\n                 NonEmpty (Array_ (Type)),\n                 AnyFunction,\n                 AnyFunction])\n               (def);\n  }\n\n  var create =\n  def ('create')\n      ({})\n      ([RecordType ({checkTypes: Boolean_, env: Array_ (Any)}), AnyFunction])\n      (_create);\n\n  //  fromUncheckedUnaryType :: (Type -> Type) -> Type -> Type\n  function fromUncheckedUnaryType(typeConstructor) {\n    var t = typeConstructor (Unknown);\n    var _1 = t.types.$1.extractor;\n    return CheckedUnaryType (t.name) (t.url) (t._test) (_1);\n  }\n\n  //  fromUncheckedBinaryType :: (Type -> Type -> Type) -> Type -> Type -> Type\n  function fromUncheckedBinaryType(typeConstructor) {\n    var t = typeConstructor (Unknown) (Unknown);\n    var _1 = t.types.$1.extractor;\n    var _2 = t.types.$2.extractor;\n    return CheckedBinaryType (t.name) (t.url) (t._test) (_1) (_2);\n  }\n\n  return {\n    Any: Any,\n    AnyFunction: AnyFunction,\n    Arguments: Arguments,\n    Array: fromUncheckedUnaryType (Array_),\n    Array0: Array0,\n    Array1: fromUncheckedUnaryType (Array1),\n    Array2: fromUncheckedBinaryType (Array2),\n    Boolean: Boolean_,\n    Date: Date_,\n    Error: Error_,\n    FiniteNumber: FiniteNumber,\n    Function: def ('Function') ({}) ([Array_ (Type), Type]) (Function_),\n    GlobalRegExp: GlobalRegExp,\n    HtmlElement: HtmlElement,\n    Integer: Integer,\n    NegativeFiniteNumber: NegativeFiniteNumber,\n    NegativeInteger: NegativeInteger,\n    NegativeNumber: NegativeNumber,\n    NonEmpty: NonEmpty,\n    NonGlobalRegExp: NonGlobalRegExp,\n    NonNegativeInteger: NonNegativeInteger,\n    NonZeroFiniteNumber: NonZeroFiniteNumber,\n    NonZeroInteger: NonZeroInteger,\n    NonZeroValidNumber: NonZeroValidNumber,\n    Null: Null,\n    Nullable: fromUncheckedUnaryType (Nullable),\n    Number: Number_,\n    Object: Object_,\n    PositiveFiniteNumber: PositiveFiniteNumber,\n    PositiveInteger: PositiveInteger,\n    PositiveNumber: PositiveNumber,\n    RegExp: RegExp_,\n    RegexFlags: RegexFlags,\n    StrMap: fromUncheckedUnaryType (StrMap),\n    String: String_,\n    Symbol: Symbol_,\n    Type: Type,\n    TypeClass: TypeClass,\n    Undefined: Undefined,\n    Unknown: Unknown,\n    ValidDate: ValidDate,\n    ValidNumber: ValidNumber,\n    env: env,\n    create: create,\n    test: def ('test') ({}) ([Array_ (Type), Type, Any, Boolean_]) (test),\n    NullaryType: CheckedNullaryType,\n    UnaryType: CheckedUnaryType,\n    BinaryType: CheckedBinaryType,\n    EnumType: CheckedEnumType,\n    RecordType: CheckedRecordType,\n    TypeVariable: CheckedTypeVariable,\n    UnaryTypeVariable: CheckedUnaryTypeVariable,\n    BinaryTypeVariable: CheckedBinaryTypeVariable,\n    Thunk: Thunk,\n    Predicate: Predicate\n  };\n\n}));\n\n//. [FL:Semigroup]:         https://github.com/fantasyland/fantasy-land#semigroup\n//. [HTML element]:         https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n//. [Monoid]:               https://github.com/fantasyland/fantasy-land#monoid\n//. [Setoid]:               https://github.com/fantasyland/fantasy-land#setoid\n//. [`Array`]:              #Array\n//. [`Array2`]:             #Array2\n//. [`BinaryType`]:         #BinaryType\n//. [`Date`]:               #Date\n//. [`FiniteNumber`]:       #FiniteNumber\n//. [`GlobalRegExp`]:       #GlobalRegExp\n//. [`Integer`]:            #Integer\n//. [`NonGlobalRegExp`]:    #NonGlobalRegExp\n//. [`Number`]:             #Number\n//. [`Object.create`]:      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n//. [`RegExp`]:             #RegExp\n//. [`RegexFlags`]:         #RegexFlags\n//. [`String`]:             #String\n//. [`SyntaxError`]:        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n//. [`TypeClass`]:          https://github.com/sanctuary-js/sanctuary-type-classes#TypeClass\n//. [`TypeError`]:          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n//. [`TypeVariable`]:       #TypeVariable\n//. [`UnaryType`]:          #UnaryType\n//. [`UnaryTypeVariable`]:  #UnaryTypeVariable\n//. [`Unknown`]:            #Unknown\n//. [`ValidNumber`]:        #ValidNumber\n//. [`env`]:                #env\n//. [arguments]:            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\n//. [enumerated types]:     https://en.wikipedia.org/wiki/Enumerated_type\n//. [max]:                  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n//. [min]:                  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\n//. [record type]:          #RecordType\n//. [semigroup]:            https://en.wikipedia.org/wiki/Semigroup\n//. [type class]:           #type-classes\n//. [type variables]:       #TypeVariable\n//. [types]:                #types\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import { mat4, quat, vec2, vec3, vec4 } from 'gl-matrix';\nimport { Future, parallel } from 'fluture';\nimport { fetchImage, fetchJsonUrl, fetchArrayBufferUrl, loadImageFromArrayBuffer } from 'fluture-loaders';\n\nvar GltfAnimationTargetPath;\r\n(function (GltfAnimationTargetPath) {\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"TRANSLATION\"] = 1] = \"TRANSLATION\";\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"ROTATION\"] = 2] = \"ROTATION\";\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"SCALE\"] = 3] = \"SCALE\";\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"WEIGHTS\"] = 4] = \"WEIGHTS\";\r\n})(GltfAnimationTargetPath || (GltfAnimationTargetPath = {}));\r\nvar GltfAnimationInterpolation;\r\n(function (GltfAnimationInterpolation) {\r\n    GltfAnimationInterpolation[GltfAnimationInterpolation[\"LINEAR\"] = 1] = \"LINEAR\";\r\n    GltfAnimationInterpolation[GltfAnimationInterpolation[\"STEP\"] = 2] = \"STEP\";\r\n    GltfAnimationInterpolation[GltfAnimationInterpolation[\"CUBICSPLINE\"] = 3] = \"CUBICSPLINE\";\r\n})(GltfAnimationInterpolation || (GltfAnimationInterpolation = {}));\n\nvar GltfMaterialAlphaMode;\r\n(function (GltfMaterialAlphaMode) {\r\n    GltfMaterialAlphaMode[GltfMaterialAlphaMode[\"OPAQUE\"] = 1] = \"OPAQUE\";\r\n    GltfMaterialAlphaMode[GltfMaterialAlphaMode[\"MASK\"] = 2] = \"MASK\";\r\n    GltfMaterialAlphaMode[GltfMaterialAlphaMode[\"BLEND\"] = 3] = \"BLEND\";\r\n})(GltfMaterialAlphaMode || (GltfMaterialAlphaMode = {}));\n\n//would be nice to extend but that's not really doable with enums\r\nvar GltfNodeKind;\r\n(function (GltfNodeKind) {\r\n    GltfNodeKind[GltfNodeKind[\"MESH\"] = 3] = \"MESH\";\r\n    GltfNodeKind[GltfNodeKind[\"SKIN\"] = 4] = \"SKIN\";\r\n})(GltfNodeKind || (GltfNodeKind = {}));\n\nvar GltfPrimitiveDrawKind;\r\n(function (GltfPrimitiveDrawKind) {\r\n    GltfPrimitiveDrawKind[GltfPrimitiveDrawKind[\"ELEMENTS\"] = 1] = \"ELEMENTS\";\r\n    GltfPrimitiveDrawKind[GltfPrimitiveDrawKind[\"ARRAY\"] = 2] = \"ARRAY\";\r\n})(GltfPrimitiveDrawKind || (GltfPrimitiveDrawKind = {}));\n\nconst GltfIblExtensionName = \"PURE3D_IBL\";\n\nconst GltfLightsExtensionName = \"KHR_lights\";\n\nconst GltfUnlitExtensionName = \"KHR_Unlit\";\n\nvar CameraKind;\r\n(function (CameraKind) {\r\n    CameraKind[CameraKind[\"PERSPECTIVE\"] = 0] = \"PERSPECTIVE\";\r\n    CameraKind[CameraKind[\"ORTHOGRAPHIC\"] = 1] = \"ORTHOGRAPHIC\";\r\n})(CameraKind || (CameraKind = {}));\n\nvar NodeKind;\r\n(function (NodeKind) {\r\n    NodeKind[NodeKind[\"CAMERA\"] = 1] = \"CAMERA\";\r\n    NodeKind[NodeKind[\"LIGHT\"] = 2] = \"LIGHT\";\r\n})(NodeKind || (NodeKind = {}));\n\nvar LightKind;\r\n(function (LightKind) {\r\n    LightKind[LightKind[\"Ambient\"] = 1] = \"Ambient\";\r\n    LightKind[LightKind[\"Directional\"] = 2] = \"Directional\";\r\n    LightKind[LightKind[\"Point\"] = 3] = \"Point\";\r\n    LightKind[LightKind[\"Spot\"] = 4] = \"Spot\";\r\n})(LightKind || (LightKind = {}));\n\n//taken from https://raw.githubusercontent.com/mattdesl/gl-constants/master/1.0/index.js\r\n//would be good to properly check against https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\r\nvar WebGlConstants;\r\n(function (WebGlConstants) {\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_ATTRIBUTES\"] = 35721] = \"ACTIVE_ATTRIBUTES\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_ATTRIBUTE_MAX_LENGTH\"] = 35722] = \"ACTIVE_ATTRIBUTE_MAX_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_TEXTURE\"] = 34016] = \"ACTIVE_TEXTURE\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_UNIFORMS\"] = 35718] = \"ACTIVE_UNIFORMS\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_UNIFORM_MAX_LENGTH\"] = 35719] = \"ACTIVE_UNIFORM_MAX_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"ALIASED_LINE_WIDTH_RANGE\"] = 33902] = \"ALIASED_LINE_WIDTH_RANGE\";\r\n    WebGlConstants[WebGlConstants[\"ALIASED_POINT_SIZE_RANGE\"] = 33901] = \"ALIASED_POINT_SIZE_RANGE\";\r\n    WebGlConstants[WebGlConstants[\"ALPHA\"] = 6406] = \"ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ALPHA_BITS\"] = 3413] = \"ALPHA_BITS\";\r\n    WebGlConstants[WebGlConstants[\"ALWAYS\"] = 519] = \"ALWAYS\";\r\n    WebGlConstants[WebGlConstants[\"ARRAY_BUFFER\"] = 34962] = \"ARRAY_BUFFER\";\r\n    WebGlConstants[WebGlConstants[\"ARRAY_BUFFER_BINDING\"] = 34964] = \"ARRAY_BUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"ATTACHED_SHADERS\"] = 35717] = \"ATTACHED_SHADERS\";\r\n    WebGlConstants[WebGlConstants[\"BACK\"] = 1029] = \"BACK\";\r\n    WebGlConstants[WebGlConstants[\"BLEND\"] = 3042] = \"BLEND\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_COLOR\"] = 32773] = \"BLEND_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_DST_ALPHA\"] = 32970] = \"BLEND_DST_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_DST_RGB\"] = 32968] = \"BLEND_DST_RGB\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_EQUATION\"] = 32777] = \"BLEND_EQUATION\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_EQUATION_ALPHA\"] = 34877] = \"BLEND_EQUATION_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_EQUATION_RGB\"] = 32777] = \"BLEND_EQUATION_RGB\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_SRC_ALPHA\"] = 32971] = \"BLEND_SRC_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_SRC_RGB\"] = 32969] = \"BLEND_SRC_RGB\";\r\n    WebGlConstants[WebGlConstants[\"BLUE_BITS\"] = 3412] = \"BLUE_BITS\";\r\n    WebGlConstants[WebGlConstants[\"BOOL\"] = 35670] = \"BOOL\";\r\n    WebGlConstants[WebGlConstants[\"BOOL_VEC2\"] = 35671] = \"BOOL_VEC2\";\r\n    WebGlConstants[WebGlConstants[\"BOOL_VEC3\"] = 35672] = \"BOOL_VEC3\";\r\n    WebGlConstants[WebGlConstants[\"BOOL_VEC4\"] = 35673] = \"BOOL_VEC4\";\r\n    WebGlConstants[WebGlConstants[\"BROWSER_DEFAULT_WEBGL\"] = 37444] = \"BROWSER_DEFAULT_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"BUFFER_SIZE\"] = 34660] = \"BUFFER_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"BUFFER_USAGE\"] = 34661] = \"BUFFER_USAGE\";\r\n    WebGlConstants[WebGlConstants[\"BYTE\"] = 5120] = \"BYTE\";\r\n    WebGlConstants[WebGlConstants[\"CCW\"] = 2305] = \"CCW\";\r\n    WebGlConstants[WebGlConstants[\"CLAMP_TO_EDGE\"] = 33071] = \"CLAMP_TO_EDGE\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_ATTACHMENT0\"] = 36064] = \"COLOR_ATTACHMENT0\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_BUFFER_BIT\"] = 16384] = \"COLOR_BUFFER_BIT\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_CLEAR_VALUE\"] = 3106] = \"COLOR_CLEAR_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_WRITEMASK\"] = 3107] = \"COLOR_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"COMPILE_STATUS\"] = 35713] = \"COMPILE_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"COMPRESSED_TEXTURE_FORMATS\"] = 34467] = \"COMPRESSED_TEXTURE_FORMATS\";\r\n    WebGlConstants[WebGlConstants[\"CONSTANT_ALPHA\"] = 32771] = \"CONSTANT_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"CONSTANT_COLOR\"] = 32769] = \"CONSTANT_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"CONTEXT_LOST_WEBGL\"] = 37442] = \"CONTEXT_LOST_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"CULL_FACE\"] = 2884] = \"CULL_FACE\";\r\n    WebGlConstants[WebGlConstants[\"CULL_FACE_MODE\"] = 2885] = \"CULL_FACE_MODE\";\r\n    WebGlConstants[WebGlConstants[\"CURRENT_PROGRAM\"] = 35725] = \"CURRENT_PROGRAM\";\r\n    WebGlConstants[WebGlConstants[\"CURRENT_VERTEX_ATTRIB\"] = 34342] = \"CURRENT_VERTEX_ATTRIB\";\r\n    WebGlConstants[WebGlConstants[\"CW\"] = 2304] = \"CW\";\r\n    WebGlConstants[WebGlConstants[\"DECR\"] = 7683] = \"DECR\";\r\n    WebGlConstants[WebGlConstants[\"DECR_WRAP\"] = 34056] = \"DECR_WRAP\";\r\n    WebGlConstants[WebGlConstants[\"DELETE_STATUS\"] = 35712] = \"DELETE_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_ATTACHMENT\"] = 36096] = \"DEPTH_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_BITS\"] = 3414] = \"DEPTH_BITS\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_BUFFER_BIT\"] = 256] = \"DEPTH_BUFFER_BIT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_CLEAR_VALUE\"] = 2931] = \"DEPTH_CLEAR_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_COMPONENT\"] = 6402] = \"DEPTH_COMPONENT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_COMPONENT16\"] = 33189] = \"DEPTH_COMPONENT16\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_FUNC\"] = 2932] = \"DEPTH_FUNC\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_RANGE\"] = 2928] = \"DEPTH_RANGE\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_STENCIL\"] = 34041] = \"DEPTH_STENCIL\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_STENCIL_ATTACHMENT\"] = 33306] = \"DEPTH_STENCIL_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_TEST\"] = 2929] = \"DEPTH_TEST\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_WRITEMASK\"] = 2930] = \"DEPTH_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"DITHER\"] = 3024] = \"DITHER\";\r\n    WebGlConstants[WebGlConstants[\"DONT_CARE\"] = 4352] = \"DONT_CARE\";\r\n    WebGlConstants[WebGlConstants[\"DST_ALPHA\"] = 772] = \"DST_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"DST_COLOR\"] = 774] = \"DST_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"DYNAMIC_DRAW\"] = 35048] = \"DYNAMIC_DRAW\";\r\n    WebGlConstants[WebGlConstants[\"ELEMENT_ARRAY_BUFFER\"] = 34963] = \"ELEMENT_ARRAY_BUFFER\";\r\n    WebGlConstants[WebGlConstants[\"ELEMENT_ARRAY_BUFFER_BINDING\"] = 34965] = \"ELEMENT_ARRAY_BUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"EQUAL\"] = 514] = \"EQUAL\";\r\n    WebGlConstants[WebGlConstants[\"FASTEST\"] = 4353] = \"FASTEST\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT\"] = 5126] = \"FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_MAT2\"] = 35674] = \"FLOAT_MAT2\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_MAT3\"] = 35675] = \"FLOAT_MAT3\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_MAT4\"] = 35676] = \"FLOAT_MAT4\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_VEC2\"] = 35664] = \"FLOAT_VEC2\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_VEC3\"] = 35665] = \"FLOAT_VEC3\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_VEC4\"] = 35666] = \"FLOAT_VEC4\";\r\n    WebGlConstants[WebGlConstants[\"FRAGMENT_SHADER\"] = 35632] = \"FRAGMENT_SHADER\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER\"] = 36160] = \"FRAMEBUFFER\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\"] = 36049] = \"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\"] = 36048] = \"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\"] = 36051] = \"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\"] = 36050] = \"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_BINDING\"] = 36006] = \"FRAMEBUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_COMPLETE\"] = 36053] = \"FRAMEBUFFER_COMPLETE\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\"] = 36054] = \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\"] = 36057] = \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\"] = 36055] = \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_UNSUPPORTED\"] = 36061] = \"FRAMEBUFFER_UNSUPPORTED\";\r\n    WebGlConstants[WebGlConstants[\"FRONT\"] = 1028] = \"FRONT\";\r\n    WebGlConstants[WebGlConstants[\"FRONT_AND_BACK\"] = 1032] = \"FRONT_AND_BACK\";\r\n    WebGlConstants[WebGlConstants[\"FRONT_FACE\"] = 2886] = \"FRONT_FACE\";\r\n    WebGlConstants[WebGlConstants[\"FUNC_ADD\"] = 32774] = \"FUNC_ADD\";\r\n    WebGlConstants[WebGlConstants[\"FUNC_REVERSE_SUBTRACT\"] = 32779] = \"FUNC_REVERSE_SUBTRACT\";\r\n    WebGlConstants[WebGlConstants[\"FUNC_SUBTRACT\"] = 32778] = \"FUNC_SUBTRACT\";\r\n    WebGlConstants[WebGlConstants[\"GENERATE_MIPMAP_HINT\"] = 33170] = \"GENERATE_MIPMAP_HINT\";\r\n    WebGlConstants[WebGlConstants[\"GEQUAL\"] = 518] = \"GEQUAL\";\r\n    WebGlConstants[WebGlConstants[\"GREATER\"] = 516] = \"GREATER\";\r\n    WebGlConstants[WebGlConstants[\"GREEN_BITS\"] = 3411] = \"GREEN_BITS\";\r\n    WebGlConstants[WebGlConstants[\"HIGH_FLOAT\"] = 36338] = \"HIGH_FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"HIGH_INT\"] = 36341] = \"HIGH_INT\";\r\n    WebGlConstants[WebGlConstants[\"INCR\"] = 7682] = \"INCR\";\r\n    WebGlConstants[WebGlConstants[\"INCR_WRAP\"] = 34055] = \"INCR_WRAP\";\r\n    WebGlConstants[WebGlConstants[\"INFO_LOG_LENGTH\"] = 35716] = \"INFO_LOG_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"INT\"] = 5124] = \"INT\";\r\n    WebGlConstants[WebGlConstants[\"INT_VEC2\"] = 35667] = \"INT_VEC2\";\r\n    WebGlConstants[WebGlConstants[\"INT_VEC3\"] = 35668] = \"INT_VEC3\";\r\n    WebGlConstants[WebGlConstants[\"INT_VEC4\"] = 35669] = \"INT_VEC4\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_ENUM\"] = 1280] = \"INVALID_ENUM\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_FRAMEBUFFER_OPERATION\"] = 1286] = \"INVALID_FRAMEBUFFER_OPERATION\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_OPERATION\"] = 1282] = \"INVALID_OPERATION\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_VALUE\"] = 1281] = \"INVALID_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"INVERT\"] = 5386] = \"INVERT\";\r\n    WebGlConstants[WebGlConstants[\"KEEP\"] = 7680] = \"KEEP\";\r\n    WebGlConstants[WebGlConstants[\"LEQUAL\"] = 515] = \"LEQUAL\";\r\n    WebGlConstants[WebGlConstants[\"LESS\"] = 513] = \"LESS\";\r\n    WebGlConstants[WebGlConstants[\"LINEAR\"] = 9729] = \"LINEAR\";\r\n    WebGlConstants[WebGlConstants[\"LINEAR_MIPMAP_LINEAR\"] = 9987] = \"LINEAR_MIPMAP_LINEAR\";\r\n    WebGlConstants[WebGlConstants[\"LINEAR_MIPMAP_NEAREST\"] = 9985] = \"LINEAR_MIPMAP_NEAREST\";\r\n    WebGlConstants[WebGlConstants[\"LINES\"] = 1] = \"LINES\";\r\n    WebGlConstants[WebGlConstants[\"LINE_LOOP\"] = 2] = \"LINE_LOOP\";\r\n    WebGlConstants[WebGlConstants[\"LINE_STRIP\"] = 3] = \"LINE_STRIP\";\r\n    WebGlConstants[WebGlConstants[\"LINE_WIDTH\"] = 2849] = \"LINE_WIDTH\";\r\n    WebGlConstants[WebGlConstants[\"LINK_STATUS\"] = 35714] = \"LINK_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"LOW_FLOAT\"] = 36336] = \"LOW_FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"LOW_INT\"] = 36339] = \"LOW_INT\";\r\n    WebGlConstants[WebGlConstants[\"LUMINANCE\"] = 6409] = \"LUMINANCE\";\r\n    WebGlConstants[WebGlConstants[\"LUMINANCE_ALPHA\"] = 6410] = \"LUMINANCE_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"MAX_COMBINED_TEXTURE_IMAGE_UNITS\"] = 35661] = \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_CUBE_MAP_TEXTURE_SIZE\"] = 34076] = \"MAX_CUBE_MAP_TEXTURE_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"MAX_FRAGMENT_UNIFORM_VECTORS\"] = 36349] = \"MAX_FRAGMENT_UNIFORM_VECTORS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_RENDERBUFFER_SIZE\"] = 34024] = \"MAX_RENDERBUFFER_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"MAX_TEXTURE_IMAGE_UNITS\"] = 34930] = \"MAX_TEXTURE_IMAGE_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_TEXTURE_SIZE\"] = 3379] = \"MAX_TEXTURE_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VARYING_VECTORS\"] = 36348] = \"MAX_VARYING_VECTORS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VERTEX_ATTRIBS\"] = 34921] = \"MAX_VERTEX_ATTRIBS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VERTEX_TEXTURE_IMAGE_UNITS\"] = 35660] = \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VERTEX_UNIFORM_VECTORS\"] = 36347] = \"MAX_VERTEX_UNIFORM_VECTORS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VIEWPORT_DIMS\"] = 3386] = \"MAX_VIEWPORT_DIMS\";\r\n    WebGlConstants[WebGlConstants[\"MEDIUM_FLOAT\"] = 36337] = \"MEDIUM_FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"MEDIUM_INT\"] = 36340] = \"MEDIUM_INT\";\r\n    WebGlConstants[WebGlConstants[\"MIRRORED_REPEAT\"] = 33648] = \"MIRRORED_REPEAT\";\r\n    WebGlConstants[WebGlConstants[\"NEAREST\"] = 9728] = \"NEAREST\";\r\n    WebGlConstants[WebGlConstants[\"NEAREST_MIPMAP_LINEAR\"] = 9986] = \"NEAREST_MIPMAP_LINEAR\";\r\n    WebGlConstants[WebGlConstants[\"NEAREST_MIPMAP_NEAREST\"] = 9984] = \"NEAREST_MIPMAP_NEAREST\";\r\n    WebGlConstants[WebGlConstants[\"NEVER\"] = 512] = \"NEVER\";\r\n    WebGlConstants[WebGlConstants[\"NICEST\"] = 4354] = \"NICEST\";\r\n    WebGlConstants[WebGlConstants[\"NONE\"] = 0] = \"NONE\";\r\n    WebGlConstants[WebGlConstants[\"NOTEQUAL\"] = 517] = \"NOTEQUAL\";\r\n    WebGlConstants[WebGlConstants[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    WebGlConstants[WebGlConstants[\"NUM_COMPRESSED_TEXTURE_FORMATS\"] = 34466] = \"NUM_COMPRESSED_TEXTURE_FORMATS\";\r\n    WebGlConstants[WebGlConstants[\"ONE\"] = 1] = \"ONE\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_CONSTANT_ALPHA\"] = 32772] = \"ONE_MINUS_CONSTANT_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_CONSTANT_COLOR\"] = 32770] = \"ONE_MINUS_CONSTANT_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_DST_ALPHA\"] = 773] = \"ONE_MINUS_DST_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_DST_COLOR\"] = 775] = \"ONE_MINUS_DST_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_SRC_ALPHA\"] = 771] = \"ONE_MINUS_SRC_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_SRC_COLOR\"] = 769] = \"ONE_MINUS_SRC_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"OUT_OF_MEMORY\"] = 1285] = \"OUT_OF_MEMORY\";\r\n    WebGlConstants[WebGlConstants[\"PACK_ALIGNMENT\"] = 3333] = \"PACK_ALIGNMENT\";\r\n    WebGlConstants[WebGlConstants[\"POINTS\"] = 0] = \"POINTS\";\r\n    WebGlConstants[WebGlConstants[\"POLYGON_OFFSET_FACTOR\"] = 32824] = \"POLYGON_OFFSET_FACTOR\";\r\n    WebGlConstants[WebGlConstants[\"POLYGON_OFFSET_FILL\"] = 32823] = \"POLYGON_OFFSET_FILL\";\r\n    WebGlConstants[WebGlConstants[\"POLYGON_OFFSET_UNITS\"] = 10752] = \"POLYGON_OFFSET_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"RED_BITS\"] = 3410] = \"RED_BITS\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER\"] = 36161] = \"RENDERBUFFER\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_ALPHA_SIZE\"] = 36179] = \"RENDERBUFFER_ALPHA_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_BINDING\"] = 36007] = \"RENDERBUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_BLUE_SIZE\"] = 36178] = \"RENDERBUFFER_BLUE_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_DEPTH_SIZE\"] = 36180] = \"RENDERBUFFER_DEPTH_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_GREEN_SIZE\"] = 36177] = \"RENDERBUFFER_GREEN_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_HEIGHT\"] = 36163] = \"RENDERBUFFER_HEIGHT\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_INTERNAL_FORMAT\"] = 36164] = \"RENDERBUFFER_INTERNAL_FORMAT\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_RED_SIZE\"] = 36176] = \"RENDERBUFFER_RED_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_STENCIL_SIZE\"] = 36181] = \"RENDERBUFFER_STENCIL_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_WIDTH\"] = 36162] = \"RENDERBUFFER_WIDTH\";\r\n    WebGlConstants[WebGlConstants[\"RENDERER\"] = 7937] = \"RENDERER\";\r\n    WebGlConstants[WebGlConstants[\"REPEAT\"] = 10497] = \"REPEAT\";\r\n    WebGlConstants[WebGlConstants[\"REPLACE\"] = 7681] = \"REPLACE\";\r\n    WebGlConstants[WebGlConstants[\"RGB\"] = 6407] = \"RGB\";\r\n    WebGlConstants[WebGlConstants[\"RGB5_A1\"] = 32855] = \"RGB5_A1\";\r\n    WebGlConstants[WebGlConstants[\"RGB565\"] = 36194] = \"RGB565\";\r\n    WebGlConstants[WebGlConstants[\"RGBA\"] = 6408] = \"RGBA\";\r\n    WebGlConstants[WebGlConstants[\"RGBA4\"] = 32854] = \"RGBA4\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLER_2D\"] = 35678] = \"SAMPLER_2D\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLER_CUBE\"] = 35680] = \"SAMPLER_CUBE\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLES\"] = 32937] = \"SAMPLES\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_ALPHA_TO_COVERAGE\"] = 32926] = \"SAMPLE_ALPHA_TO_COVERAGE\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_BUFFERS\"] = 32936] = \"SAMPLE_BUFFERS\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_COVERAGE\"] = 32928] = \"SAMPLE_COVERAGE\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_COVERAGE_INVERT\"] = 32939] = \"SAMPLE_COVERAGE_INVERT\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_COVERAGE_VALUE\"] = 32938] = \"SAMPLE_COVERAGE_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"SCISSOR_BOX\"] = 3088] = \"SCISSOR_BOX\";\r\n    WebGlConstants[WebGlConstants[\"SCISSOR_TEST\"] = 3089] = \"SCISSOR_TEST\";\r\n    WebGlConstants[WebGlConstants[\"SHADER_COMPILER\"] = 36346] = \"SHADER_COMPILER\";\r\n    WebGlConstants[WebGlConstants[\"SHADER_SOURCE_LENGTH\"] = 35720] = \"SHADER_SOURCE_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"SHADER_TYPE\"] = 35663] = \"SHADER_TYPE\";\r\n    WebGlConstants[WebGlConstants[\"SHADING_LANGUAGE_VERSION\"] = 35724] = \"SHADING_LANGUAGE_VERSION\";\r\n    WebGlConstants[WebGlConstants[\"SHORT\"] = 5122] = \"SHORT\";\r\n    WebGlConstants[WebGlConstants[\"SRC_ALPHA\"] = 770] = \"SRC_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"SRC_ALPHA_SATURATE\"] = 776] = \"SRC_ALPHA_SATURATE\";\r\n    WebGlConstants[WebGlConstants[\"SRC_COLOR\"] = 768] = \"SRC_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"STATIC_DRAW\"] = 35044] = \"STATIC_DRAW\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_ATTACHMENT\"] = 36128] = \"STENCIL_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_FAIL\"] = 34817] = \"STENCIL_BACK_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_FUNC\"] = 34816] = \"STENCIL_BACK_FUNC\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_PASS_DEPTH_FAIL\"] = 34818] = \"STENCIL_BACK_PASS_DEPTH_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_PASS_DEPTH_PASS\"] = 34819] = \"STENCIL_BACK_PASS_DEPTH_PASS\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_REF\"] = 36003] = \"STENCIL_BACK_REF\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_VALUE_MASK\"] = 36004] = \"STENCIL_BACK_VALUE_MASK\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_WRITEMASK\"] = 36005] = \"STENCIL_BACK_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BITS\"] = 3415] = \"STENCIL_BITS\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BUFFER_BIT\"] = 1024] = \"STENCIL_BUFFER_BIT\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_CLEAR_VALUE\"] = 2961] = \"STENCIL_CLEAR_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_FAIL\"] = 2964] = \"STENCIL_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_FUNC\"] = 2962] = \"STENCIL_FUNC\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_INDEX\"] = 6401] = \"STENCIL_INDEX\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_INDEX8\"] = 36168] = \"STENCIL_INDEX8\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_PASS_DEPTH_FAIL\"] = 2965] = \"STENCIL_PASS_DEPTH_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_PASS_DEPTH_PASS\"] = 2966] = \"STENCIL_PASS_DEPTH_PASS\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_REF\"] = 2967] = \"STENCIL_REF\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_TEST\"] = 2960] = \"STENCIL_TEST\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_VALUE_MASK\"] = 2963] = \"STENCIL_VALUE_MASK\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_WRITEMASK\"] = 2968] = \"STENCIL_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"STREAM_DRAW\"] = 35040] = \"STREAM_DRAW\";\r\n    WebGlConstants[WebGlConstants[\"SUBPIXEL_BITS\"] = 3408] = \"SUBPIXEL_BITS\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE\"] = 5890] = \"TEXTURE\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE0\"] = 33984] = \"TEXTURE0\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE1\"] = 33985] = \"TEXTURE1\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE2\"] = 33986] = \"TEXTURE2\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE3\"] = 33987] = \"TEXTURE3\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE4\"] = 33988] = \"TEXTURE4\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE5\"] = 33989] = \"TEXTURE5\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE6\"] = 33990] = \"TEXTURE6\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE7\"] = 33991] = \"TEXTURE7\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE8\"] = 33992] = \"TEXTURE8\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE9\"] = 33993] = \"TEXTURE9\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE10\"] = 33994] = \"TEXTURE10\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE11\"] = 33995] = \"TEXTURE11\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE12\"] = 33996] = \"TEXTURE12\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE13\"] = 33997] = \"TEXTURE13\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE14\"] = 33998] = \"TEXTURE14\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE15\"] = 33999] = \"TEXTURE15\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE16\"] = 34000] = \"TEXTURE16\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE17\"] = 34001] = \"TEXTURE17\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE18\"] = 34002] = \"TEXTURE18\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE19\"] = 34003] = \"TEXTURE19\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE20\"] = 34004] = \"TEXTURE20\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE21\"] = 34005] = \"TEXTURE21\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE22\"] = 34006] = \"TEXTURE22\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE23\"] = 34007] = \"TEXTURE23\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE24\"] = 34008] = \"TEXTURE24\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE25\"] = 34009] = \"TEXTURE25\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE26\"] = 34010] = \"TEXTURE26\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE27\"] = 34011] = \"TEXTURE27\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE28\"] = 34012] = \"TEXTURE28\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE29\"] = 34013] = \"TEXTURE29\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE30\"] = 34014] = \"TEXTURE30\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE31\"] = 34015] = \"TEXTURE31\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_2D\"] = 3553] = \"TEXTURE_2D\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_BINDING_2D\"] = 32873] = \"TEXTURE_BINDING_2D\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_BINDING_CUBE_MAP\"] = 34068] = \"TEXTURE_BINDING_CUBE_MAP\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP\"] = 34067] = \"TEXTURE_CUBE_MAP\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_NEGATIVE_X\"] = 34070] = \"TEXTURE_CUBE_MAP_NEGATIVE_X\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_NEGATIVE_Y\"] = 34072] = \"TEXTURE_CUBE_MAP_NEGATIVE_Y\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_NEGATIVE_Z\"] = 34074] = \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_POSITIVE_X\"] = 34069] = \"TEXTURE_CUBE_MAP_POSITIVE_X\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_POSITIVE_Y\"] = 34071] = \"TEXTURE_CUBE_MAP_POSITIVE_Y\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_POSITIVE_Z\"] = 34073] = \"TEXTURE_CUBE_MAP_POSITIVE_Z\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_MAG_FILTER\"] = 10240] = \"TEXTURE_MAG_FILTER\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_MIN_FILTER\"] = 10241] = \"TEXTURE_MIN_FILTER\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_WRAP_S\"] = 10242] = \"TEXTURE_WRAP_S\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_WRAP_T\"] = 10243] = \"TEXTURE_WRAP_T\";\r\n    WebGlConstants[WebGlConstants[\"TRIANGLES\"] = 4] = \"TRIANGLES\";\r\n    WebGlConstants[WebGlConstants[\"TRIANGLE_FAN\"] = 6] = \"TRIANGLE_FAN\";\r\n    WebGlConstants[WebGlConstants[\"TRIANGLE_STRIP\"] = 5] = \"TRIANGLE_STRIP\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_ALIGNMENT\"] = 3317] = \"UNPACK_ALIGNMENT\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_COLORSPACE_CONVERSION_WEBGL\"] = 37443] = \"UNPACK_COLORSPACE_CONVERSION_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_FLIP_Y_WEBGL\"] = 37440] = \"UNPACK_FLIP_Y_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_PREMULTIPLY_ALPHA_WEBGL\"] = 37441] = \"UNPACK_PREMULTIPLY_ALPHA_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_BYTE\"] = 5121] = \"UNSIGNED_BYTE\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_INT\"] = 5125] = \"UNSIGNED_INT\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT\"] = 5123] = \"UNSIGNED_SHORT\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT_4_4_4_4\"] = 32819] = \"UNSIGNED_SHORT_4_4_4_4\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT_5_5_5_1\"] = 32820] = \"UNSIGNED_SHORT_5_5_5_1\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT_5_6_5\"] = 33635] = \"UNSIGNED_SHORT_5_6_5\";\r\n    WebGlConstants[WebGlConstants[\"VALIDATE_STATUS\"] = 35715] = \"VALIDATE_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"VENDOR\"] = 7936] = \"VENDOR\";\r\n    WebGlConstants[WebGlConstants[\"VERSION\"] = 7938] = \"VERSION\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\"] = 34975] = \"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_ENABLED\"] = 34338] = \"VERTEX_ATTRIB_ARRAY_ENABLED\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_NORMALIZED\"] = 34922] = \"VERTEX_ATTRIB_ARRAY_NORMALIZED\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_POINTER\"] = 34373] = \"VERTEX_ATTRIB_ARRAY_POINTER\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_SIZE\"] = 34339] = \"VERTEX_ATTRIB_ARRAY_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_STRIDE\"] = 34340] = \"VERTEX_ATTRIB_ARRAY_STRIDE\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_TYPE\"] = 34341] = \"VERTEX_ATTRIB_ARRAY_TYPE\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_SHADER\"] = 35633] = \"VERTEX_SHADER\";\r\n    WebGlConstants[WebGlConstants[\"VIEWPORT\"] = 2978] = \"VIEWPORT\";\r\n    WebGlConstants[WebGlConstants[\"ZERO\"] = 0] = \"ZERO\";\r\n})(WebGlConstants || (WebGlConstants = {}));\n\n//GLTF\n\nconst createVec2 = () => new Float64Array(2);\r\nconst createVec4 = () => new Float64Array(4);\r\nconst createVec3 = () => new Float64Array(3);\r\nconst createMat4 = () => new Float64Array(16);\r\nconst createQuat = () => new Float64Array(4);\r\nconst createIdentityMat4 = () => mat4.identity(createMat4());\n\nconst getTrsFromMatrix = (matrix) => {\r\n    const scale = mat4.getScaling(createVec3(), matrix);\r\n    const scaledMatrix = mat4.scale(createMat4(), matrix, [1 / scale[0], 1 / scale[1], 1 / scale[2]]);\r\n    return {\r\n        translation: mat4.getTranslation(createVec3(), matrix),\r\n        rotation: mat4.getRotation(createVec4(), scaledMatrix),\r\n        scale\r\n    };\r\n};\r\nconst getMatrixFromTrs = (trs) => mat4.fromRotationTranslationScale(createMat4(), trs.rotation, trs.translation, trs.scale);\r\nconst getModelMatrix = (parentModelMatrix) => (localMatrix) => parentModelMatrix\r\n    ? mat4.multiply(createMat4(), parentModelMatrix, localMatrix)\r\n    : localMatrix.slice();\r\nconst getNormalMatrix = (modelMatrix) => mat4.transpose(mat4.create(), mat4.invert(mat4.create(), modelMatrix));\r\nconst getViewMatrices = (camera) => (modelMatrix) => {\r\n    const modelViewMatrix = mat4.multiply(mat4.create(), camera.view, modelMatrix);\r\n    const modelViewProjectionMatrix = mat4.multiply(mat4.create(), camera.projection, modelViewMatrix);\r\n    return {\r\n        modelViewMatrix,\r\n        modelViewProjectionMatrix\r\n    };\r\n};\r\nconst updateTransform = (opts) => (parentModelMatrix) => (transform) => {\r\n    const localMatrix = opts.updateLocal ? getMatrixFromTrs(transform.trs) : transform.localMatrix;\r\n    const modelMatrix = opts.updateModel ? getModelMatrix(parentModelMatrix)(localMatrix) : transform.modelMatrix;\r\n    const normalMatrix = opts.updateModel && transform.normalMatrix\r\n        ? getNormalMatrix(modelMatrix)\r\n        : undefined;\r\n    const { modelViewMatrix, modelViewProjectionMatrix } = opts.updateView ? getViewMatrices(opts.camera)(modelMatrix) : transform;\r\n    return Object.assign({}, transform, {\r\n        localMatrix, modelMatrix, normalMatrix, modelViewMatrix, modelViewProjectionMatrix\r\n    });\r\n};\n\nconst getOrthographicProjection = (cam) => {\r\n    const values = createMat4();\r\n    const r = cam.xmag;\r\n    const t = cam.ymag;\r\n    const n = cam.znear;\r\n    const f = cam.zfar;\r\n    values[0] = 1 / r;\r\n    values[5] = 1 / t;\r\n    values[10] = 2 / (n - f);\r\n    values[14] = (f + n) / (n - f);\r\n    values[15] = 1;\r\n    return values;\r\n};\r\nconst getPerspectiveProjection = (cam) => {\r\n    const values = createMat4();\r\n    const a = cam.aspectRatio;\r\n    const y = cam.yfov;\r\n    const n = cam.znear;\r\n    const f = cam.zfar; //if this is undefined, use infinite projection\r\n    values[0] = 1 / (a * Math.tan(.5 * y));\r\n    values[5] = 1 / (Math.tan(.5 * y));\r\n    values[10] = f === undefined ? -1 : (f + n) / (n - f);\r\n    values[11] = -1;\r\n    values[14] = f === undefined ? (-2 * n) : (2 * f * n) / (n - f);\r\n    return values;\r\n};\r\nconst getCameraProjection = (cam) => cam.kind == CameraKind.ORTHOGRAPHIC\r\n    ? getOrthographicProjection(cam)\r\n    : getPerspectiveProjection(cam);\r\nconst getCameraView = (modelMatrix) => mat4.invert(createMat4(), modelMatrix);\r\nconst getCameraPosition = (modelMatrix) => mat4.getTranslation(createVec3(), modelMatrix);\r\nconst updateCameraWithTransform = (transform) => (camera) => Object.assign({}, camera, {\r\n    position: mat4.getTranslation(createVec3(), transform.localMatrix),\r\n    view: getCameraView(transform.modelMatrix),\r\n    projection: getCameraProjection(camera)\r\n});\n\n//filter stuff could use some testing\r\nconst filterNodeDeep = (fn) => (node) => {\r\n    if (node === undefined || !fn(node)) {\r\n        return undefined;\r\n    }\r\n    return !node.children\r\n        ? node\r\n        : Object.assign({}, node, { children: node.children.map(filterNodeDeep(fn)).filter(n => n) });\r\n};\r\nconst filterNodesDeep = (fn) => (nodes) => nodes\r\n    .map(filterNodeDeep(fn))\r\n    .filter(n => n);\r\n//Side effects\r\n//Note -forEach allows returning true to exit early\r\nconst forEachNode = (fn) => (node) => {\r\n    if (fn(node) !== true && node.children) {\r\n        node.children.forEach(forEachNode(fn));\r\n    }\r\n};\r\nconst forEachNodes = (fn) => (nodes) => nodes.forEach(forEachNode(fn));\r\n//Helpers\r\nconst countNodes = (nodes) => {\r\n    let count = 0;\r\n    forEachNodes(() => (count++, null))(nodes);\r\n    return count;\r\n};\r\nconst findNode = (pred) => (nodesOrNode) => {\r\n    let targetNode;\r\n    const fn = (node) => {\r\n        if (pred(node)) {\r\n            targetNode = node;\r\n            return true;\r\n        }\r\n    };\r\n    if (Array.isArray(nodesOrNode)) {\r\n        forEachNodes(fn)(nodesOrNode);\r\n    }\r\n    else {\r\n        forEachNode(fn)(nodesOrNode);\r\n    }\r\n    return targetNode;\r\n};\r\n//Note - the immutability guarantee is the responsibility of the function - after it returns, the children are _replaced_\r\nconst mapNode = (fn) => (node) => {\r\n    const n = fn(node);\r\n    return !n.children\r\n        ? n\r\n        : Object.assign(n, { children: n.children.map(mapNode(fn)) });\r\n};\r\nconst mapNodeWithParent = (fn) => (parent) => (node) => {\r\n    const n = fn(parent)(node);\r\n    return !n.children\r\n        ? n\r\n        : Object.assign(n, { children: n.children.map(mapNodeWithParent(fn)(n)) });\r\n};\r\nconst mapNodesWithParent = (fn) => (parent) => (nodes) => nodes.map(mapNodeWithParent(fn)(parent));\r\nconst mapNodes = (fn) => (nodes) => nodes.map(mapNode(fn));\r\n//Specific use-cases\r\nconst updateNodeTransforms = (opts) => (parent) => (node) => mapNodeWithParent((_parent) => (_node) => {\r\n    const pModelMatrix = _parent ? _parent.transform.modelMatrix : undefined;\r\n    const t = updateTransform(opts)(pModelMatrix)(_node.transform);\r\n    return Object.assign({}, _node, { transform: t });\r\n})(parent)(node);\r\nconst updateNodeListTransforms = (opts) => (parent) => (nodes) => mapNodesWithParent(updateNodeTransforms(opts))(parent)(nodes);\n\nconst createPointLight = () => { };\n\n//adapted from https://www.geeksforgeeks.org/binary-search/\r\n//returns the left and right bounds if there's no _exact_ match, otherwise, the match\r\nconst binaryFindBounds = (getValue) => (arr) => (x) => {\r\n    const max = arr.length - 1;\r\n    const _withinBounds = ([l, r]) => {\r\n        if (l === r) {\r\n            return false;\r\n        }\r\n        if (l < 0 || r < 1) {\r\n            return false;\r\n        }\r\n        const pValue = getValue(arr[l]);\r\n        const nValue = getValue(arr[r]);\r\n        return (x > pValue && x < nValue);\r\n    };\r\n    const _binarySearch = ([l, r]) => {\r\n        if (r >= l) {\r\n            const mid = 0 | (l + (r - l) / 2);\r\n            const value = getValue(arr[mid]);\r\n            if (value == x) {\r\n                return mid;\r\n            }\r\n            if (_withinBounds([mid - 1, mid])) {\r\n                return [mid - 1, mid];\r\n            }\r\n            if (_withinBounds([mid, mid + 1])) {\r\n                return [mid, mid + 1];\r\n            }\r\n            return (value > x)\r\n                ? _binarySearch([l, mid - 1])\r\n                : _binarySearch([mid + 1, r]);\r\n        }\r\n        return -1;\r\n    };\r\n    return _binarySearch([0, max]);\r\n};\n\nconst interpolate_linear = ({ v0, v1, t }) => {\r\n    if (typeof v0 === \"number\" && typeof v1 === \"number\") {\r\n        return v0 * (1 - t) + v1 * t;\r\n    }\r\n    const xs0 = v0;\r\n    const xs1 = v1;\r\n    if (xs0.length !== xs1.length) {\r\n        throw new Error(\"different length of animation values\");\r\n    }\r\n    switch (xs0.length) {\r\n        case 1: return interpolate_linear({ v0: xs0[0], v1: xs1[0], t });\r\n        case 2: return vec2.lerp(vec2.create(), xs0, xs1, t);\r\n        case 3: return vec3.lerp(vec3.create(), xs0, xs1, t);\r\n        case 4: return vec4.lerp(vec4.create(), xs0, xs1, t);\r\n    }\r\n};\r\nconst interpolateKeyframes = ({ k0, k1, time, interpolation, targetPath }) => {\r\n    const v0 = k0.values;\r\n    const v1 = k1.values;\r\n    const t = (time - k0.timing) / (k1.timing - k0.timing); //get t as a percentage of timing between k0 and k1: https://math.stackexchange.com/questions/754130/find-what-percent-x-is-between-two-numbers\r\n    switch (interpolation) {\r\n        case GltfAnimationInterpolation.LINEAR: return targetPath === GltfAnimationTargetPath.ROTATION\r\n            ? quat.slerp(quat.create(), v0, v1, t)\r\n            : interpolate_linear({ v0, v1, t });\r\n        case GltfAnimationInterpolation.STEP: return v0;\r\n        case GltfAnimationInterpolation.CUBICSPLINE: throw new Error(\"cubicspline is not supported yet!\");\r\n        default: throw new Error(\"unsupported interpolation \");\r\n    }\r\n};\r\nconst findKeyframeBounds = binaryFindBounds((k) => k.timing);\n\nconst GLTF_PARSE_ACCESSOR_TYPE_SIZE = {\r\n    'SCALAR': 1,\r\n    'VEC2': 2,\r\n    'VEC3': 3,\r\n    'VEC4': 4,\r\n    'MAT2': 4,\r\n    'MAT3': 9,\r\n    'MAT4': 16\r\n};\r\nconst GLTF_PARSE_COMPONENT_BYTE_SIZE = {\r\n    [WebGlConstants.BYTE]: 1,\r\n    [WebGlConstants.UNSIGNED_BYTE]: 1,\r\n    [WebGlConstants.SHORT]: 2,\r\n    [WebGlConstants.UNSIGNED_SHORT]: 2,\r\n    [WebGlConstants.UNSIGNED_INT]: 4,\r\n    [WebGlConstants.FLOAT]: 4\r\n};\n\nconst getComponentTypedData = ({ buffer, componentType }) => {\r\n    switch (componentType) {\r\n        case WebGlConstants.BYTE: return new Int8Array(buffer);\r\n        case WebGlConstants.UNSIGNED_BYTE: return new Uint8Array(buffer);\r\n        case WebGlConstants.SHORT: return new Int16Array(buffer);\r\n        case WebGlConstants.UNSIGNED_SHORT: return new Uint16Array(buffer);\r\n        case WebGlConstants.UNSIGNED_INT: return new Uint32Array(buffer);\r\n        case WebGlConstants.FLOAT: return new Float32Array(buffer);\r\n        default: throw new Error(\"unknown accessor component type!\");\r\n    }\r\n};\r\nconst getTypedDataFromInfo = ({ info, buffers }) => (info.bufferViewIndex === undefined)\r\n    ? getComponentTypedData({\r\n        buffer: new ArrayBuffer(info.bufferLength),\r\n        componentType: info.componentType\r\n    })\r\n    : getComponentTypedData({\r\n        buffer: buffers[info.bufferIndex].slice(info.byteOffset, info.byteOffset + info.bufferLength),\r\n        componentType: info.componentType\r\n    });\r\nconst GLTF_PARSE_getAccessorTypedData = ({ gltf, info, buffers }) => {\r\n    const values = getTypedDataFromInfo({ info, buffers });\r\n    if (info.sparse) {\r\n        const typeCount = GLTF_PARSE_ACCESSOR_TYPE_SIZE[info.accessorType];\r\n        const sparseIndices = getTypedDataFromInfo({ info: info.sparse.indices, buffers });\r\n        const sparseValues = getTypedDataFromInfo({ info: info.sparse.values, buffers });\r\n        sparseIndices\r\n            .map(value => value * typeCount)\r\n            .forEach((indexOfValue, valueIndex) => {\r\n            for (let i = 0; i < typeCount; i++) {\r\n                values[indexOfValue + i] = sparseValues[i + (valueIndex * typeCount)];\r\n            }\r\n        });\r\n    }\r\n    return values;\r\n};\r\n/*\r\nexport const GLTF_PARSE_createTypedData = ({ gltf, buffers}: { gltf: GLTF_ORIGINAL, buffers: Array<ArrayBuffer>}) => {\r\n\n    const accessorData = new Map<number, TypedNumberArray>();\r\n\n    const isAttribute = (accessorId:number):boolean => {\r\n        if(!gltf.nodes || !gltf.meshes || !gltf.nodes.length || !gltf.meshes.length) {\r\n            return false;\r\n        }\r\n\n        return gltf.nodes.findIndex(node => {\r\n            if(node.mesh === undefined) {\r\n                return false;\r\n            }\r\n\n            return gltf.meshes[node.mesh].primitives.findIndex(p =>\r\n                Object.keys(p.attributes).findIndex(k => p[k] === accessorId) !== -1\r\n            ) !== -1\r\n        }) !== -1\r\n    }\r\n\n    const isImage = (accessorId:number):boolean => {\r\n        if(!gltf.images || !gltf.images.length) {\r\n            return false;\r\n        }\r\n\n        return gltf.images.findIndex(image =>\r\n            image.bufferView === gltf.accessors[accessorId].bufferView\r\n        ) !== -1\r\n    }\r\n\n    gltf.accessors\r\n        .forEach((accessor, accessorId) => {\r\n            if(!isAttribute(accessorId) && !isImage(accessorId)) {\r\n                const values = GLTF_PARSE_getAccessorTypedData({gltf, buffers, accessorId});\r\n                accessorData.set(accessorId, values);\r\n\n                console.log(\"created typed data for accessor\", accessorId);\r\n            } else {\r\n                console.log(\"skipping typed data for accessor\", accessorId);\r\n            }\r\n\n        });\r\n\n    return accessorData;\r\n}\r\n */\n\nconst getAccessorInfo = ({ gltf, accessor }) => {\r\n    const byteLength = (accessor.count * GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type] * GLTF_PARSE_COMPONENT_BYTE_SIZE[accessor.componentType]);\r\n    if (accessor.bufferView === undefined) {\r\n        if (accessor.sparse === undefined) {\r\n            throw new Error(\"accessor must either be sparse or have a buffer view\");\r\n        }\r\n        return {\r\n            bufferLength: byteLength,\r\n            componentType: accessor.componentType,\r\n            accessorType: accessor.type\r\n        };\r\n    }\r\n    const bufferView = gltf.bufferViews[accessor.bufferView];\r\n    const byteOffset = (bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset) + (accessor.byteOffset === undefined ? 0 : accessor.byteOffset);\r\n    const byteStride = bufferView.byteStride ? bufferView.byteStride : 0;\r\n    const byteStrideLength = byteStride * GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type] * GLTF_PARSE_COMPONENT_BYTE_SIZE[accessor.componentType];\r\n    const bufferLength = byteStrideLength + byteLength;\r\n    return {\r\n        bufferLength,\r\n        componentType: accessor.componentType,\r\n        bufferViewIndex: accessor.bufferView,\r\n        bufferIndex: bufferView.buffer,\r\n        byteOffset,\r\n        accessorType: accessor.type\r\n    };\r\n};\r\nconst getSparseAccessorIndicesInfo = ({ gltf, accessor }) => {\r\n    const values = accessor.sparse.indices;\r\n    const byteLength = (accessor.sparse.count * GLTF_PARSE_COMPONENT_BYTE_SIZE[values.componentType]);\r\n    const bufferView = gltf.bufferViews[values.bufferView];\r\n    const byteOffset = (bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset) + (values.byteOffset === undefined ? 0 : values.byteOffset);\r\n    return {\r\n        bufferLength: byteLength,\r\n        componentType: values.componentType,\r\n        bufferViewIndex: accessor.bufferView,\r\n        bufferIndex: bufferView.buffer,\r\n        byteOffset,\r\n        accessorType: accessor.type\r\n    };\r\n};\r\nconst getSparseAccessorValuesInfo = ({ gltf, accessor }) => {\r\n    const values = accessor.sparse.values;\r\n    const byteLength = (accessor.sparse.count * GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type] * GLTF_PARSE_COMPONENT_BYTE_SIZE[accessor.componentType]);\r\n    const bufferView = gltf.bufferViews[values.bufferView];\r\n    const byteOffset = (bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset) + (values.byteOffset === undefined ? 0 : values.byteOffset);\r\n    return {\r\n        bufferLength: byteLength,\r\n        componentType: accessor.componentType,\r\n        bufferViewIndex: accessor.bufferView,\r\n        bufferIndex: bufferView.buffer,\r\n        byteOffset,\r\n        accessorType: accessor.type\r\n    };\r\n};\r\nconst GLTF_PARSE_getAccessorDataInfo = ({ gltf, accessorId }) => {\r\n    const accessor = gltf.accessors[accessorId];\r\n    const info = getAccessorInfo({ gltf, accessor });\r\n    if (accessor.sparse) {\r\n        info.sparse = {\r\n            indices: getSparseAccessorIndicesInfo({ gltf, accessor }),\r\n            values: getSparseAccessorValuesInfo({ gltf, accessor })\r\n        };\r\n    }\r\n    return info;\r\n};\n\nconst GLTF_PARSE_animationPathToString = {\r\n    [GltfAnimationTargetPath.WEIGHTS]: \"weights\",\r\n    [GltfAnimationTargetPath.TRANSLATION]: \"translation\",\r\n    [GltfAnimationTargetPath.ROTATION]: \"rotation\",\r\n    [GltfAnimationTargetPath.SCALE]: \"scale\"\r\n};\r\nconst GLTF_PARSE_animationStringToPath = {\r\n    \"weights\": GltfAnimationTargetPath.WEIGHTS,\r\n    \"translation\": GltfAnimationTargetPath.TRANSLATION,\r\n    \"rotation\": GltfAnimationTargetPath.ROTATION,\r\n    \"scale\": GltfAnimationTargetPath.SCALE,\r\n};\r\nconst GLTF_PARSE_interpolationLookup = {\r\n    \"linear\": GltfAnimationInterpolation.LINEAR,\r\n    \"step\": GltfAnimationInterpolation.STEP,\r\n    \"cubicspline\": GltfAnimationInterpolation.CUBICSPLINE\r\n};\r\nconst GLTF_PARSE_addAnimationIds = ({ gltf, nodes }) => {\r\n    let animationId = 0;\r\n    if (gltf.animations) {\r\n        gltf.animations.forEach(animation => {\r\n            animation\r\n                .channels\r\n                .filter(channel => channel.target.node !== undefined)\r\n                .forEach(channel => {\r\n                mapNodes((node) => {\r\n                    if (node.originalNodeId === channel.target.node && node.animationIds.indexOf(animationId) === -1) {\r\n                        node.animationIds.push(animationId);\r\n                    }\r\n                    return node;\r\n                })(nodes);\r\n                animationId++;\r\n            });\r\n        });\r\n    }\r\n    return nodes;\r\n};\r\nconst GLTF_PARSE_createAnimations = ({ gltf, buffers }) => {\r\n    //load animation list\r\n    const animations = new Map();\r\n    let animationId = 0;\r\n    if (gltf.animations) {\r\n        gltf.animations.forEach(animation => {\r\n            animation\r\n                .channels\r\n                .filter(channel => channel.target.node !== undefined)\r\n                .forEach(channel => {\r\n                const targetPath = GLTF_PARSE_animationStringToPath[channel.target.path.toLowerCase()];\r\n                const sampler = animation.samplers[channel.sampler];\r\n                const interpolation = GLTF_PARSE_interpolationLookup[sampler.interpolation ? sampler.interpolation.toLowerCase() : \"linear\"];\r\n                const timeAccessor = gltf.accessors[sampler.input];\r\n                const timings = GLTF_PARSE_getAccessorTypedData({\r\n                    gltf,\r\n                    buffers,\r\n                    info: GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId: sampler.input })\r\n                });\r\n                const values = GLTF_PARSE_getAccessorTypedData({\r\n                    gltf,\r\n                    buffers,\r\n                    info: GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId: sampler.output })\r\n                });\r\n                const valuesAccessor = gltf.accessors[sampler.output];\r\n                //can't be map() because Array != Float64Array\r\n                let keyframes = new Array(timings.length);\r\n                timings.forEach((timing, index) => {\r\n                    const count = targetPath === GltfAnimationTargetPath.WEIGHTS\r\n                        ? values.length / timings.length //always a scalar and final size will be the number of morph targets times the number of animation frames.\r\n                        : GLTF_PARSE_ACCESSOR_TYPE_SIZE[valuesAccessor.type];\r\n                    keyframes[index] = {\r\n                        timing,\r\n                        values: count === 1\r\n                            ? values[index]\r\n                            : values.subarray(index * count, (index + 1) * count),\r\n                    };\r\n                });\r\n                animations.set(animationId++, {\r\n                    keyframes,\r\n                    interpolation,\r\n                    targetPath,\r\n                    timeMin: timeAccessor.min[0],\r\n                    timeMax: timeAccessor.max[0]\r\n                });\r\n            });\r\n        });\r\n    }\r\n    return animations;\r\n};\n\nconst gltf_setAnimationTime = (animation) => (time) => (node) => {\r\n    const bounds = findKeyframeBounds(animation.keyframes)(time);\r\n    if (bounds === -1) {\r\n        return;\r\n    }\r\n    const values = !Array.isArray(bounds)\r\n        ? animation.keyframes[bounds].values //if it's an exact match there's no need to interpolate\r\n        : interpolateKeyframes({\r\n            k0: animation.keyframes[bounds[0]],\r\n            k1: animation.keyframes[bounds[1]],\r\n            interpolation: animation.interpolation,\r\n            targetPath: animation.targetPath,\r\n            time\r\n        });\r\n    return Object.assign({}, node, (animation.targetPath === GltfAnimationTargetPath.WEIGHTS)\r\n        ? { morphWeights: values }\r\n        : { transform: Object.assign({}, node.transform, {\r\n                trs: Object.assign({}, node.transform.trs, {\r\n                    [GLTF_PARSE_animationPathToString[animation.targetPath]]: values\r\n                })\r\n            })\r\n        });\r\n};\r\n//creates a function that will iterate over all the baked in animations, with a provided timestep\r\nconst gltf_createAnimator = (animations) => ({ loop }) => {\r\n    const totalTimes = new Map();\r\n    animations.forEach((value, key) => totalTimes.set(key, 0));\r\n    let lastTs;\r\n    return (ts) => (nodes) => {\r\n        const dt = lastTs === undefined ? 0 : ((ts - lastTs) / 1000);\r\n        lastTs = ts;\r\n        animations.forEach((animation, key) => {\r\n            const prevTime = totalTimes.get(key);\r\n            let nextTime = prevTime + dt;\r\n            if (loop === true) {\r\n                while (nextTime > animation.timeMax) {\r\n                    nextTime -= animation.timeMax;\r\n                }\r\n            }\r\n            if (nextTime >= animation.timeMin && nextTime <= animation.timeMax) {\r\n                nodes = mapNodes((node) => node.animationIds.indexOf(key) !== -1\r\n                    ? gltf_setAnimationTime(animation)(nextTime)(node)\r\n                    : node)(nodes);\r\n            }\r\n            totalTimes.set(key, nextTime);\r\n        });\r\n        return nodes;\r\n    };\r\n};\n\nconst GLTF_PARSE_attributeNames = [\r\n    \"a_Position\",\r\n    \"a_Normal\",\r\n    \"a_Tangent\",\r\n    \"a_UV\",\r\n    \"a_Color\",\r\n    \"a_Morph_0\",\r\n    \"a_Morph_1\",\r\n    \"a_Morph_2\",\r\n    \"a_Morph_3\",\r\n    \"a_Morph_4\",\r\n    \"a_Morph_5\",\r\n    \"a_Morph_6\",\r\n    \"a_Morph_7\",\r\n    \"a_Skin_Joint\",\r\n    \"a_Skin_Weight\"\r\n];\r\nconst getAccessorStrategy = ({ gltf, accessor, info }) => {\r\n    const typeCount = GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type];\r\n    const bufferView = (accessor.bufferView === undefined)\r\n        ? undefined\r\n        : gltf.bufferViews[accessor.bufferView];\r\n    const stride = (bufferView === undefined || bufferView.byteStride === undefined) ? 0 : bufferView.byteStride;\r\n    return {\r\n        size: typeCount,\r\n        type: accessor.componentType,\r\n        normalized: accessor.normalized === undefined ? false : accessor.normalized,\r\n        stride,\r\n        offset: (info.sparse || !accessor.byteOffset) ? 0 : accessor.byteOffset\r\n        //since we sliced it off already for sparse values, it's always 0 here\r\n    };\r\n};\r\nconst isAttribute = ({ gltf, accessorId }) => {\r\n    if (!gltf.nodes) {\r\n        return false;\r\n    }\r\n    return gltf.nodes.some(node => node.mesh === undefined ? false :\r\n        gltf.meshes[node.mesh].primitives.some(primitive => primitive.indices === accessorId\r\n            || Object.keys(primitive.attributes).some(key => primitive.attributes[key] === accessorId)\r\n            || (primitive.targets && primitive.targets.some(target => Object.keys(target).some(key => target[key] === accessorId)))));\r\n};\r\nconst GLTF_PARSE_createAttributes = ({ gltf, buffers, renderer }) => {\r\n    const bufferViewInfo = new Map();\r\n    const accessorLookup = new Map();\r\n    const indicesList = [];\r\n    if (gltf.meshes) {\r\n        gltf.meshes.forEach(mesh => {\r\n            mesh.primitives.forEach(primitive => {\r\n                if (primitive.indices !== undefined) {\r\n                    indicesList.push(primitive.indices);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    gltf.accessors\r\n        .map((accessor, accessorId) => ({ accessor, accessorId }))\r\n        .filter(({ accessorId }) => isAttribute({ gltf, accessorId }))\r\n        .forEach(({ accessor, accessorId }) => {\r\n        const isElements = indicesList.indexOf(accessorId) === -1 ? false : true;\r\n        const info = GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId });\r\n        const strategy = getAccessorStrategy({ gltf, accessor, info });\r\n        let rendererBufferId, buffer;\r\n        if (accessor.sparse) {\r\n            rendererBufferId = Symbol(`accessor ${accessorId}`);\r\n            buffer = GLTF_PARSE_getAccessorTypedData({\r\n                gltf,\r\n                buffers,\r\n                info\r\n            }).buffer;\r\n        }\r\n        else {\r\n            if (!bufferViewInfo.has(info.bufferViewIndex)) {\r\n                const bufferView = gltf.bufferViews[info.bufferViewIndex];\r\n                const byteOffset = bufferView.byteOffset ? bufferView.byteOffset : 0;\r\n                bufferViewInfo.set(info.bufferViewIndex, {\r\n                    rendererBufferId: Symbol(`${info.bufferViewIndex}`),\r\n                    buffer: buffers[info.bufferIndex].slice(byteOffset, byteOffset + bufferView.byteLength)\r\n                });\r\n            }\r\n            const bvInfo = bufferViewInfo.get(info.bufferViewIndex);\r\n            rendererBufferId = bvInfo.rendererBufferId;\r\n            buffer = bvInfo.buffer;\r\n        }\r\n        renderer.buffers.assign(rendererBufferId)({\r\n            target: isElements ? WebGlConstants.ELEMENT_ARRAY_BUFFER : WebGlConstants.ARRAY_BUFFER,\r\n            usagePattern: WebGlConstants.STATIC_DRAW,\r\n            data: buffer\r\n        });\r\n        accessorLookup.set(accessorId, { strategy, rendererBufferId });\r\n    });\r\n    const vaoIdLookup = new Map();\r\n    return { accessorLookup, vaoIdLookup };\r\n};\n\nconst HAS_PREPPED = Symbol();\r\n//This only happens once and it won't hurt to call when in doubt\r\n//Only used at init/loading\r\nconst prepWebGlRenderer = (renderer) => {\r\n    if (renderer.extras[HAS_PREPPED] !== true) {\r\n        if (renderer.version > 1) {\r\n            throw new Error(\"GLTF Renderering only supports WebGL 1.0 for now\");\r\n        }\r\n        GLTF_PARSE_attributeNames.forEach(aName => {\r\n            renderer.attributes.globalLocations.add(aName);\r\n        });\r\n        renderer.getExtension('OES_standard_derivatives');\r\n        renderer.getExtension('EXT_shader_texture_lod');\r\n        renderer.getExtension('EXT_SRGB');\r\n        renderer.getExtension('OES_element_index_uint'); //only for scifi-helmet...\r\n        renderer.extras[HAS_PREPPED] = true;\r\n    }\r\n};\n\nconst faceTargetFromKey = (key) => {\r\n    switch (key) {\r\n        case \"posX\": return WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_X;\r\n        case \"negX\": return WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_X;\r\n        case \"posY\": return WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Y;\r\n        case \"negY\": return WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Y;\r\n        case \"posZ\": return WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Z;\r\n        case \"negZ\": return WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Z;\r\n    }\r\n};\r\nconst createTextureSwitcher = (gl) => {\r\n    const activeTextureMap = new Map();\r\n    const _switchTexture = (target) => (samplerIndex) => (texture) => {\r\n        const skipSwitch = activeTextureMap.has(samplerIndex) && (() => {\r\n            const cacheInfo = activeTextureMap.get(samplerIndex);\r\n            return cacheInfo.target === target && cacheInfo.texture === texture;\r\n        })();\r\n        if (!skipSwitch) {\r\n            gl.activeTexture(gl.TEXTURE0 + samplerIndex);\r\n            gl.bindTexture(target, texture);\r\n            activeTextureMap.set(samplerIndex, { target, texture });\r\n        }\r\n        return texture;\r\n    };\r\n    return {\r\n        switchTexture: _switchTexture(WebGlConstants.TEXTURE_2D),\r\n        switchCubeTexture: _switchTexture(WebGlConstants.TEXTURE_CUBE_MAP)\r\n    };\r\n};\r\nconst createTextureFromTarget = (opts) => (targets) => {\r\n    const { gl } = opts;\r\n    const texture = gl.createTexture();\r\n    const bindTarget = WebGlConstants.TEXTURE_2D;\r\n    const dataSize = opts.dataSize || gl.UNSIGNED_BYTE;\r\n    gl.bindTexture(bindTarget, texture);\r\n    opts.setParameters(opts);\r\n    const mipTargets = Array.isArray(targets) ? targets : [targets];\r\n    mipTargets.forEach((target, mipLevel) => {\r\n        if (target instanceof Element) {\r\n            gl.texImage2D(bindTarget, mipLevel, opts.format, opts.format, dataSize, target);\r\n        }\r\n        else {\r\n            gl.texImage2D(bindTarget, mipLevel, opts.format, opts.width, opts.height, 0, opts.format, dataSize, target);\r\n        }\r\n    });\r\n    return texture;\r\n};\r\nconst createCubeTextureFromTarget = (opts) => (targets) => {\r\n    const { gl } = opts;\r\n    const texture = gl.createTexture();\r\n    const bindTarget = WebGlConstants.TEXTURE_CUBE_MAP;\r\n    const dataSize = opts.dataSize || gl.UNSIGNED_BYTE;\r\n    gl.bindTexture(bindTarget, texture);\r\n    opts.setParameters(opts);\r\n    const mipTargets = Array.isArray(targets) ? targets : [targets];\r\n    mipTargets.forEach((mipTarget, mipLevel) => {\r\n        Object.keys(mipTarget).forEach((key) => {\r\n            const faceTarget = faceTargetFromKey(key);\r\n            const target = mipTarget[key];\r\n            if (target instanceof Element) {\r\n                gl.texImage2D(faceTarget, mipLevel, opts.format, opts.format, dataSize, target);\r\n            }\r\n            else {\r\n                gl.texImage2D(faceTarget, mipLevel, opts.format, opts.width, opts.height, 0, opts.format, dataSize, target);\r\n            }\r\n        });\r\n    });\r\n    return texture;\r\n};\r\n//only first param is set by user, second is set internally\r\nconst textureSetterSimple = (opts) => (_opts) => {\r\n    const { gl, width, height } = _opts;\r\n    const isPowerOf2 = (value) => (value & (value - 1)) == 0;\r\n    if (opts.flipY) {\r\n        gl.pixelStorei(WebGlConstants.UNPACK_FLIP_Y_WEBGL, true);\r\n    }\r\n    else {\r\n        gl.pixelStorei(WebGlConstants.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n    if (isPowerOf2(width) && isPowerOf2(height) && opts.useMips === true) {\r\n        gl.generateMipmap(WebGlConstants.TEXTURE_2D);\r\n    }\r\n    else {\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_WRAP_S, !opts.wrapS ? WebGlConstants.CLAMP_TO_EDGE : opts.wrapS);\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_WRAP_T, !opts.wrapT ? WebGlConstants.CLAMP_TO_EDGE : opts.wrapT);\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_MIN_FILTER, !opts.filterMin ? WebGlConstants.LINEAR : opts.filterMin);\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_MAG_FILTER, !opts.filterMag ? WebGlConstants.LINEAR : opts.filterMag);\r\n    }\r\n};\r\nconst createSimpleTextureFromTarget = (opts) => (target) => createTextureFromTarget({\r\n    gl: opts.gl,\r\n    format: opts.alpha ? WebGlConstants.RGBA : WebGlConstants.RGB,\r\n    setParameters: textureSetterSimple(opts)\r\n})(target);\n\nconst getColorSpaceForTextureId = ({ renderer, gltf, textureId }) => {\r\n    const defaultColorSpace = WebGlConstants.RGBA;\r\n    const SRGBA = 0x8C42; //SRGB_ALPHA_EXT ... not in type definitions yet and might vary by renderer.version\r\n    for (let i = 0; i < gltf.materials.length; i++) {\r\n        const material = gltf.materials[i];\r\n        if (material.emissiveTexture && material.emissiveTexture.index === textureId) {\r\n            return SRGBA;\r\n        }\r\n        if (material.normalTexture && material.normalTexture.index === textureId) {\r\n            return WebGlConstants.RGBA;\r\n        }\r\n        if (material.occlusionTexture && material.occlusionTexture.index === textureId) {\r\n            return WebGlConstants.RGBA;\r\n        }\r\n        if (material.pbrMetallicRoughness) {\r\n            if (material.pbrMetallicRoughness.baseColorTexture && material.pbrMetallicRoughness.baseColorTexture.index === textureId) {\r\n                return SRGBA;\r\n            }\r\n            if (material.pbrMetallicRoughness.metallicRoughnessTexture && material.pbrMetallicRoughness.metallicRoughnessTexture.index === textureId) {\r\n                return WebGlConstants.RGBA;\r\n            }\r\n        }\r\n    }\r\n    return defaultColorSpace;\r\n};\r\nconst requiresPowerOf2 = ({ wrapS, wrapT, filterMin, filterMag, sampler }) => (wrapS === WebGlConstants.REPEAT || wrapS === WebGlConstants.MIRRORED_REPEAT || wrapT === WebGlConstants.REPEAT || wrapT === WebGlConstants.MIRRORED_REPEAT)\r\n    || (filterMin === WebGlConstants.NEAREST_MIPMAP_NEAREST || filterMin === WebGlConstants.NEAREST_MIPMAP_LINEAR || filterMin === WebGlConstants.LINEAR_MIPMAP_NEAREST || filterMin === WebGlConstants.LINEAR_MIPMAP_LINEAR);\r\nconst isPowerOf2 = (img) => {\r\n    const check = (value) => (value & (value - 1)) == 0;\r\n    return check(img.naturalWidth) && check(img.naturalHeight);\r\n};\r\nconst nextHighestPowerOfTwo = (x) => {\r\n    --x;\r\n    for (var i = 1; i < 32; i <<= 1) {\r\n        x = x | x >> i;\r\n    }\r\n    return x + 1;\r\n};\r\nconst resizeImageToNextPowerOf2 = (img) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = nextHighestPowerOfTwo(img.width);\r\n    canvas.height = nextHighestPowerOfTwo(img.height);\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height); //use img.width/height if not scaling\r\n    return canvas;\r\n};\r\nconst defaultSampler = {\r\n    filterMin: WebGlConstants.LINEAR,\r\n    filterMag: WebGlConstants.LINEAR,\r\n    wrapS: WebGlConstants.REPEAT,\r\n    wrapT: WebGlConstants.REPEAT\r\n};\r\nconst GLTF_PARSE_createTextures = ({ renderer, gltf, imageElements }) => {\r\n    const textureMap = new Map();\r\n    const { gl } = renderer;\r\n    if (gltf.textures) {\r\n        gltf.textures.forEach((texture, textureId) => {\r\n            const sampler = Object.assign({}, defaultSampler, texture.sampler === undefined ? undefined : gltf.samplers[texture.sampler]);\r\n            const colorSpace = getColorSpaceForTextureId({ renderer, gltf, textureId });\r\n            const img = imageElements[texture.source];\r\n            const { wrapS, wrapT, filterMin, filterMag } = sampler;\r\n            const display = (requiresPowerOf2({ wrapS, wrapT, filterMin, filterMag, sampler }) && !isPowerOf2(img))\r\n                ? resizeImageToNextPowerOf2(img)\r\n                : img;\r\n            const wTexture = createTextureFromTarget({\r\n                gl,\r\n                format: colorSpace,\r\n                setParameters: () => {\r\n                    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n                    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filterMin);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filterMag);\r\n                }\r\n            })(display);\r\n            textureMap.set(textureId, wTexture);\r\n        });\r\n    }\r\n    return textureMap;\r\n};\n\n//helper for loading each item separately and creating the world manually\r\nconst getBasePath = (path) => {\r\n    const idx1 = (path.lastIndexOf(\"/\") + 1);\r\n    const idx2 = (path.lastIndexOf(\"\\\\\") + 1);\r\n    return !idx1 && !idx2\r\n        ? path\r\n        : path.substr(0, (idx1 > idx2) ? idx1 : idx2);\r\n};\n\nconst getIblConfig = (gltf) => {\r\n    if (gltf.extensionsUsed && gltf.extensionsUsed.indexOf(GltfIblExtensionName) !== -1) {\r\n        return gltf.extensions[GltfIblExtensionName];\r\n    }\r\n    return null;\r\n};\r\nconst loadAssets = ({ gltf, coreData }) => {\r\n    const config = getIblConfig(gltf);\r\n    const path = config ? config.path : \"\";\r\n    if (path === \"\") {\r\n        return Future.of(coreData);\r\n    }\r\n    return fetchJsonUrl(path)\r\n        .chain(jsonData => {\r\n        const basePath = getBasePath(path);\r\n        const imageUrls = Array();\r\n        imageUrls.push(jsonData.brdf.url);\r\n        const cubeMapNames = Object.keys(jsonData.cubeMaps);\r\n        cubeMapNames.forEach(cubeMapName => {\r\n            const cubeMap = jsonData.cubeMaps[cubeMapName];\r\n            cubeMap.urls.forEach(list => {\r\n                list.forEach(url => {\r\n                    imageUrls.push(cubeMapName + \"/\" + url);\r\n                });\r\n            });\r\n        });\r\n        const imageFutures = imageUrls.map(url => fetchImage(basePath + url).map(img => ({ url, img })));\r\n        return parallel(Infinity, imageFutures)\r\n            .map(ldrs => {\r\n            const m = new Map();\r\n            ldrs.forEach(ldr => {\r\n                m.set(ldr.url, ldr.img);\r\n            });\r\n            return m;\r\n        })\r\n            .map(imageMap => ({ jsonData, imageMap }));\r\n    })\r\n        .map(ibl => Object.assign({}, coreData, { extensions: Object.assign({}, coreData.extensions, { ibl })\r\n    }));\r\n};\r\nconst createData = ({ gltf, assets, renderer }) => (data) => {\r\n    if (!assets.extensions.ibl) {\r\n        return data;\r\n    }\r\n    prepWebGlRenderer(renderer);\r\n    const gl = renderer.gl;\r\n    const { jsonData, imageMap } = assets.extensions.ibl;\r\n    const makeBrdfTexture = createTextureFromTarget({\r\n        gl,\r\n        format: jsonData.brdf.colorSpace,\r\n        setParameters: () => {\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        }\r\n    });\r\n    const makeCubeMapTexture = (images) => (cubeMapName) => ({ colorSpace, urls }) => {\r\n        const faces = [\"posX\", \"negX\", \"posY\", \"negY\", \"posZ\", \"negZ\"];\r\n        let mipLevels = [];\r\n        urls.forEach(list => {\r\n            const mipLevel = {};\r\n            list.forEach((url, faceIndex) => {\r\n                const img = images.get(cubeMapName + \"/\" + url);\r\n                mipLevel[faces[faceIndex]] = img;\r\n            });\r\n            mipLevels.push(mipLevel);\r\n        });\r\n        return createCubeTextureFromTarget({\r\n            gl,\r\n            format: colorSpace,\r\n            setParameters: opts => {\r\n                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n                if (urls.length > 1) {\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                }\r\n                else {\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                }\r\n            }\r\n        })(mipLevels);\r\n    };\r\n    const ibl = {\r\n        brdf: makeBrdfTexture(imageMap.get(jsonData.brdf.url)),\r\n        cubeMaps: {},\r\n        useLod: false\r\n    };\r\n    Object.keys(jsonData.cubeMaps).forEach(cubeMapName => {\r\n        const cubeMap = jsonData.cubeMaps[cubeMapName];\r\n        if (cubeMap.urls.length > 1) {\r\n            ibl.useLod = true;\r\n        }\r\n        ibl.cubeMaps[cubeMapName] = makeCubeMapTexture(imageMap)(cubeMapName)(jsonData.cubeMaps[cubeMapName]);\r\n    });\r\n    return Object.assign({}, data, { extensions: Object.assign({}, data.extensions, { ibl })\r\n    });\r\n};\r\nconst createScene = (gltf) => (originalScene) => (scene) => {\r\n    const config = getIblConfig(gltf);\r\n    const settings = config ? config.settings : undefined;\r\n    if (!settings) {\r\n        return scene;\r\n    }\r\n    return Object.assign({}, scene, { extensions: Object.assign({}, scene.extensions, { ibl: settings })\r\n    });\r\n};\r\nconst createNode = (gltf) => (originalNode) => (node) => {\r\n    return node;\r\n};\r\nconst initialShaderConfig = ({ data, primitive }) => (shaderConfig) => data.extensions.ibl\r\n    ? Object.assign({}, shaderConfig, { extensions: Object.assign({}, shaderConfig.extensions, {\r\n            ibl: {\r\n                useLod: data.extensions.ibl.useLod\r\n            }\r\n        })\r\n    })\r\n    : shaderConfig;\r\nconst runtimeShaderConfig = ({ data, scene, primitive }) => (shaderConfig) => shaderConfig;\r\nconst shaderSource = ({ data, primitive }) => (source) => {\r\n    if (data.extensions.ibl) {\r\n        const defines = [];\r\n        defines.push(\"USE_IBL\");\r\n        if (data.extensions.ibl.useLod) {\r\n            defines.push(\"USE_TEX_LOD\");\r\n        }\r\n        const defineString = defines.map(value => `#define ${value} 1\\n`).join('');\r\n        return Object.assign({}, source, {\r\n            vertex: defineString + source.vertex,\r\n            fragment: defineString + source.fragment\r\n        });\r\n    }\r\n    return source;\r\n};\r\nconst GLTF_PARSE_Extension_Ibl = {\r\n    loadAssets,\r\n    createData,\r\n    createScene,\r\n    createNode,\r\n    initialShaderConfig,\r\n    runtimeShaderConfig,\r\n    shaderSource\r\n};\n\n/* Note - lights are different than other extensions since\r\n * they are passed around really as part of the scene, for the sake of convenience (rather than scene.extensions for ambient, or hunting for nodes with extensions.light - lights are first-class citizens\r\n * For this reason, it is possible to \"trick\" the shader config by specifying the scene data directly rather than auto-loading it via KHR_Lights, though that typically wouldn't be used\r\n */\r\nconst getConfig = (gltf) => {\r\n    if (gltf.extensionsUsed && gltf.extensionsUsed.indexOf(GltfLightsExtensionName) !== -1) {\r\n        return gltf.extensions[GltfLightsExtensionName].lights;\r\n    }\r\n    return null;\r\n};\r\nconst getLight = (originalLight) => {\r\n    const kindMap = {\r\n        ambient: LightKind.Ambient,\r\n        directional: LightKind.Directional,\r\n        point: LightKind.Point,\r\n        spot: LightKind.Spot\r\n    };\r\n    const light = {\r\n        kind: kindMap[originalLight.type],\r\n        color: originalLight.color\r\n            ? Float64Array.from(originalLight.color)\r\n            : Float64Array.from([1.0, 1.0, 1.0]),\r\n        intensity: originalLight.intensity !== undefined\r\n            ? originalLight.intensity\r\n            : 1.0\r\n    };\r\n    if (light.kind === LightKind.Spot) {\r\n        light.innerConeAngle = originalLight.spot && originalLight.spot.innerConeAngle !== undefined\r\n            ? originalLight.spot.innerConeAngle\r\n            : 0;\r\n        light.outerConeAngle = originalLight.spot && originalLight.spot.outerConeAngle !== undefined\r\n            ? originalLight.spot.outerConeAngle\r\n            : Math.PI / 4;\r\n    }\r\n    return light;\r\n};\r\nconst loadAssets$1 = ({ gltf, coreData }) => Future.of(coreData);\r\nconst createData$1 = ({ gltf, assets, renderer }) => (data) => data;\r\nconst createScene$1 = (gltf) => (originalScene) => (scene) => {\r\n    const config = getConfig(gltf);\r\n    const sceneConfig = originalScene.extensions && originalScene.extensions.hasOwnProperty(GltfLightsExtensionName)\r\n        ? originalScene.extensions[GltfLightsExtensionName]\r\n        : undefined;\r\n    if (!config || !sceneConfig) {\r\n        return scene;\r\n    }\r\n    const light = getLight(config[sceneConfig.light]);\r\n    if (light.kind !== LightKind.Ambient) {\r\n        throw new Error(\"scene light is not ambient\");\r\n    }\r\n    return Object.assign({}, scene, { light });\r\n};\r\nconst createNode$1 = (gltf) => (originalNode) => (node) => {\r\n    const config = getConfig(gltf);\r\n    const nodeConfig = originalNode.extensions && originalNode.extensions.hasOwnProperty(GltfLightsExtensionName)\r\n        ? originalNode.extensions[GltfLightsExtensionName]\r\n        : undefined;\r\n    if (!config || !nodeConfig) {\r\n        return node;\r\n    }\r\n    const light = getLight(config[nodeConfig.light]);\r\n    if (node.kind) {\r\n        throw new Error(\"node cannot be both a light and some other kind...\");\r\n    }\r\n    return Object.assign({}, node, {\r\n        kind: NodeKind.LIGHT,\r\n        light\r\n    });\r\n};\r\nconst initialShaderConfig$1 = ({ data, primitive }) => (shaderConfig) => {\r\n    return shaderConfig;\r\n};\r\nconst runtimeShaderConfig$1 = ({ data, scene, primitive }) => (shaderConfig) => {\r\n    let nPointLights = 0;\r\n    let nDirectionalLights = 0;\r\n    let nSpotLights = 0;\r\n    let hasAmbient = scene.light ? true : false;\r\n    scene.nodes.forEach(node => {\r\n        if (node.kind === NodeKind.LIGHT) {\r\n            switch (node.light.kind) {\r\n                case LightKind.Ambient:\r\n                    hasAmbient = true;\r\n                    break;\r\n                case LightKind.Directional:\r\n                    nDirectionalLights++;\r\n                    break;\r\n                case LightKind.Point:\r\n                    nPointLights++;\r\n                    break;\r\n                case LightKind.Spot:\r\n                    nSpotLights++;\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n    const config = {\r\n        nPointLights,\r\n        nDirectionalLights,\r\n        nSpotLights,\r\n        hasAmbient\r\n    };\r\n    return Object.assign({}, shaderConfig, {\r\n        extensions: Object.assign({}, shaderConfig.extensions, {\r\n            lights: config\r\n        })\r\n    });\r\n};\r\nconst getDynamicVertexShader = (primitive) => (vs) => {\r\n    let LIGHTS_VARS = '';\r\n    let LIGHTS_FUNCS = '';\r\n    return vs.replace(\"%KHR_LIGHTS_VARS%\", LIGHTS_VARS).replace(\"%KHR_LIGHTS_FUNCS%\", LIGHTS_FUNCS);\r\n};\r\nconst getDynamicFragmentShader = (primitive) => (fs) => {\r\n    let LIGHTS_VARS = '';\r\n    let LIGHTS_FUNCS = '';\r\n    if (primitive.shaderConfig.extensions.lights.nDirectionalLights) ;\r\n    return fs.replace(\"%KHR_LIGHTS_VARS%\", LIGHTS_VARS).replace(\"%KHR_LIGHTS_FUNCS%\", LIGHTS_FUNCS);\r\n};\r\nconst shaderSource$1 = ({ data, primitive }) => (source) => {\r\n    if (primitive.shaderConfig.extensions.lights) {\r\n        const defines = [];\r\n        const { hasAmbient, nPointLights, nDirectionalLights, nSpotLights } = primitive.shaderConfig.extensions.lights;\r\n        if (nPointLights > 10 || nDirectionalLights > 10 || nSpotLights > 10) {\r\n            console.warn(\"Only 10 lights of each kind are supported\");\r\n        }\r\n        if (!hasAmbient && !nPointLights && !nDirectionalLights && !nSpotLights) {\r\n            return source;\r\n        }\r\n        defines.push(\"USE_KHR_LIGHTS\");\r\n        if (hasAmbient) {\r\n            defines.push(\"KHR_LIGHTS_AMBIENT\");\r\n        }\r\n        const defineString = defines.map(value => `#define ${value} 1\\n`).join('');\r\n        return Object.assign({}, source, {\r\n            vertex: getDynamicVertexShader(primitive)(defineString + source.vertex),\r\n            fragment: getDynamicFragmentShader(primitive)(defineString + source.fragment)\r\n        });\r\n    }\r\n    else {\r\n        return source;\r\n    }\r\n};\r\nconst GLTF_PARSE_Extension_Lights = {\r\n    loadAssets: loadAssets$1,\r\n    createData: createData$1,\r\n    createScene: createScene$1,\r\n    createNode: createNode$1,\r\n    initialShaderConfig: initialShaderConfig$1,\r\n    runtimeShaderConfig: runtimeShaderConfig$1,\r\n    shaderSource: shaderSource$1\r\n};\n\nconst GltfExtensions = [\r\n    GLTF_PARSE_Extension_Ibl,\r\n    GLTF_PARSE_Extension_Lights\r\n];\n\n//Pure data loaders\r\nconst loadBuffers = ({ basePath, gltf, glbBuffers }) => parallel(Infinity, gltf.buffers.map((buffer, bufferIndex) => glbBuffers !== undefined && bufferIndex < glbBuffers.length\r\n    ? Future.of(glbBuffers[bufferIndex].slice(0, buffer.byteLength))\r\n    : buffer.uri.indexOf(\"data:\") === 0\r\n        ? fetchArrayBufferUrl(buffer.uri)\r\n        : fetchArrayBufferUrl(basePath + buffer.uri)));\r\nconst loadImages = ({ basePath, gltf, buffers }) => {\r\n    const getImageBufferData = (bufferViewId) => {\r\n        const bufferView = gltf.bufferViews[bufferViewId];\r\n        const bufferId = bufferView.buffer;\r\n        const offset = bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset;\r\n        return buffers[bufferId].slice(offset, offset + bufferView.byteLength);\r\n    };\r\n    //load texture data\r\n    return parallel(Infinity, !gltf.images || !gltf.images.length\r\n        ? []\r\n        : gltf.images.map(image => image.bufferView !== undefined\r\n            ? loadImageFromArrayBuffer({ data: getImageBufferData(image.bufferView), mimeType: image.mimeType })\r\n            : image.uri.indexOf(\"data:\") === 0\r\n                ? fetchImage(image.uri) //untested\r\n                : fetchImage(basePath + image.uri)));\r\n};\r\n//Tools for processing and loading data\r\nconst GLTF_PARSE_LoadDataAssets = ({ basePath, gltf, glbBuffers }) => GltfExtensions\r\n    .map(ext => ext.loadAssets)\r\n    .reduce((acc, fn) => (acc = acc.chain(coreData => fn({ gltf, coreData })), acc), loadBuffers({ basePath, gltf, glbBuffers })\r\n    .chain((buffers) => loadImages({ basePath, gltf, buffers })\r\n    .map(imageElements => ({\r\n    buffers, imageElements, extensions: {}\r\n}))));\r\nconst GLTF_PARSE_CreateData = ({ gltf, assets, renderer, config }) => {\r\n    prepWebGlRenderer(renderer);\r\n    const { imageElements, buffers } = assets;\r\n    const textures = GLTF_PARSE_createTextures({ renderer, gltf, imageElements });\r\n    const attributes = GLTF_PARSE_createAttributes({ gltf, buffers, renderer });\r\n    const animations = GLTF_PARSE_createAnimations({ gltf, buffers });\r\n    const shaders = new Map();\r\n    return GltfExtensions\r\n        .map(ext => ext.createData)\r\n        .reduce((acc, val) => (acc = val({ gltf, assets, renderer })(acc), acc), {\r\n        original: gltf,\r\n        animations,\r\n        attributes,\r\n        textures,\r\n        shaders,\r\n        initConfig: config,\r\n        extensions: {}\r\n    });\r\n};\n\n//https://stackoverflow.com/a/41798356/784519\r\nconst utf8ArrayToStr = (function () {\r\n    var charCache = new Array(128); // Preallocate the cache for the common single byte chars\r\n    var charFromCodePt = String.fromCodePoint || String.fromCharCode;\r\n    var result = [];\r\n    return function (array) {\r\n        var codePt, byte1;\r\n        var buffLen = array.length;\r\n        result.length = 0;\r\n        for (var i = 0; i < buffLen;) {\r\n            byte1 = array[i++];\r\n            if (byte1 <= 0x7F) {\r\n                codePt = byte1;\r\n            }\r\n            else if (byte1 <= 0xDF) {\r\n                codePt = ((byte1 & 0x1F) << 6) | (array[i++] & 0x3F);\r\n            }\r\n            else if (byte1 <= 0xEF) {\r\n                codePt = ((byte1 & 0x0F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);\r\n            }\r\n            else if (String.fromCodePoint) {\r\n                codePt = ((byte1 & 0x07) << 18) | ((array[i++] & 0x3F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);\r\n            }\r\n            else {\r\n                codePt = 63; // Cannot convert four byte code points, so use \"?\" instead\r\n                i += 3;\r\n            }\r\n            result.push(charCache[codePt] || (charCache[codePt] = charFromCodePt(codePt)));\r\n        }\r\n        return result.join('');\r\n    };\r\n})();\r\nconst getJsonFromArrayBuffer = (aBuffer) => {\r\n    const bytes = new Uint8Array(aBuffer);\r\n    const str = window[\"TextDecoder\"]\r\n        ? new TextDecoder('utf-8').decode(bytes)\r\n        : utf8ArrayToStr(bytes);\r\n    //console.log(str);\r\n    return JSON.parse(str);\r\n};\n\nconst getHeader = (aBuffer) => {\r\n    const dv = new DataView(aBuffer, 0, 12);\r\n    return {\r\n        magic: dv.getUint32(0, true),\r\n        version: dv.getUint32(4, true),\r\n        length: dv.getUint32(8, true)\r\n    };\r\n};\r\nconst getChunk = (offset) => (aBuffer) => {\r\n    const dv = new DataView(aBuffer, offset, 8);\r\n    const chunkLength = dv.getUint32(0, true);\r\n    const chunkType = dv.getUint32(4, true);\r\n    const chunkStart = offset + 8;\r\n    const chunkEnd = chunkStart + chunkLength;\r\n    const chunkData = aBuffer.slice(chunkStart, chunkEnd);\r\n    const result = [\r\n        (chunkType === 0x4E4F534A)\r\n            ? getJsonFromArrayBuffer(chunkData)\r\n            : (chunkType === 0x004E4942)\r\n                ? chunkData\r\n                : null,\r\n        chunkEnd\r\n    ];\r\n    if (result[0] === null) {\r\n        console.log(`unknown chunk type: ${chunkType}`);\r\n    }\r\n    return result;\r\n};\r\nconst asGlb = (aBuffer) => {\r\n    const [gltf, gltfEndOffset] = getChunk(12)(aBuffer);\r\n    const buffers = new Array();\r\n    let offset = gltfEndOffset;\r\n    while (offset < aBuffer.byteLength) {\r\n        const [bin, endOffset] = getChunk(offset)(aBuffer);\r\n        if (bin !== null) {\r\n            buffers.push(bin);\r\n        }\r\n        offset += endOffset;\r\n    }\r\n    return { gltf, glbBuffers: buffers };\r\n};\r\nconst GLTF_PARSE_isBinaryFile = (aBuffer) => getHeader(aBuffer).magic === 0x46546C67;\r\nconst GLTF_PARSE_getOriginalFromArrayBuffer = (aBuffer) => GLTF_PARSE_isBinaryFile(aBuffer)\r\n    ? asGlb(aBuffer)\r\n    : { gltf: getJsonFromArrayBuffer(aBuffer), glbBuffers: [] };\n\nlet _vaoIdCounter = 0;\r\nconst attributeShaderNameLookup = {\r\n    \"POSITION\": \"a_Position\",\r\n    \"NORMAL\": \"a_Normal\",\r\n    \"TANGENT\": \"a_Tangent\",\r\n    \"TEXCOORD_0\": \"a_UV\",\r\n    \"COLOR_0\": \"a_Color\",\r\n    \"JOINTS_0\": \"a_Skin_Joint\",\r\n    \"WEIGHTS_0\": \"a_Skin_Weight\"\r\n};\r\n//Sorting the attributes is important so that the dynamic shader\r\n//matches the correct location for each morph (e.g. morph_1 is position and location x, etc.)\r\nconst GLTF_PARSE_sortPrimitiveAttributeKeys = (keys) => keys.sort((a, b) => {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    const ORDER = [\"POSITION\", \"NORMAL\", \"TANGENT\", \"TEXCOOR_0\", \"COLOR_0\", \"JOINTS_0\", \"WEIGHTS_0\"];\r\n    const oa = ORDER.indexOf(a);\r\n    const ob = ORDER.indexOf(b);\r\n    return oa < ob ? -1 : oa > ob ? 1 : 0;\r\n});\r\nconst GLTF_PARSE_primitiveHasAttribute = (attributeName) => (originalPrimitive) => Object.keys(originalPrimitive.attributes).indexOf(attributeName) !== -1;\r\nconst GLTF_PARSE_getPrimitiveAttributeKeys = (originalPrimitive) => GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(originalPrimitive.attributes));\r\nconst GLTF_PARSE_createPrimitiveAttributes = ({ renderer, originalPrimitive, data }) => {\r\n    const vao = { data: [] };\r\n    const accessorLookup = data.attributes.accessorLookup;\r\n    if (originalPrimitive.indices !== undefined) {\r\n        vao.elementBufferId = accessorLookup.get(originalPrimitive.indices).rendererBufferId;\r\n    }\r\n    const attributeKeys = GLTF_PARSE_getPrimitiveAttributeKeys(originalPrimitive);\r\n    attributeKeys.forEach((attributeKey) => {\r\n        const accessorId = originalPrimitive.attributes[attributeKey];\r\n        const attributeName = attributeShaderNameLookup[attributeKey];\r\n        if (!accessorLookup.has(accessorId)) {\r\n            throw new Error(\"bug here!\");\r\n        }\r\n        vao.data.push(Object.assign({ location: renderer.attributes.getLocationInRenderer(attributeName), bufferId: accessorLookup.get(accessorId).rendererBufferId }, accessorLookup.get(accessorId).strategy));\r\n    });\r\n    const { targets } = originalPrimitive;\r\n    if (targets) {\r\n        let morphIndex = 0;\r\n        targets.forEach(target => {\r\n            GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(target)).forEach(attributeKey => {\r\n                const accessorId = target[attributeKey];\r\n                const aMorph = `a_Morph_${morphIndex++}`;\r\n                //console.log(aMorph,  data.accessors.get(accessorId).strategy.offset);\r\n                vao.data.push(Object.assign({ location: renderer.attributes.getLocationInRenderer(aMorph), bufferId: accessorLookup.get(accessorId).rendererBufferId }, accessorLookup.get(accessorId).strategy));\r\n            });\r\n        });\r\n    }\r\n    //vao.data.forEach(({attributeName}) => console.log(attributeName, shader.attributes.getLocation(attributeName)));\r\n    const vaoId = _vaoIdCounter++;\r\n    const sym = Symbol();\r\n    data.attributes.vaoIdLookup.set(vaoId, sym);\r\n    renderer.vertexArrays.assign(sym)(vao);\r\n    return vaoId;\r\n};\n\nconst GLTF_PARSE_getPrimitiveDrawing = ({ originalPrimitive, data }) => {\r\n    const _primitive = {\r\n        drawKind: (originalPrimitive.indices !== undefined) ? GltfPrimitiveDrawKind.ELEMENTS : GltfPrimitiveDrawKind.ARRAY,\r\n        drawMode: originalPrimitive.mode ? originalPrimitive.mode : WebGlConstants.TRIANGLES\r\n    };\r\n    if (_primitive.drawKind === GltfPrimitiveDrawKind.ELEMENTS) {\r\n        _primitive.elementsId = originalPrimitive.indices;\r\n    }\r\n    else {\r\n        const attributeKeys = GLTF_PARSE_getPrimitiveAttributeKeys(originalPrimitive);\r\n        _primitive.arrayCount = data.original.accessors[originalPrimitive.attributes[attributeKeys[0]]].count;\r\n    }\r\n    return _primitive;\r\n};\n\nconst GLTF_PARSE_createMaterialForPrimitive = ({ gltf, materialId, data }) => {\r\n    const _m = gltf.materials[materialId];\r\n    const material = {};\r\n    material.metallicRoughnessValues = Float64Array.from([1.0, 1.0]);\r\n    material.baseColorFactor = Float64Array.from([1.0, 1.0, 1.0, 1.0]);\r\n    if (_m.pbrMetallicRoughness) {\r\n        if (_m.pbrMetallicRoughness.metallicFactor !== undefined) {\r\n            material.metallicRoughnessValues[0] = _m.pbrMetallicRoughness.metallicFactor;\r\n        }\r\n        if (_m.pbrMetallicRoughness.roughnessFactor !== undefined) {\r\n            material.metallicRoughnessValues[1] = _m.pbrMetallicRoughness.roughnessFactor;\r\n        }\r\n        if (_m.pbrMetallicRoughness.baseColorFactor !== undefined) {\r\n            material.baseColorFactor = Float64Array.from(_m.pbrMetallicRoughness.baseColorFactor);\r\n        }\r\n        if (_m.pbrMetallicRoughness.baseColorTexture !== undefined) {\r\n            material.baseColorSamplerIndex = _m.pbrMetallicRoughness.baseColorTexture.index;\r\n        }\r\n        if (_m.pbrMetallicRoughness.metallicRoughnessTexture !== undefined) {\r\n            material.metallicRoughnessSamplerIndex = _m.pbrMetallicRoughness.metallicRoughnessTexture.index;\r\n        }\r\n    }\r\n    if (_m.normalTexture !== undefined) {\r\n        const scale = _m.normalTexture.scale !== undefined ? _m.normalTexture.scale : 1.0;\r\n        material.normal = {\r\n            scale,\r\n            samplerIndex: _m.normalTexture.index\r\n        };\r\n    }\r\n    if (_m.occlusionTexture !== undefined) {\r\n        const strength = _m.occlusionTexture.strength !== undefined ? _m.occlusionTexture.strength : 1.0;\r\n        material.occlusion = {\r\n            strength,\r\n            samplerIndex: _m.occlusionTexture.index\r\n        };\r\n    }\r\n    if (_m.emissiveTexture !== undefined) {\r\n        material.emissiveSamplerIndex = _m.emissiveTexture.index;\r\n    }\r\n    if (_m.emissiveFactor !== undefined) {\r\n        material.emissiveFactor = Float64Array.from(_m.emissiveFactor);\r\n    }\r\n    if (_m.alphaMode) {\r\n        switch (_m.alphaMode) {\r\n            case \"BLEND\":\r\n                material.alphaMode = GltfMaterialAlphaMode.BLEND;\r\n                break;\r\n            case \"MASK\":\r\n                material.alphaMode = GltfMaterialAlphaMode.MASK;\r\n                break;\r\n            default:\r\n                material.alphaMode = GltfMaterialAlphaMode.OPAQUE;\r\n                break;\r\n        }\r\n    }\r\n    material.doubleSided = _m.doubleSided ? true : false;\r\n    material.alphaCutoff = _m.alphaCutoff === undefined ? .5 : _m.alphaCutoff;\r\n    return material;\r\n};\n\nvar UNIFORM_TYPE;\r\n(function (UNIFORM_TYPE) {\r\n    UNIFORM_TYPE[UNIFORM_TYPE[\"FLOAT\"] = 0] = \"FLOAT\";\r\n    UNIFORM_TYPE[UNIFORM_TYPE[\"INT\"] = 1] = \"INT\";\r\n})(UNIFORM_TYPE || (UNIFORM_TYPE = {}));\r\nconst createUniforms = ({ renderer, activateShader }) => {\r\n    const { gl } = renderer;\r\n    const cache = {\r\n        uniformLocations: new Map(),\r\n        uniformValues: new Map(),\r\n        uniformSingleValues: new Map(),\r\n        uniformMatrixTranspose: new Map()\r\n    };\r\n    const getLocation = (uName) => {\r\n        const { program } = activateShader();\r\n        if (!cache.uniformLocations.has(uName)) {\r\n            cache.uniformLocations.set(uName, gl.getUniformLocation(program, uName));\r\n        }\r\n        return cache.uniformLocations.get(uName);\r\n    };\r\n    const validLocation = (loc) => (loc !== null && loc !== undefined && loc != -1);\r\n    const hasLocation = (uName) => validLocation(getLocation(uName));\r\n    const _isEqual = (uName) => (values) => {\r\n        if (!cache.uniformValues.has(uName)) {\r\n            return false;\r\n        }\r\n        const xs = cache.uniformValues.get(uName);\r\n        if (xs.length !== values.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < xs.length; i++) {\r\n            if (xs[i] !== values[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    const _assignCacheValues = (uType) => (uName) => (values) => {\r\n        //Must make a copy each time for two reasons:\r\n        //1. Otherwise it could be referencing the same object in subsequent calls\r\n        //2. Normalizing to 32-bit values\r\n        //However - the cache is local only, so it's only allocating the first time (subsequent is just writing to mutable space)\r\n        if (!cache.uniformValues.has(uName)) {\r\n            switch (uType) {\r\n                case UNIFORM_TYPE.FLOAT:\r\n                    cache.uniformValues.set(uName, new Float32Array(values.length));\r\n                    break;\r\n                case UNIFORM_TYPE.INT:\r\n                    cache.uniformValues.set(uName, new Int32Array(values.length));\r\n                    break;\r\n            }\r\n            return;\r\n        }\r\n        const target = cache.uniformValues.get(uName);\r\n        for (let idx = 0; idx < values.length; idx++) {\r\n            target[idx] = values[idx];\r\n        }\r\n    };\r\n    const _setSingleValue = (setterFn) => (uName) => (value) => {\r\n        if (!cache.uniformSingleValues.has(uName) || cache.uniformSingleValues.get(uName) !== value) {\r\n            cache.uniformSingleValues.set(uName, value);\r\n            const loc = getLocation(uName);\r\n            if (validLocation(loc)) {\r\n                setterFn(loc)(value); //for single values it doesn't get converted\r\n            }\r\n        }\r\n    };\r\n    const _setValues = (uType) => (setterFn) => (uName) => (values) => {\r\n        if (!_isEqual(uName)(values)) {\r\n            _assignCacheValues(uType)(uName)(values);\r\n            const loc = getLocation(uName);\r\n            if (validLocation(loc)) {\r\n                setterFn(loc)(cache.uniformValues.get(uName)); //for arrays it needs to be grabbed from cache which set the appropriate type\r\n            }\r\n        }\r\n    };\r\n    const _setMatrixValues = (uType) => (setterFn) => (uName) => (transpose) => (values) => {\r\n        if (!cache.uniformMatrixTranspose.has(uName) || cache.uniformMatrixTranspose.get(uName) !== transpose || !_isEqual(uName)(values)) {\r\n            _assignCacheValues(uType)(uName)(values);\r\n            cache.uniformMatrixTranspose.set(uName, transpose);\r\n            const loc = getLocation(uName);\r\n            if (validLocation(loc)) {\r\n                setterFn(loc)(transpose)(cache.uniformValues.get(uName));\r\n            }\r\n        }\r\n    };\r\n    const setters = {\r\n        uniform1f: _setSingleValue(loc => v => gl.uniform1f(loc, v)),\r\n        uniform1fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform1fv(loc, v)),\r\n        uniform1i: _setSingleValue(loc => v => gl.uniform1i(loc, v)),\r\n        uniform1iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform1iv(loc, v)),\r\n        uniform2f: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform2f(loc, v[0], v[1])),\r\n        uniform2fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform2fv(loc, v)),\r\n        uniform2i: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform2i(loc, v[0], v[1])),\r\n        uniform2iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform2iv(loc, v)),\r\n        uniform3f: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform3f(loc, v[0], v[1], v[2])),\r\n        uniform3fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform3fv(loc, v)),\r\n        uniform3i: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform3i(loc, v[0], v[1], v[2])),\r\n        uniform3iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform3iv(loc, v)),\r\n        uniform4f: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform4f(loc, v[0], v[1], v[2], v[3])),\r\n        uniform4fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform4fv(loc, v)),\r\n        uniform4i: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform4i(loc, v[0], v[1], v[2], v[3])),\r\n        uniform4iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform4iv(loc, v)),\r\n        uniformMatrix2fv: _setMatrixValues(UNIFORM_TYPE.FLOAT)(loc => t => v => gl.uniformMatrix2fv(loc, t, v)),\r\n        uniformMatrix3fv: _setMatrixValues(UNIFORM_TYPE.FLOAT)(loc => t => v => gl.uniformMatrix3fv(loc, t, v)),\r\n        uniformMatrix4fv: _setMatrixValues(UNIFORM_TYPE.FLOAT)(loc => t => v => gl.uniformMatrix4fv(loc, t, v)),\r\n    };\r\n    return {\r\n        cache,\r\n        setters,\r\n        getLocation,\r\n        validLocation,\r\n        hasLocation\r\n    };\r\n};\n\n//the \"any\" here is actually WebGlShader but defining it as such would cause a circular reference\r\nlet current;\r\nconst shaders = new Map();\r\nconst _compileShader = ({ renderer, source }) => {\r\n    let vShader;\r\n    let fShader;\r\n    const { gl } = renderer;\r\n    const program = gl.createProgram();\r\n    const dispose = () => {\r\n        if (vShader !== undefined && (vShader instanceof WebGLShader)) {\r\n            gl.deleteShader(vShader);\r\n        }\r\n        if (fShader !== undefined && (fShader instanceof WebGLShader)) {\r\n            gl.deleteShader(fShader);\r\n        }\r\n        gl.deleteProgram(program);\r\n    };\r\n    const getShaderName = (shaderType) => shaderType === gl.VERTEX_SHADER ? \"vertex\" : \"fragment\";\r\n    const loadShader = (shaderType) => (sourceText) => {\r\n        const shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, sourceText);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            const errorMessage = `${getShaderName(shaderType)} error: ` + gl.getShaderInfoLog(shader);\r\n            throw new Error(errorMessage); //this _should_ be an exception\r\n        }\r\n        gl.attachShader(program, shader);\r\n        return shader;\r\n    };\r\n    vShader = loadShader(gl.VERTEX_SHADER)(source.vertex);\r\n    if (vShader instanceof Error) {\r\n        dispose();\r\n        return vShader;\r\n    }\r\n    fShader = loadShader(gl.FRAGMENT_SHADER)(source.fragment);\r\n    if (fShader instanceof Error) {\r\n        dispose();\r\n        return fShader;\r\n    }\r\n    let location = 0;\r\n    renderer.attributes.globalLocations.forEach(aName => {\r\n        gl.bindAttribLocation(program, location, aName);\r\n        location++;\r\n    });\r\n    gl.linkProgram(program);\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        dispose();\r\n        return new Error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(program));\r\n    }\r\n    return program;\r\n};\r\nconst _activateShader = (shaderId) => {\r\n    if (!current || current.shaderId !== shaderId) {\r\n        current = shaders.get(shaderId);\r\n        current.gl.useProgram(current.program);\r\n    }\r\n    return current;\r\n};\r\nconst activateShader = (shaderId) => _activateShader(shaderId);\r\nconst createShader = ({ renderer, shaderId, source }) => {\r\n    const program = _compileShader({ source, renderer });\r\n    const shader = {\r\n        gl: renderer.gl,\r\n        shaderId,\r\n        program,\r\n        uniforms: createUniforms({ renderer, activateShader: () => _activateShader(shaderId) }),\r\n    };\r\n    shaders.set(shaderId, shader);\r\n    return shader;\r\n};\n\n//TODO - speed has been optimized but need to test thoroughly for correctness (was roughly tested)\r\n//https://stackoverflow.com/questions/17398578/hash-algorithm-for-variable-size-boolean-array?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\r\nconst baseArray = new Uint8Array(19);\r\nconst morphsArray = new Uint8Array(30);\r\nconst skinArray = new Uint8Array(30);\r\nconst lightsArray = new Uint8Array(30);\r\nconst hashBooleans32 = (xs) => {\r\n    let h = (1 << xs.length);\r\n    for (let i = 0; i < xs.length; i++) {\r\n        h = h | ((xs[i]) << (xs.length - i - 1));\r\n    }\r\n    return h;\r\n};\r\nconst getShaderHash = (config) => {\r\n    if (config.hasNormalAttributes) {\r\n        baseArray[0] = 1;\r\n    }\r\n    if (config.hasTangentAttributes) {\r\n        baseArray[1] = 1;\r\n    }\r\n    if (config.hasUvAttributes) {\r\n        baseArray[2] = 1;\r\n    }\r\n    if (config.hasColorAttributes) {\r\n        baseArray[3] = 1;\r\n    }\r\n    if (config.hasBaseColorMap) {\r\n        baseArray[4] = 1;\r\n    }\r\n    if (config.hasNormalMap) {\r\n        baseArray[5] = 1;\r\n    }\r\n    if (config.hasEmissiveMap) {\r\n        baseArray[6] = 1;\r\n    }\r\n    if (config.hasMetalRoughnessMap) {\r\n        baseArray[7] = 1;\r\n    }\r\n    if (config.hasOcclusionMap) {\r\n        baseArray[8] = 1;\r\n    }\r\n    if (config.manualSRGB) {\r\n        baseArray[9] = 1;\r\n    }\r\n    if (config.fastSRGB) {\r\n        baseArray[10] = 1;\r\n    }\r\n    if (config.extensions.ibl) {\r\n        baseArray[11] = 1;\r\n        if (config.extensions.ibl.useLod) {\r\n            baseArray[12] = 1;\r\n        }\r\n    }\r\n    if (config.extensions.unlit) {\r\n        baseArray[13] = 1;\r\n    }\r\n    baseArray[14] = config.alphaMode === GltfMaterialAlphaMode.BLEND ? 0 : 1;\r\n    baseArray[15] = config.alphaMode === GltfMaterialAlphaMode.MASK ? 0 : 1;\r\n    baseArray[16] = config.alphaMode === GltfMaterialAlphaMode.OPAQUE ? 0 : 1;\r\n    if (config.extensions.lights) {\r\n        baseArray[17] = 1;\r\n        if (config.extensions.lights.hasAmbient) {\r\n            baseArray[18] = 1;\r\n        }\r\n        //Light instances get their own array - 10 * 3 = 30 possibilities\r\n        for (let i = 0; i < config.extensions.lights.nDirectionalLights; i++) {\r\n            lightsArray[i] = 1;\r\n        }\r\n        for (let i = 0; i < config.extensions.lights.nPointLights; i++) {\r\n            lightsArray[10 + i] = 1;\r\n        }\r\n        for (let i = 0; i < config.extensions.lights.nSpotLights; i++) {\r\n            lightsArray[20 + i] = 1;\r\n        }\r\n    }\r\n    for (let i = 0; i < config.nPositionMorphs; i++) {\r\n    }\r\n    for (let i = 0; i < config.nNormalMorphs; i++) {\r\n    }\r\n    for (let i = 0; i < config.nTangentMorphs; i++) {\r\n    }\r\n    for (let i = 0; i < config.nMorphWeights; i++) {\r\n    }\r\n    for (let i = 0; i < config.nSkinJoints; i++) {\r\n        skinArray[i] = 1;\r\n    }\r\n    const shaderKey = hashBooleans32(baseArray).toString();\r\n    \"-\" + hashBooleans32(morphsArray).toString()\r\n        + \"-\" + hashBooleans32(skinArray).toString()\r\n        + \"-\" + hashBooleans32(lightsArray).toString();\r\n    return shaderKey;\r\n};\r\n/*\r\nconst _lookup = new Map();\r\nconst FINAL = Symbol();\r\n\nexport const getShaderSymbol = (config:GltfShaderConfig):Symbol => {\r\n\n    let lookup = _lookup;\r\n\n    const setLookup = key => {\r\n        if(!lookup.has(key)) {\r\n            lookup.set(key, new Map());\r\n        }\r\n\n        lookup = lookup.get(key);\r\n    }\r\n    \n\n    setLookup(config.hasNormalAttributes);\r\n    setLookup(config.hasTangentAttributes);\r\n    setLookup(config.hasUvAttributes);\r\n    setLookup(config.hasColorAttributes);\r\n    setLookup(config.hasBaseColorMap);\r\n    setLookup(config.hasNormalMap);\r\n    setLookup(config.hasEmissiveMap);\r\n    setLookup(config.hasMetalRoughnessMap);\r\n    setLookup(config.hasOcclusionMap);\r\n    setLookup(config.manualSRGB);\r\n    setLookup(config.fastSRGB);\r\n    if(config.extensions.ibl) {\r\n        setLookup(true);\r\n        setLookup(config.extensions.ibl.useLod);\r\n    } else {\r\n        setLookup(false);\r\n    }\r\n\n    setLookup(config.extensions.unlit ? true : false);\r\n\n    if(config.extensions.lights) {\r\n        setLookup(true);\r\n\n        setLookup(config.extensions.lights.hasAmbient);\r\n        setLookup(config.extensions.lights.nDirectionalLights);\r\n        setLookup(config.extensions.lights.nPointLights);\r\n        setLookup(config.extensions.lights.nSpotLights);\r\n    } else {\r\n        setLookup(false);\r\n    }\r\n\n    setLookup(config.nPositionMorphs);\r\n    setLookup(config.nNormalMorphs);\r\n    setLookup(config.nTangentMorphs);\r\n    setLookup(config.nMorphWeights);\r\n    setLookup(config.nSkinJoints);\r\n   \n    if(!lookup.has(FINAL)) {\r\n        lookup.set(FINAL, Symbol());\r\n    }\r\n\n    return lookup.get(FINAL);\r\n\n}\r\n*/\n\nvar vertexShaderSource = \"precision highp float;\\nprecision highp int;\\n\\n%MORPH_VARS%\\n\\n#ifdef HAS_SKIN\\nattribute vec4 a_Skin_Joint;\\nattribute vec4 a_Skin_Weight;\\nuniform mat4 u_Skin_Matrices[%SKIN_JOINT_COUNT%];\\n#endif\\n\\n#ifdef USE_KHR_LIGHTS\\n%KHR_LIGHTS_VARS%\\n#endif\\n\\nattribute vec4 a_Position;\\n#ifdef HAS_NORMALS\\nattribute vec4 a_Normal;\\n#endif\\n#ifdef HAS_TANGENTS\\nattribute vec4 a_Tangent;\\n#endif\\n#ifdef HAS_UV\\nattribute vec2 a_UV;\\n#endif\\n#ifdef HAS_COLOR\\nattribute vec4 a_Color;\\nvarying vec4 v_Color;\\n#endif\\n\\nuniform mat4 u_MVPMatrix;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_NormalMatrix;\\n\\nvarying vec3 v_Position;\\nvarying vec2 v_UV;\\n\\n#ifdef HAS_NORMALS\\n#ifdef HAS_TANGENTS\\nvarying mat3 v_TBN;\\n#else\\nvarying vec3 v_Normal;\\n#endif\\n#endif\\n\\n\\nvoid main()\\n{\\n\\n  \\n\\n  vec4 m_Position = a_Position;\\n  #ifdef HAS_NORMALS\\n    vec4 m_Normal = a_Normal;\\n  #endif\\n  #ifdef HAS_TANGENTS\\n    vec4 m_Tangent = a_Tangent;\\n  #endif\\n\\n#ifdef HAS_SKIN\\n    mat4 skinMat = a_Skin_Weight[0] * u_Skin_Matrices[int(a_Skin_Joint[0])]\\n        +   a_Skin_Weight[1] * u_Skin_Matrices[int(a_Skin_Joint[1])]\\n        +   a_Skin_Weight[2] * u_Skin_Matrices[int(a_Skin_Joint[2])]\\n        +   a_Skin_Weight[3] * u_Skin_Matrices[int(a_Skin_Joint[3])];\\n\\n    m_Position = skinMat * m_Position;\\n#endif\\n    %MORPH_FUNCS%\\n\\n    #ifdef USE_KHR_LIGHTS\\n    %KHR_LIGHTS_FUNCS%\\n    #endif\\n\\n  \\n  vec4 pos = u_ModelMatrix * m_Position;\\n  v_Position = vec3(pos.xyz) / pos.w;\\n\\n  #ifdef HAS_NORMALS\\n  #ifdef HAS_TANGENTS\\n  vec3 normalW = normalize(vec3(u_NormalMatrix * vec4(m_Normal.xyz, 0.0)));\\n  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(m_Tangent.xyz, 0.0)));\\n  vec3 bitangentW = cross(normalW, tangentW) * m_Tangent.w;\\n  v_TBN = mat3(tangentW, bitangentW, normalW);\\n  #else // HAS_TANGENTS != 1\\n  v_Normal = normalize(vec3(u_ModelMatrix * vec4(m_Normal.xyz, 0.0)));\\n  #endif\\n  #endif\\n\\n  #ifdef HAS_UV\\n  v_UV = a_UV;\\n  #else\\n  v_UV = vec2(0.,0.);\\n  #endif\\n\\n    #ifdef HAS_COLOR\\n    v_Color = a_Color;\\n    #endif\\n\\n\\n  gl_Position = u_MVPMatrix * m_Position; // needs w for proper perspective correction\\n}\\n\\n\";\n\nvar fragmentShaderSource = \"precision highp float;\\nprecision highp int;\\n\\n#ifdef USE_KHR_LIGHTS\\n    #ifdef KHR_LIGHTS_AMBIENT\\n        uniform float u_KhrLight_Ambient_Intensity;\\n        uniform vec3 u_KhrLight_Ambient_Color;\\n    #endif\\n%KHR_LIGHTS_VARS%\\n#endif\\n\\n//\\n// This fragment shader defines a reference implementation for Physically Based Shading of\\n// a microfacet surface material defined by a glTF model.\\n//\\n// References:\\n// [1] Real Shading in Unreal Engine 4\\n//     http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\\n// [2] Physically Based Shading at Disney\\n//     http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf\\n// [3] README.md - Environment Maps\\n//     https://github.com/KhronosGroup/glTF-WebGL-PBR/#environment-maps\\n// [4] \\\"An Inexpensive BRDF Model for Physically based Rendering\\\" by Christophe Schlick\\n//     https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf\\n#extension GL_EXT_shader_texture_lod: enable\\n#extension GL_OES_standard_derivatives : enable\\n\\nuniform vec3 u_LightDirection;\\nuniform vec3 u_LightColor;\\n\\n#ifdef USE_IBL\\nuniform samplerCube u_DiffuseEnvSampler;\\nuniform samplerCube u_SpecularEnvSampler;\\nuniform sampler2D u_brdfLUT;\\n#endif\\n\\n#ifdef HAS_BASECOLORMAP\\nuniform sampler2D u_BaseColorSampler;\\nuniform float u_AlphaCutoff; //PURE3D - Added\\n#endif\\n#ifdef HAS_NORMALMAP\\nuniform sampler2D u_NormalSampler;\\nuniform float u_NormalScale;\\n#endif\\n#ifdef HAS_EMISSIVEMAP\\nuniform sampler2D u_EmissiveSampler;\\nuniform vec3 u_EmissiveFactor;\\n#endif\\n#ifdef HAS_METALROUGHNESSMAP\\nuniform sampler2D u_MetallicRoughnessSampler;\\n#endif\\n#ifdef HAS_OCCLUSIONMAP\\nuniform sampler2D u_OcclusionSampler;\\nuniform float u_OcclusionStrength;\\n#endif\\n\\n#ifdef HAS_COLOR\\nvarying vec4 v_Color;\\n#endif\\n\\nuniform vec2 u_MetallicRoughnessValues;\\nuniform vec4 u_BaseColorFactor;\\n\\nuniform vec3 u_Camera;\\n\\n// debugging flags used for shader output of intermediate PBR variables\\nuniform vec4 u_ScaleDiffBaseMR;\\nuniform vec4 u_ScaleFGDSpec;\\nuniform vec4 u_ScaleIBLAmbient;\\n\\nvarying vec3 v_Position;\\n\\nvarying vec2 v_UV;\\n\\n#ifdef HAS_NORMALS\\n#ifdef HAS_TANGENTS\\nvarying mat3 v_TBN;\\n#else\\nvarying vec3 v_Normal;\\n#endif\\n#endif\\n\\n// Encapsulate the various inputs used by the various functions in the shading equation\\n// We store values in this struct to simplify the integration of alternative implementations\\n// of the shading terms, outlined in the Readme.MD Appendix.\\nstruct PBRInfo\\n{\\n    float NdotL;                  // cos angle between normal and light direction\\n    float NdotV;                  // cos angle between normal and view direction\\n    float NdotH;                  // cos angle between normal and half vector\\n    float LdotH;                  // cos angle between light direction and half vector\\n    float VdotH;                  // cos angle between view direction and half vector\\n    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\\n    float metalness;              // metallic value at the surface\\n    vec3 reflectance0;            // full reflectance color (normal incidence angle)\\n    vec3 reflectance90;           // reflectance color at grazing angle\\n    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\\n    vec3 diffuseColor;            // color contribution from diffuse lighting\\n    vec3 specularColor;           // color contribution from specular lighting\\n};\\n\\nconst float M_PI = 3.141592653589793;\\nconst float c_MinRoughness = 0.04;\\n\\nvec4 SRGBtoLINEAR(vec4 srgbIn)\\n{\\n    #ifdef MANUAL_SRGB\\n        #ifdef SRGB_FAST_APPROXIMATION\\n            vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\\n        #else //SRGB_FAST_APPROXIMATION\\n            vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\\n            vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\\n        #endif //SRGB_FAST_APPROXIMATION\\n        \\n        return vec4(linOut,srgbIn.w);\\n    #else //MANUAL_SRGB\\n        return srgbIn;\\n    #endif //MANUAL_SRGB\\n}\\n\\n\\n// Find the normal for this fragment, pulling either from a predefined normal map\\n// or from the interpolated mesh normal and tangent attributes.\\nvec3 getNormal()\\n{\\n    // Retrieve the tangent space matrix\\n#ifndef HAS_TANGENTS\\n    vec3 pos_dx = dFdx(v_Position);\\n    vec3 pos_dy = dFdy(v_Position);\\n    vec3 tex_dx = dFdx(vec3(v_UV, 0.0));\\n    vec3 tex_dy = dFdy(vec3(v_UV, 0.0));\\n    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\n\\n#ifdef HAS_NORMALS\\n    vec3 ng = normalize(v_Normal);\\n#else\\n    vec3 ng = cross(pos_dx, pos_dy);\\n#endif\\n\\n    t = normalize(t - ng * dot(ng, t));\\n    vec3 b = normalize(cross(ng, t));\\n    mat3 tbn = mat3(t, b, ng);\\n#else // HAS_TANGENTS\\n    mat3 tbn = v_TBN;\\n#endif\\n\\n#ifdef HAS_NORMALMAP\\n    vec3 n = texture2D(u_NormalSampler, v_UV).rgb;\\n    n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));\\n#else\\n    // The tbn matrix is linearly interpolated, so we need to re-normalize\\n    vec3 n = normalize(tbn[2].xyz);\\n#endif\\n\\n    return n;\\n}\\n\\n#ifdef USE_IBL\\n// Calculation of the lighting contribution from an optional Image Based Light source.\\n// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\\n// See our README.md on Environment Maps [3] for additional discussion.\\nvec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)\\n{\\n    float mipCount = 9.0; // resolution of 512x512\\n    float lod = (pbrInputs.perceptualRoughness * mipCount);\\n    // retrieve a scale and bias to F0. See [1], Figure 3\\n    \\n    vec3 brdf = SRGBtoLINEAR(texture2D(u_brdfLUT, vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;\\n    vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;\\n    \\n\\n#ifdef USE_TEX_LOD\\n    vec3 specularLight = SRGBtoLINEAR(textureCubeLodEXT(u_SpecularEnvSampler, reflection, lod)).rgb;\\n#else\\n    vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;\\n#endif\\n\\n    vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;\\n    vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);\\n\\n    // For presentation, this allows us to disable IBL terms\\n    diffuse *= u_ScaleIBLAmbient.x;\\n    specular *= u_ScaleIBLAmbient.y;\\n\\n    \\n    return diffuse + specular;\\n}\\n#endif\\n\\n#ifdef USE_KHR_LIGHTS\\nvec3 getKhrLightingContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)\\n{\\n    vec3 diffuse = pbrInputs.diffuseColor;\\n    vec3 specular = pbrInputs.specularColor;\\n\\n    #ifdef KHR_LIGHTS_AMBIENT \\n        vec3 nAmbient = (u_KhrLight_Ambient_Color * u_KhrLight_Ambient_Intensity);\\n        diffuse *= nAmbient; \\n        specular *= nAmbient; \\n    #endif\\n\\n    return diffuse + specular;\\n}\\n#endif\\n\\n// Basic Lambertian diffuse\\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\\n// See also [1], Equation 1\\nvec3 diffuse(PBRInfo pbrInputs)\\n{\\n    return pbrInputs.diffuseColor / M_PI;\\n}\\n\\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\\n// Implementation of fresnel from [4], Equation 15\\nvec3 specularReflection(PBRInfo pbrInputs)\\n{\\n    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);\\n}\\n\\n// This calculates the specular geometric attenuation (aka G()),\\n// where rougher material will reflect less light back to the viewer.\\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\\n// alphaRoughness as input as originally proposed in [2].\\nfloat geometricOcclusion(PBRInfo pbrInputs)\\n{\\n    float NdotL = pbrInputs.NdotL;\\n    float NdotV = pbrInputs.NdotV;\\n    float r = pbrInputs.alphaRoughness;\\n\\n    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\\n    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\\n    return attenuationL * attenuationV;\\n}\\n\\n// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\\n// Implementation from \\\"Average Irregularity Representation of a Roughened Surface for Ray Reflection\\\" by T. S. Trowbridge, and K. P. Reitz\\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\\nfloat microfacetDistribution(PBRInfo pbrInputs)\\n{\\n    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;\\n    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;\\n    return roughnessSq / (M_PI * f * f);\\n}\\n\\nvoid main()\\n{\\n    // Metallic and Roughness material properties are packed together\\n    // In glTF, these factors can be specified by fixed scalar values\\n    // or from a metallic-roughness map\\n    float perceptualRoughness = u_MetallicRoughnessValues.y;\\n    float metallic = u_MetallicRoughnessValues.x;\\n#ifdef HAS_METALROUGHNESSMAP\\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\\n    vec4 mrSample = texture2D(u_MetallicRoughnessSampler, v_UV);\\n    perceptualRoughness = mrSample.g * perceptualRoughness;\\n    metallic = mrSample.b * metallic;\\n#endif\\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\\n    metallic = clamp(metallic, 0.0, 1.0);\\n    // Roughness is authored as perceptual roughness; as is convention,\\n    // convert to material roughness by squaring the perceptual roughness [2].\\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\\n\\n    // The albedo may be defined from a base texture or a flat color\\n#ifdef HAS_BASECOLORMAP\\n    vec4 textureColor = texture2D(u_BaseColorSampler, v_UV);\\n    vec4 baseColor = SRGBtoLINEAR(textureColor) * u_BaseColorFactor;\\n#else\\n    vec4 baseColor = u_BaseColorFactor;\\n#endif\\n\\n    #ifdef HAS_ALPHA_CUTOFF\\n        //Pure3d added\\n        if(baseColor.a < u_AlphaCutoff) {\\n            discard;\\n        }\\n\\n    #endif\\n\\n    #ifndef HAS_ALPHA_BLEND\\n        baseColor.a = 1.0;\\n    #endif\\n\\n    vec3 f0 = vec3(0.04);\\n#ifdef HAS_COLOR\\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0) * SRGBtoLINEAR(v_Color).rgb;\\n    diffuseColor *= 1.0 - metallic;\\n#else\\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\\n    diffuseColor *= 1.0 - metallic;\\n#endif\\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\\n\\n    // Compute reflectance.\\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\\n\\n    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\\n    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\\n    vec3 specularEnvironmentR0 = specularColor.rgb;\\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\\n\\n    vec3 n = getNormal();                             // normal at surface point\\n    vec3 v = normalize(u_Camera - v_Position);        // Vector from surface point to camera\\n    vec3 l = normalize(u_LightDirection);             // Vector from surface point to light\\n    vec3 h = normalize(l+v);                          // Half vector between both l and v\\n    vec3 reflection = -normalize(reflect(v, n));\\n\\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\\n    float NdotV = abs(dot(n, v)) + 0.001;\\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\\n\\n    PBRInfo pbrInputs = PBRInfo(\\n        NdotL,\\n        NdotV,\\n        NdotH,\\n        LdotH,\\n        VdotH,\\n        perceptualRoughness,\\n        metallic,\\n        specularEnvironmentR0,\\n        specularEnvironmentR90,\\n        alphaRoughness,\\n        diffuseColor,\\n        specularColor\\n    );\\n\\n    // Calculate the shading terms for the microfacet specular shading model\\n    vec3 F = specularReflection(pbrInputs);\\n    float G = geometricOcclusion(pbrInputs);\\n    float D = microfacetDistribution(pbrInputs);\\n\\n    // Calculation of analytical lighting contribution\\n    vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);\\n    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);\\n    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\\n    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);\\n\\n    // Calculate lighting contribution from image based lighting source (IBL)\\n#ifdef USE_IBL\\n    color += getIBLContribution(pbrInputs, n, reflection);\\n#endif\\n\\n#ifdef USE_KHR_LIGHTS\\n    color += getKhrLightingContribution(pbrInputs, n, reflection);\\n#endif\\n\\n    // Apply optional PBR terms for additional (optional) shading\\n#ifdef HAS_OCCLUSIONMAP\\n    float ao = texture2D(u_OcclusionSampler, v_UV).r;\\n    color = mix(color, color * ao, u_OcclusionStrength);\\n#endif\\n\\n#ifdef HAS_EMISSIVEMAP\\n    vec3 emissive = SRGBtoLINEAR(texture2D(u_EmissiveSampler, v_UV)).rgb * u_EmissiveFactor;\\n    color += emissive;\\n#endif\\n\\n\\n#ifdef USE_KHR_LIGHTS\\n%KHR_LIGHTS_FUNCS%\\n#endif\\n    // This section uses mix to override final color for reference app visualization\\n    // of various parameters in the lighting equation.\\n    color = mix(color, F, u_ScaleFGDSpec.x);\\n    color = mix(color, vec3(G), u_ScaleFGDSpec.y);\\n    color = mix(color, vec3(D), u_ScaleFGDSpec.z);\\n    color = mix(color, specContrib, u_ScaleFGDSpec.w);\\n\\n    color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);\\n    color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);\\n    color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);\\n    color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);\\n\\n    gl_FragColor = vec4(pow(color,vec3(1.0/2.2)), baseColor.a);\\n}\\n\";\n\n//import unlitFragmentShader from \"./Gltf-Unlit-Shader-Fragment.glsl\";\r\n//These need to be called via bridge/setup somehow\r\nconst GLTF_PARSE_getInitialShaderConfig = ({ data, primitive }) => GltfExtensions\r\n    .map(ext => ext.initialShaderConfig)\r\n    .reduce((acc, val) => (acc = val({ data, primitive })(acc), acc), getCoreInitialShaderConfig({ data, primitive }));\r\nconst updateRuntimeShaderConfig = ({ data, primitive, scene }) => {\r\n    const shaderConfig = GltfExtensions\r\n        .map(ext => ext.runtimeShaderConfig)\r\n        .reduce((acc, val) => (acc = val({ data, scene, primitive })(acc), acc), getCoreRuntimeShaderConfig({ data, scene, primitive }));\r\n    return Object.assign({}, primitive, { shaderConfig });\r\n};\r\nconst generateShader = ({ renderer, data, primitive }) => {\r\n    const shaderHash = getShaderHash(primitive.shaderConfig);\r\n    if (!data.shaders.has(shaderHash)) {\r\n        const source = getShaderSource({ data, primitive });\r\n        const shader = createShader({\r\n            shaderId: Symbol(),\r\n            renderer,\r\n            source,\r\n        });\r\n        data.shaders.set(shaderHash, shader);\r\n        //console.log(`new shader compiled`);\r\n    }\r\n    const shader = data.shaders.get(shaderHash);\r\n    return shader;\r\n};\r\nconst getCoreInitialShaderConfig = ({ data, primitive }) => {\r\n    const gltf = data.original;\r\n    const originalNode = data.original.nodes[primitive.originalNodeId];\r\n    const originalPrimitive = data.original.meshes[primitive.originalMeshId].primitives[primitive.originalPrimitiveId];\r\n    const hasAttribute = (originalPrimitive) => (attr) => Object.keys(originalPrimitive.attributes).indexOf(attr) !== -1;\r\n    const material = primitive.material;\r\n    let nMorphWeights = 0;\r\n    let nPositionMorphs = 0;\r\n    let nNormalMorphs = 0;\r\n    let nTangentMorphs = 0;\r\n    let nSkinJoints = 0;\r\n    if (originalNode.skin !== undefined) {\r\n        const skin = data.original.skins[originalNode.skin];\r\n        nSkinJoints = skin.joints.length;\r\n    }\r\n    if (originalPrimitive.targets) {\r\n        originalPrimitive.targets.forEach(target => {\r\n            GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(target)).forEach(key => {\r\n                switch (key) {\r\n                    case \"POSITION\":\r\n                        nPositionMorphs++;\r\n                        break;\r\n                    case \"NORMAL\":\r\n                        nNormalMorphs++;\r\n                        break;\r\n                    case \"TANGENT\":\r\n                        nTangentMorphs++;\r\n                        break;\r\n                    default: console.warn(\"unknown...\", key);\r\n                }\r\n            });\r\n            nMorphWeights++;\r\n        });\r\n    }\r\n    const shaderConfig = {\r\n        nMorphWeights,\r\n        nPositionMorphs,\r\n        nNormalMorphs,\r\n        nTangentMorphs,\r\n        nSkinJoints,\r\n        alphaMode: (material && material.alphaMode) ? material.alphaMode : GltfMaterialAlphaMode.OPAQUE,\r\n        hasNormalAttributes: hasAttribute(originalPrimitive)(\"NORMAL\"),\r\n        hasTangentAttributes: hasAttribute(originalPrimitive)(\"TANGENT\"),\r\n        hasUvAttributes: hasAttribute(originalPrimitive)(\"TEXCOORD_0\"),\r\n        hasColorAttributes: hasAttribute(originalPrimitive)(\"COLOR_0\"),\r\n        hasBaseColorMap: material && material.baseColorSamplerIndex !== undefined,\r\n        hasNormalMap: material && material.normal !== undefined,\r\n        hasEmissiveMap: material && material.emissiveSamplerIndex !== undefined,\r\n        hasMetalRoughnessMap: material && material.metallicRoughnessSamplerIndex !== undefined,\r\n        hasOcclusionMap: material && material.occlusion !== undefined,\r\n        manualSRGB: data.initConfig.manualSRGB === true,\r\n        fastSRGB: data.initConfig.fastSRGB === true,\r\n        extensions: {}\r\n    };\r\n    return shaderConfig;\r\n};\r\nconst getCoreRuntimeShaderConfig = ({ data, scene, primitive }) => {\r\n    return primitive.shaderConfig;\r\n};\r\nconst getCoreShaderSource = ({ data, primitive }) => {\r\n    const gltf = data.original;\r\n    const originalPrimitive = data.original.meshes[primitive.originalMeshId].primitives[primitive.originalPrimitiveId];\r\n    const config = primitive.shaderConfig;\r\n    const defines = [];\r\n    if (config.hasNormalAttributes) {\r\n        defines.push(\"HAS_NORMALS\");\r\n    }\r\n    if (config.hasTangentAttributes) {\r\n        defines.push(\"HAS_TANGENTS\");\r\n    }\r\n    if (config.hasUvAttributes) {\r\n        defines.push(\"HAS_UV\");\r\n    }\r\n    if (config.hasColorAttributes) {\r\n        defines.push(\"HAS_COLOR\");\r\n    }\r\n    if (config.hasBaseColorMap) {\r\n        defines.push(\"HAS_BASECOLORMAP\");\r\n    }\r\n    if (config.hasNormalMap) {\r\n        defines.push(\"HAS_NORMALMAP\");\r\n    }\r\n    if (config.hasEmissiveMap) {\r\n        defines.push(\"HAS_EMISSIVEMAP\");\r\n    }\r\n    if (config.hasMetalRoughnessMap) {\r\n        defines.push(\"HAS_METALROUGHNESSMAP\");\r\n    }\r\n    if (config.hasOcclusionMap) {\r\n        defines.push(\"HAS_OCCLUSIONMAP\");\r\n    }\r\n    if (config.manualSRGB) {\r\n        defines.push(\"MANUAL_SRGB\");\r\n    }\r\n    if (config.fastSRGB) {\r\n        defines.push(\"SRGB_FAST_APPROXIMATION\");\r\n    }\r\n    if (config.nSkinJoints) {\r\n        defines.push(\"HAS_SKIN\");\r\n    }\r\n    switch (config.alphaMode) {\r\n        case GltfMaterialAlphaMode.MASK:\r\n            defines.push(\"HAS_ALPHA_CUTOFF\");\r\n            break;\r\n        case GltfMaterialAlphaMode.BLEND:\r\n            defines.push(\"HAS_ALPHA_BLEND\");\r\n            break;\r\n    }\r\n    const defineString = defines.map(value => `#define ${value} 1\\n`).join('');\r\n    const vertex = getCoreVertexShader({ data, primitive })(defineString + vertexShaderSource);\r\n    const fragment = getCoreFragmentShader(defineString + fragmentShaderSource);\r\n    return { vertex, fragment };\r\n};\r\nconst getCoreVertexShader = ({ data, primitive }) => (vs) => {\r\n    const originalNode = data.original.nodes[primitive.originalNodeId];\r\n    const originalPrimitive = data.original.meshes[primitive.originalMeshId].primitives[primitive.originalPrimitiveId];\r\n    const attributeKeys = GLTF_PARSE_getPrimitiveAttributeKeys(originalPrimitive);\r\n    const { targets } = originalPrimitive;\r\n    const shaderMorphVarLookup = {\r\n        \"POSITION\": \"m_Position\",\r\n        \"NORMAL\": \"m_Normal\",\r\n        \"TANGENT\": \"m_Tangent\",\r\n    };\r\n    let MORPH_VARS = '';\r\n    let MORPH_FUNCS = '';\r\n    let morphIndex = 0;\r\n    let weightIndex = 0;\r\n    if (targets) {\r\n        targets.forEach(target => {\r\n            GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(target)).forEach(key => {\r\n                const aMorph = `a_Morph_${morphIndex}`;\r\n                const aTarget = shaderMorphVarLookup[key];\r\n                MORPH_VARS += `attribute vec4 ${aMorph};\\n`;\r\n                MORPH_FUNCS += `${aTarget} += (u_MorphWeights[${weightIndex}] * ${aMorph});\\n`;\r\n                morphIndex++;\r\n            });\r\n            weightIndex++;\r\n        });\r\n        MORPH_VARS += `uniform float u_MorphWeights[${weightIndex}];\\n`;\r\n    }\r\n    let SKIN_JOINT_COUNT = '';\r\n    if (originalNode.skin !== undefined) {\r\n        const skin = data.original.skins[originalNode.skin];\r\n        SKIN_JOINT_COUNT = skin.joints.length.toString();\r\n    }\r\n    return vs\r\n        .replace(\"%MORPH_VARS%\", MORPH_VARS)\r\n        .replace(\"%MORPH_FUNCS%\", MORPH_FUNCS)\r\n        .replace(\"%SKIN_JOINT_COUNT%\", SKIN_JOINT_COUNT);\r\n};\r\nconst getCoreFragmentShader = (fs) => fs;\r\nconst getShaderSource = ({ data, primitive }) => GltfExtensions\r\n    .map(ext => ext.shaderSource)\r\n    .reduce((acc, val) => (acc = val({ data, primitive })(acc), acc), getCoreShaderSource({ data, primitive }));\n\nconst GLTF_PARSE_createPrimitives = ({ renderer, data }) => {\r\n    const gltf = data.original;\r\n    const meshPrimitives = new Map();\r\n    if (gltf.nodes === undefined || gltf.nodes === null) {\r\n        return meshPrimitives;\r\n    }\r\n    gltf.nodes\r\n        .map((node, idx) => [node, idx])\r\n        .filter(([node, idx]) => node.mesh !== undefined && node.mesh !== null)\r\n        .forEach(([node, nodeId]) => meshPrimitives.set(node.mesh, gltf.meshes[node.mesh].primitives.map((originalPrimitive, primitiveIdx) => {\r\n        const mesh = gltf.meshes[node.mesh];\r\n        const primitive = Object.assign({ originalNodeId: nodeId, originalMeshId: node.mesh, originalPrimitiveId: primitiveIdx, vaoId: GLTF_PARSE_createPrimitiveAttributes({ renderer, originalPrimitive, data }) }, GLTF_PARSE_getPrimitiveDrawing({ originalPrimitive, data }));\r\n        if (originalPrimitive.material !== undefined) {\r\n            primitive.material = GLTF_PARSE_createMaterialForPrimitive({ gltf, materialId: originalPrimitive.material, data });\r\n        }\r\n        primitive.shaderConfig = GLTF_PARSE_getInitialShaderConfig({ data, primitive });\r\n        return primitive;\r\n    })));\r\n    return meshPrimitives;\r\n};\n\nconst GLTF_PARSE_getCamera = (originalCamera) => {\r\n    return originalCamera.type === \"orthographic\"\r\n        ? {\r\n            kind: CameraKind.ORTHOGRAPHIC,\r\n            xmag: originalCamera.orthographic.xmag,\r\n            ymag: originalCamera.orthographic.ymag,\r\n            znear: originalCamera.orthographic.znear,\r\n            zfar: originalCamera.orthographic.zfar\r\n        }\r\n        : {\r\n            kind: CameraKind.PERSPECTIVE,\r\n            aspectRatio: originalCamera.perspective.aspectRatio,\r\n            yfov: originalCamera.perspective.yfov,\r\n            znear: originalCamera.perspective.znear,\r\n            zfar: originalCamera.perspective.zfar,\r\n        };\r\n};\n\nconst GLTF_PARSE_createSkins = ({ gltf, buffers }) => {\r\n    const skins = new Map();\r\n    if (!gltf.skins || !gltf.skins.length) {\r\n        return skins;\r\n    }\r\n    //From the spec, this is guaranteed to be from a vec4 accessor and a series of mat4 data\r\n    const splitMatrix = (numbers) => {\r\n        const ret = new Array();\r\n        for (let idx = 0; idx < numbers.length;) {\r\n            ret.push(numbers.slice(idx, idx + 16));\r\n            idx += 16;\r\n        }\r\n        return ret;\r\n    };\r\n    gltf.skins.forEach((originalSkin, skinId) => {\r\n        const inverseBindMatrices = originalSkin.inverseBindMatrices\r\n            ? splitMatrix(GLTF_PARSE_getAccessorTypedData({\r\n                gltf,\r\n                buffers,\r\n                info: GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId: originalSkin.inverseBindMatrices })\r\n            }))\r\n            : originalSkin.joints.map(createIdentityMat4());\r\n        if (inverseBindMatrices.length !== originalSkin.joints.length) {\r\n            throw new Error(\"inverse bind matrices mismatch!\");\r\n        }\r\n        let skeletonRootId;\r\n        const skinData = {\r\n            joints: originalSkin.joints.map((originalNodeId, idx) => {\r\n                const joint = {\r\n                    originalNodeId,\r\n                    inverseBindMatrix: inverseBindMatrices[idx]\r\n                };\r\n                if (originalSkin.skeleton !== undefined && originalSkin.skeleton === originalNodeId) {\r\n                    skeletonRootId = originalNodeId;\r\n                }\r\n                return joint;\r\n            })\r\n        };\r\n        if (skeletonRootId !== undefined) {\r\n            skinData.skeletonRootId = skeletonRootId;\r\n        }\r\n        skins.set(skinId, skinData);\r\n    });\r\n    return skins;\r\n};\n\n/*\r\n * All of the nodes are parsed in place as though they could be any root\r\n * Technically this is extra needless computation, but it makes the code clearer\r\n * Also, doing it this way allows for dynamic scene mixtures :D\r\n *\r\n * Since it's only on init, the cpu processing shouldn't matter much\r\n * Nodes are by definition lightweight, it's no biggie in terms of memory either\r\n * However, they _should_ be culled via GltfBridge.getOriginalScene(), otherwise dups will show\r\n */\r\nconst GLTF_PARSE_getNodes = ({ gltf, primitives, data, assets }) => {\r\n    const skinLookup = GLTF_PARSE_createSkins({ gltf, buffers: assets.buffers });\r\n    const getGltfNode = (parentModelMatrix) => (originalNodeId) => (node) => {\r\n        const baseNode = {\r\n            originalNodeId,\r\n            animationIds: [],\r\n            kind: node.mesh !== undefined && primitives.has(node.mesh) && primitives.get(node.mesh).length\r\n                ? GltfNodeKind.MESH\r\n                : node.camera !== undefined\r\n                    ? NodeKind.CAMERA\r\n                    : undefined,\r\n        };\r\n        const trs = node.matrix ? getTrsFromMatrix(Float64Array.from(node.matrix)) : getTrs(node);\r\n        const localMatrix = node.matrix ? new Float64Array(node.matrix) : getMatrixFromTrs(trs);\r\n        const modelMatrix = getModelMatrix(parentModelMatrix)(localMatrix);\r\n        baseNode.transform = { trs, localMatrix, modelMatrix };\r\n        const hasNormals = baseNode.kind !== GltfNodeKind.MESH\r\n            ? false\r\n            : gltf.meshes[node.mesh].primitives.some(p => GLTF_PARSE_primitiveHasAttribute(\"NORMAL\")(p));\r\n        if (hasNormals) {\r\n            baseNode.transform.normalMatrix = getNormalMatrix(modelMatrix);\r\n        }\r\n        if (baseNode.kind === GltfNodeKind.MESH) {\r\n            baseNode.primitives = primitives.get(node.mesh);\r\n            if (node.skin !== undefined) {\r\n                const skinData = skinLookup.get(node.skin);\r\n                baseNode.skin = {\r\n                    skinId: node.skin,\r\n                    joints: skinData.joints.slice()\r\n                };\r\n                if (skinData.skeletonRootId !== undefined) {\r\n                    baseNode.skin.skeletonRootId = skinData.skeletonRootId;\r\n                }\r\n            }\r\n            const morphWeights = node.weights\r\n                ? Float64Array.from(node.weights)\r\n                : gltf.meshes[node.mesh].weights\r\n                    ? Float64Array.from(gltf.meshes[node.mesh].weights)\r\n                    : undefined;\r\n            if (morphWeights) {\r\n                baseNode.morphWeights = morphWeights;\r\n            }\r\n        }\r\n        else if (baseNode.kind === NodeKind.CAMERA) {\r\n            baseNode.camera = GLTF_PARSE_getCamera(gltf.cameras[node.camera]);\r\n            baseNode.cameraIndex = node.camera;\r\n        }\r\n        const finalNode = GltfExtensions\r\n            .map(ext => ext.createNode)\r\n            .reduce((acc, val) => (acc = val(gltf)(node)(acc), acc), baseNode);\r\n        return !node.children\r\n            ? finalNode\r\n            : Object.assign(finalNode, { children: node.children.map(idx => getGltfNode(modelMatrix)(idx)(gltf.nodes[idx])) });\r\n    };\r\n    return GLTF_PARSE_addAnimationIds({\r\n        gltf,\r\n        nodes: gltf.nodes\r\n            .map((node, idx) => getGltfNode(null)(idx)(node))\r\n    });\r\n};\r\nfunction getTrs(node) {\r\n    const trs = {\r\n        translation: Float64Array.from([0.0, 0.0, 0.0]),\r\n        rotation: Float64Array.from([0.0, 0.0, 0.0, 1.0]),\r\n        scale: Float64Array.from([1.0, 1.0, 1.0])\r\n    };\r\n    Object.keys(trs).forEach(prop => {\r\n        const nodeTrsProp = node[prop];\r\n        if (nodeTrsProp) {\r\n            trs[prop] = nodeTrsProp;\r\n        }\r\n    });\r\n    return trs;\r\n}\n\nconst createRendererThunk = (thunk) => () => {\r\n    const { renderer, data, node, primitive, lightList, scene, shader, skinMatrices } = thunk;\r\n    const { camera } = scene;\r\n    const { gl } = renderer;\r\n    const gltf = data.original;\r\n    const { material, drawMode } = primitive;\r\n    const { uniforms, shaderId } = shader;\r\n    const { uniform1i, uniform1f, uniform1fv, uniform1iv, uniform2fv, uniform3fv, uniform4fv, uniformMatrix4fv } = uniforms.setters;\r\n    const vaoId = data.attributes.vaoIdLookup.get(primitive.vaoId);\r\n    let samplerIndex = 0;\r\n    activateShader(shaderId);\r\n    if (material && material.doubleSided) {\r\n        renderer.glToggle(WebGlConstants.CULL_FACE)(false);\r\n    }\r\n    else {\r\n        renderer.glToggle(WebGlConstants.CULL_FACE)(true);\r\n    }\r\n    /*\r\n        Set the IBL uniforms\r\n    */\r\n    if (scene.extensions.ibl) {\r\n        renderer.switchTexture(samplerIndex)(data.extensions.ibl.brdf);\r\n        uniform1i(\"u_brdfLUT\")(samplerIndex++);\r\n        if (data.extensions.ibl.cubeMaps.diffuse) {\r\n            renderer.switchCubeTexture(samplerIndex)(data.extensions.ibl.cubeMaps.diffuse);\r\n            uniform1i(\"u_DiffuseEnvSampler\")(samplerIndex++);\r\n        }\r\n        if (data.extensions.ibl.cubeMaps.specular) {\r\n            renderer.switchCubeTexture(samplerIndex)(data.extensions.ibl.cubeMaps.specular);\r\n            uniform1i(\"u_SpecularEnvSampler\")(samplerIndex++);\r\n        }\r\n        //this is actually just used in fragment shader (e.g. not for transforms), but it's required\r\n        uniform3fv(\"u_Camera\")(camera.position);\r\n        uniform4fv(\"u_ScaleDiffBaseMR\")(scene.extensions.ibl.scaleDiffBaseMR);\r\n        uniform4fv(\"u_ScaleFGDSpec\")(scene.extensions.ibl.scaleFGDSpec);\r\n        uniform4fv(\"u_ScaleIBLAmbient\")(scene.extensions.ibl.scaleIBLAmbient);\r\n    }\r\n    /*\r\n     * Set the generic lighting uniforms\r\n    */\r\n    //Lighting is not implemented in the shader yet, even though the nodes are\r\n    //Exception is the Directional light though the actual direction is hardcoded\r\n    if (scene.light) {\r\n        uniform3fv(\"u_KhrLight_Ambient_Color\")(scene.light.color);\r\n        uniform1f(\"u_KhrLight_Ambient_Intensity\")(scene.light.intensity);\r\n    }\r\n    lightList.forEach(lightNode => {\r\n        const { light } = lightNode;\r\n        if (light.kind === LightKind.Directional) {\r\n            //Just for now - TODO - get from lightNode.transform.trs.rotation\r\n            //Hardcoding the position so we can see it - on the left\r\n            uniform3fv(\"u_LightDirection\")([-0.5825, -0.1357, -0.8014]);\r\n            uniform3fv(\"u_LightColor\")(light.color);\r\n        }\r\n        //TODO - allow multiple lights, point lights, etc.\r\n        if (light.kind === LightKind.Spot) ;\r\n    });\r\n    /*\r\n      Set the transform uniforms\r\n    */\r\n    if (skinMatrices) {\r\n        uniformMatrix4fv(\"u_Skin_Matrices\")(false)(skinMatrices);\r\n    }\r\n    uniformMatrix4fv(\"u_MVPMatrix\")(false)(node.transform.modelViewProjectionMatrix);\r\n    uniformMatrix4fv(\"u_ModelMatrix\")(false)(node.transform.modelMatrix);\r\n    if (node.transform.normalMatrix) {\r\n        uniformMatrix4fv(\"u_NormalMatrix\")(false)(node.transform.normalMatrix);\r\n    }\r\n    /*\r\n      Set the morph targets\r\n    */\r\n    //console.log(uniforms.getLocation(\"u_MorphWeights\"));\r\n    if (node.morphWeights) {\r\n        uniform1fv(\"u_MorphWeights\")(node.morphWeights);\r\n    }\r\n    /*\r\n      Set the material uniforms\r\n    */\r\n    const assignMeshTexture = (uName) => (textureInfo) => {\r\n        if (typeof textureInfo === \"number\") {\r\n            renderer.switchTexture(samplerIndex)(data.textures.get(textureInfo));\r\n        }\r\n        else {\r\n            renderer.switchTexture(samplerIndex)(textureInfo);\r\n        }\r\n        uniform1i(uName)(samplerIndex++);\r\n    };\r\n    if (material) {\r\n        uniform2fv(\"u_MetallicRoughnessValues\")(material.metallicRoughnessValues);\r\n        uniform4fv(\"u_BaseColorFactor\")(material.baseColorFactor);\r\n        if (material.baseColorSamplerIndex !== undefined) {\r\n            assignMeshTexture(\"u_BaseColorSampler\")(material.baseColorSamplerIndex);\r\n        }\r\n        if (material.metallicRoughnessSamplerIndex !== undefined) {\r\n            assignMeshTexture(\"u_MetallicRoughnessSampler\")(material.metallicRoughnessSamplerIndex);\r\n        }\r\n        if (material.normal !== undefined) {\r\n            uniform1f(\"u_NormalScale\")(material.normal.scale);\r\n            assignMeshTexture(\"u_NormalSampler\")(material.normal.samplerIndex);\r\n        }\r\n        if (material.occlusion !== undefined) {\r\n            uniform1f(\"u_OcclusionStrength\")(material.occlusion.strength);\r\n            assignMeshTexture(\"u_OcclusionSampler\")(material.occlusion.samplerIndex);\r\n        }\r\n        if (material.emissiveSamplerIndex !== undefined) {\r\n            assignMeshTexture(\"u_EmissiveSampler\")(material.emissiveSamplerIndex);\r\n        }\r\n        if (material.emissiveFactor !== undefined) {\r\n            uniform3fv(\"u_EmissiveFactor\")(material.emissiveFactor);\r\n        }\r\n        if (material.alphaMode === GltfMaterialAlphaMode.MASK) {\r\n            const alphaCutoff = (material.alphaMode === GltfMaterialAlphaMode.MASK)\r\n                ? material.alphaCutoff\r\n                : 1.0;\r\n            uniform1f(\"u_AlphaCutoff\")(alphaCutoff);\r\n        }\r\n    }\r\n    /*\r\n        Draw\r\n    */\r\n    renderer.vertexArrays.activate(vaoId);\r\n    if (primitive.drawKind === GltfPrimitiveDrawKind.ELEMENTS) {\r\n        const elementsAccessor = gltf.accessors[primitive.elementsId];\r\n        //console.log(`gl.drawElements(${drawMode}, ${elementsAccessor.count}, ${elementsAccessor.componentType}, ${elementsAccessor.byteOffset || 0});`)\r\n        gl.drawElements(drawMode, elementsAccessor.count, elementsAccessor.componentType, elementsAccessor.byteOffset || 0);\r\n    }\r\n    else {\r\n        gl.drawArrays(drawMode, 0, primitive.arrayCount);\r\n    }\r\n};\n\nconst renderScene = (renderer) => (data) => (scene) => {\r\n    const shaderGroupByAlpha = new Map();\r\n    const renderThunksByShader = new Map();\r\n    const meshList = new Array();\r\n    const lightList = new Array();\r\n    forEachNodes((node) => {\r\n        if (node.kind === GltfNodeKind.MESH\r\n            && node.transform\r\n            && node.transform.modelViewProjectionMatrix ? true : false) {\r\n            meshList.push(node);\r\n        }\r\n        else if (node.kind === NodeKind.LIGHT) {\r\n            lightList.push(node);\r\n        }\r\n    })(scene.nodes);\r\n    meshList.forEach(node => {\r\n        let skinMatrices;\r\n        if (node.skin !== undefined && node.skin.skinMatrices) {\r\n            skinMatrices = node.skin.skinMatrices;\r\n        }\r\n        node.primitives.forEach(primitive => {\r\n            const shader = generateShader({\r\n                renderer,\r\n                data,\r\n                primitive,\r\n            });\r\n            if (!renderThunksByShader.has(shader.shaderId)) {\r\n                renderThunksByShader.set(shader.shaderId, []);\r\n            }\r\n            const shaderGroup = renderThunksByShader.get(shader.shaderId);\r\n            shaderGroup.push(createRendererThunk({\r\n                skinMatrices,\r\n                renderer,\r\n                data,\r\n                node,\r\n                primitive,\r\n                lightList,\r\n                scene,\r\n                shader\r\n            }));\r\n            if (!shaderGroupByAlpha.has(primitive.shaderConfig.alphaMode)) {\r\n                shaderGroupByAlpha.set(primitive.shaderConfig.alphaMode, new Set());\r\n            }\r\n            shaderGroupByAlpha.get(primitive.shaderConfig.alphaMode).add(shaderGroup);\r\n        });\r\n    });\r\n    //These are for _all_ gltf renders, but there might be another gl renderer between them so the flags need to be set\r\n    renderer.glToggle(WebGlConstants.BLEND)(false);\r\n    renderer.glToggle(WebGlConstants.DEPTH_TEST)(true);\r\n    //these are just random guesses looking at some common practices out in the wild\r\n    renderer.glDepthFunc(renderer.gl.LEQUAL);\r\n    renderer.glBlendFunc(renderer.gl.SRC_ALPHA)(renderer.gl.ONE_MINUS_SRC_ALPHA);\r\n    const render = _render(renderer)(shaderGroupByAlpha);\r\n    render(GltfMaterialAlphaMode.OPAQUE);\r\n    render(GltfMaterialAlphaMode.MASK);\r\n    render(GltfMaterialAlphaMode.BLEND);\r\n};\r\n//Render calls are sorted by alpha and then shader.\r\n//The thunks themselves will assign vaos\r\n//They are released by shader groupo\r\nconst _render = (renderer) => (shaderGroups) => (alphaMode) => {\r\n    if (shaderGroups.has(alphaMode)) {\r\n        if (alphaMode === GltfMaterialAlphaMode.BLEND) {\r\n            renderer.glToggle(WebGlConstants.BLEND)(true);\r\n        }\r\n        shaderGroups.get(alphaMode)\r\n            .forEach(xs => {\r\n            xs.forEach(fn => fn());\r\n        });\r\n    }\r\n};\n\nconst gltf_load = ({ renderer, path, config, mapper }) => {\r\n    const bridge = createGltfBridge(renderer);\r\n    return bridge\r\n        .loadFile(path)\r\n        .chain(({ gltf, glbBuffers }) => {\r\n        gltf = mapper ? mapper(gltf) : gltf;\r\n        return bridge.loadAssets({ gltf, glbBuffers, basePath: getBasePath(path) })\r\n            .map(assets => ({ gltf, config, assets }));\r\n    })\r\n        .map(bridge.start)\r\n        .map(() => bridge);\r\n};\r\nfunction createGltfBridge(renderer) {\r\n    const exports = {};\r\n    let _allNodes;\r\n    let _data;\r\n    const loadFile = (path) => fetchArrayBufferUrl(path).map(GLTF_PARSE_getOriginalFromArrayBuffer);\r\n    const loadAssets = ({ gltf, basePath, glbBuffers }) => GLTF_PARSE_LoadDataAssets({ basePath: basePath ? basePath : \"\", gltf, glbBuffers });\r\n    const start = ({ gltf, assets, config }) => {\r\n        const data = GLTF_PARSE_CreateData({\r\n            gltf,\r\n            renderer,\r\n            assets,\r\n            config\r\n        });\r\n        const primitives = GLTF_PARSE_createPrimitives({ renderer, data });\r\n        _data = data;\r\n        _allNodes = GLTF_PARSE_getNodes({ gltf, primitives, data, assets });\r\n    };\r\n    const updatePrimitives = (scene) => (mapper) => {\r\n        return Object.assign({}, scene, {\r\n            nodes: mapNodes(node => node.kind === GltfNodeKind.MESH\r\n                ? Object.assign({}, node, {\r\n                    primitives: node.primitives.map(primitive => mapper(primitive))\r\n                })\r\n                : node)(scene.nodes)\r\n        });\r\n    };\r\n    const updateShaderConfigs = (scene) => {\r\n        return updatePrimitives(scene)(primitive => updateRuntimeShaderConfig({\r\n            data: _data,\r\n            primitive,\r\n            scene\r\n        }));\r\n    };\r\n    const renderScene$$1 = (scene) => {\r\n        renderScene(renderer)(_data)(scene);\r\n    };\r\n    const getOriginalScene = (camera) => (sceneNumber) => {\r\n        let nodes = [];\r\n        if (sceneNumber >= 0 && _data.original.scenes[sceneNumber]) {\r\n            const sceneList = _data.original.scenes[sceneNumber].nodes;\r\n            forEachNodes(node => {\r\n                if (sceneList.indexOf(node.originalNodeId) !== -1) {\r\n                    nodes.push(node);\r\n                }\r\n            })(_allNodes);\r\n        }\r\n        else {\r\n            nodes = _allNodes;\r\n            console.warn(\"no scene specified! Expect duplicate nodes...\");\r\n        }\r\n        const originalScene = sceneNumber >= 0\r\n            ? _data.original.scenes[sceneNumber]\r\n            : {\r\n                nodes: _data.original.nodes.map((node, idx) => idx)\r\n            };\r\n        //const nodes =_allNodes.filter((node, idx) => originalScene.nodes.indexOf(idx) !== -1);\r\n        const scene = GltfExtensions\r\n            .map(ext => ext.createScene)\r\n            .reduce((acc, val) => acc = val(_data.original)(originalScene)(acc), {\r\n            camera,\r\n            extensions: {},\r\n            nodes: updateNodeListTransforms({\r\n                updateLocal: true,\r\n                updateModel: true,\r\n                updateView: true,\r\n                camera,\r\n            })(null)(nodes)\r\n        });\r\n        //First time is mandatory - after that it's up to the caller\r\n        return updateShaderConfigs(scene);\r\n    };\r\n    const getCameraNode = (index) => {\r\n        const node = findNode(node => node.kind === NodeKind.CAMERA && node.cameraIndex === index)(_allNodes);\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        const camera = Object.assign({}, node.camera);\r\n        if (camera.kind === CameraKind.PERSPECTIVE && camera.aspectRatio === undefined) {\r\n            camera.aspectRatio = renderer.canvas.width / renderer.canvas.height;\r\n        }\r\n        return Object.assign({}, node, { camera: updateCameraWithTransform(node.transform)(camera) });\r\n    };\r\n    const bridge = {\r\n        renderer,\r\n        getAllNodes: () => _allNodes,\r\n        getData: () => _data,\r\n        getOriginalScene,\r\n        getCameraNode,\r\n        loadFile,\r\n        loadAssets,\r\n        start,\r\n        renderScene: renderScene$$1,\r\n        updateShaderConfigs,\r\n    };\r\n    Object.assign(exports, bridge);\r\n    return exports;\r\n}\n\n//TODO - implement with Flatbuffers\r\nconst gltf_serializeScene = (scene) => {\r\n    return scene;\r\n};\r\nconst gltf_parseScene = (bytes) => {\r\n    return bytes;\r\n};\n\nconst gltf_updatePrimitiveShaderConfig = updateRuntimeShaderConfig;\n\nconst gltf_updateNodeTransforms = (opts) => (nodes) => {\r\n    const updatedNodes = updateNodeListTransforms(opts)(null)(nodes);\r\n    return mapNodes(gltf_setJointTransforms(updatedNodes))(updatedNodes);\r\n};\r\nconst gltf_findNodeById = (id) => (nodeOrNodes) => findNode((node) => node.originalNodeId === id)(nodeOrNodes);\r\nconst gltf_setJointTransforms = (fullTree) => (node) => {\r\n    if (node.kind === GltfNodeKind.MESH && node.skin) {\r\n        const jointList = getJointList(fullTree)(node);\r\n        const getSkeletonRootTransform = (id) => {\r\n            const joint = jointList.find(j => j.originalNodeId === id);\r\n            if (joint) {\r\n                return joint.transform;\r\n            }\r\n            return gltf_findNodeById(id)(fullTree).transform;\r\n        };\r\n        let pos = 0;\r\n        //see https://github.com/KhronosGroup/glTF-Tutorials/issues/17\r\n        const inverseRootMatrix = mat4.invert(mat4.create(), node.skin.skeletonRootId === undefined\r\n            ? node.transform.modelMatrix\r\n            : getSkeletonRootTransform(node.skin.skeletonRootId).modelMatrix);\r\n        const skinMatrices = jointList.reduce((acc, joint) => {\r\n            const jMat = mat4.create();\r\n            mat4.multiply(jMat, joint.transform.modelMatrix, joint.inverseBindMatrix);\r\n            if (inverseRootMatrix) {\r\n                mat4.multiply(jMat, inverseRootMatrix, jMat);\r\n            }\r\n            //Needs to flatten for uploading to webgl\r\n            for (let i = 0; i < jMat.length; i++) {\r\n                acc[pos++] = jMat[i];\r\n            }\r\n            return acc;\r\n        }, new Float32Array(node.skin.joints.length * 16));\r\n        return Object.assign({}, node, {\r\n            skin: Object.assign({}, node.skin, {\r\n                skinMatrices\r\n            })\r\n        });\r\n    }\r\n    return node;\r\n};\r\nconst getJointList = (fullTree) => (meshNode) => {\r\n    const jointIds = new Map();\r\n    const jointList = meshNode.skin.joints.map((joint, index) => {\r\n        jointIds.set(joint.originalNodeId, index);\r\n        return {\r\n            originalNodeId: joint.originalNodeId,\r\n            inverseBindMatrix: joint.inverseBindMatrix\r\n        };\r\n    });\r\n    forEachNodes((node) => {\r\n        if (jointIds.has(node.originalNodeId)) {\r\n            const index = jointIds.get(node.originalNodeId);\r\n            jointList[index].transform = node.transform;\r\n            jointIds.delete(node.originalNodeId);\r\n            if (!jointIds.size) {\r\n                return true;\r\n            }\r\n        }\r\n    })(fullTree);\r\n    return jointList;\r\n};\n\nconst createAttributes = ({ gl, buffers }) => {\r\n    let currentBuffer;\r\n    let currentTarget;\r\n    const globalLocations = new Set();\r\n    const _perShaderCache = new Map();\r\n    const _globalCache = new Map();\r\n    const getLocationInShader = (program) => (aName) => {\r\n        if (!_perShaderCache.has(program)) {\r\n            _perShaderCache.set(program, new Map());\r\n        }\r\n        const cache = _perShaderCache.get(program);\r\n        if (!cache.has(aName)) {\r\n            cache.set(aName, gl.getAttribLocation(program, aName));\r\n        }\r\n        return cache.get(aName);\r\n    };\r\n    const getLocationInRenderer = (aName) => {\r\n        if (!_globalCache.has(aName)) {\r\n            //For-of wasn't working across typescript and things...\r\n            //This is a little ugly but it's totally fine since it's only on init\r\n            //And by far most use-cases will be a cache hit\r\n            let idx = 0;\r\n            globalLocations.forEach(val => {\r\n                if (!_globalCache.has(val)) {\r\n                    _globalCache.set(val, idx);\r\n                }\r\n                idx++;\r\n            });\r\n        }\r\n        return _globalCache.get(aName);\r\n    };\r\n    const activateElements = (bufferId) => {\r\n        const info = buffers.get(bufferId);\r\n        if (currentBuffer !== bufferId || currentTarget !== info.target) {\r\n            gl.bindBuffer(info.target, info.buffer);\r\n            currentBuffer = bufferId;\r\n            currentTarget = info.target;\r\n        }\r\n    };\r\n    const activateData = (location) => (bufferId) => (opts) => {\r\n        activateElements(bufferId); //isn't really elements here, but nicer than having a superfluous alias\r\n        gl.vertexAttribPointer(location, opts.size, opts.type, opts.normalized === undefined ? false : opts.normalized, opts.stride === undefined ? 0 : opts.stride, opts.offset === undefined ? 0 : opts.offset);\r\n        gl.enableVertexAttribArray(location);\r\n    };\r\n    return { globalLocations, getLocationInShader, getLocationInRenderer, activateElements, activateData };\r\n};\n\nconst createWebGlBuffers = (gl) => {\r\n    const infoMap = new Map();\r\n    const bind = (sym) => {\r\n        const info = infoMap.get(sym);\r\n        gl.bindBuffer(info.target, info.buffer);\r\n    };\r\n    const assign = (sym) => (bData) => {\r\n        const info = infoMap.has(sym)\r\n            ? infoMap.get(sym)\r\n            : { buffer: gl.createBuffer() };\r\n        info.data = bData.data;\r\n        info.target = bData.target;\r\n        info.usagePattern = bData.usagePattern;\r\n        infoMap.set(sym, info);\r\n        bind(sym);\r\n        //typecasting to any since coercion into TypedArray for webgl2 is responsibility of caller\r\n        gl.bufferData(info.target, info.data, info.usagePattern);\r\n    };\r\n    const get = (sym) => infoMap.get(sym);\r\n    return { assign, get, bind };\r\n};\n\n//This hasn't been tested in a while and isn't managed by the renderer anymore\r\n//See the old usage here: https://github.com/dakom/state-scenegraph/blob/master/src/lib/renderer/Renderer-WebGl.ts\r\n//Though it can still be used generally, probably, and it might be helpful to keep the code here :)\r\nconst makeFramebufferPicker = (gl) => ({ width, height }) => {\r\n    //setup a texture to store colors\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    //setup a renderbuffer to store depth info\r\n    const renderBuffer = gl.createRenderbuffer();\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\r\n    //setup a framebuffer for offscreen rendering\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\r\n    //unbind everything\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    //exported utils\r\n    const bind = () => gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    const unbind = () => gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    const readPixel = ({ x, y }) => {\r\n        const readout = new Uint8Array(4);\r\n        bind();\r\n        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, readout);\r\n        unbind();\r\n        return readout;\r\n    };\r\n    const clear = (bits) => {\r\n        bind();\r\n        gl.clear(bits);\r\n        unbind();\r\n    };\r\n    const dispose = () => {\r\n        unbind();\r\n        gl.deleteFramebuffer(frameBuffer);\r\n        gl.deleteRenderbuffer(renderBuffer);\r\n        gl.deleteTexture(texture);\r\n    };\r\n    return {\r\n        bind: bind,\r\n        unbind: unbind,\r\n        readPixel: readPixel,\r\n        dispose: dispose,\r\n        clear: clear\r\n    };\r\n};\n\nconst createVertexArrays = ({ getExtension, gl, version, buffers }) => {\r\n    const _cache = new Map();\r\n    let currentSym;\r\n    const _create = () => {\r\n        if (version === 1) {\r\n            return getExtension(\"OES_vertex_array_object\").createVertexArrayOES();\r\n        }\r\n        else {\r\n            return gl.createVertexArray();\r\n        }\r\n    };\r\n    const _bind = (target) => {\r\n        if (version === 1) {\r\n            return getExtension(\"OES_vertex_array_object\").bindVertexArrayOES(target);\r\n        }\r\n        else {\r\n            return gl.bindVertexArray(target);\r\n        }\r\n    };\r\n    const _activate = (force) => (sym) => {\r\n        if (!force && currentSym === sym) {\r\n            return;\r\n        }\r\n        currentSym = sym;\r\n        if (!_cache.has(sym)) {\r\n            _cache.set(sym, _create());\r\n        }\r\n        _bind(_cache.get(sym));\r\n    };\r\n    const assign = (sym) => (v) => {\r\n        _activate(true)(sym);\r\n        if (v.elementBufferId) {\r\n            buffers.bind(v.elementBufferId);\r\n        }\r\n        v.data.forEach(({ location, usagePattern, bufferId, size, type, normalized, stride, offset }) => {\r\n            const bufferInfo = buffers.get(bufferId);\r\n            //there's no cache checks in the case of VAO - the set as a whole is toggled on/off\r\n            buffers.bind(bufferId);\r\n            gl.vertexAttribPointer(location, size, type, normalized === undefined ? false : normalized, stride === undefined ? 0 : stride, offset === undefined ? 0 : offset);\r\n            gl.enableVertexAttribArray(location);\r\n        });\r\n        release();\r\n    };\r\n    const release = () => {\r\n        if (currentSym !== null) {\r\n            currentSym = null;\r\n            _bind(null);\r\n        }\r\n    };\r\n    return { activate: _activate(false), release, assign };\r\n};\r\n/*\r\nexport const createVertexArraysForRenderer = (renderer:WebGlRenderer) =>\r\n    createVertexArrays({renderer, getAttributeLocation: renderer.getGlobalAttributeLocation});\r\n\nexport const createVertexArraysForShader = ({renderer, shader}:{renderer:WebGlRenderer, shader:WebGlShader}) =>\r\n    createVertexArrays({renderer, getAttributeLocation: shader.attributes.getLocation})\r\n    */\n\nconst getVersionString = (gl) => gl.getParameter(WebGlConstants.VERSION);\r\nconst _isNumber = (chr) => {\r\n    switch (chr) {\r\n        case '0':\r\n        case '1':\r\n        case '2':\r\n        case '3':\r\n        case '4':\r\n        case '5':\r\n        case '6':\r\n        case '7':\r\n        case '8':\r\n        case '9':\r\n            return true;\r\n    }\r\n    return false;\r\n};\r\nconst getMajorVersion = (gl) => {\r\n    const str = getVersionString(gl);\r\n    let numberString = '';\r\n    for (let i = 0; i < str.length; i++) {\r\n        const chr = str.charAt(i);\r\n        if (_isNumber(chr)) {\r\n            numberString += chr;\r\n        }\r\n        else {\r\n            if (numberString.length) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return parseInt(numberString, 10);\r\n};\n\nconst createWebGlRenderer = (opts) => {\r\n    const { canvas, contextAttributes } = opts;\r\n    const gl = (() => {\r\n        if (opts.gl !== undefined) {\r\n            return opts.gl;\r\n        }\r\n        let _gl;\r\n        if (opts.version === undefined || opts.version === 2) {\r\n            try {\r\n                _gl = canvas.getContext(\"webgl2\", contextAttributes);\r\n            }\r\n            catch (e) {\r\n                _gl = undefined;\r\n            }\r\n            if (!_gl) {\r\n                console.warn(\"Failed to initialize webgl2, trying webgl1 as a fallback...\");\r\n            }\r\n            else {\r\n                return _gl;\r\n            }\r\n        }\r\n        try {\r\n            _gl = canvas.getContext(\"webgl\", contextAttributes) || canvas.getContext(\"experimental-webgl\", contextAttributes);\r\n        }\r\n        catch (e) {\r\n            _gl = undefined;\r\n        }\r\n        if (!_gl) {\r\n            console.warn(\"Unable to initialize webgl1\");\r\n        }\r\n        return _gl;\r\n    })();\r\n    const version = getMajorVersion(gl);\r\n    const lastScreenSize = {\r\n        width: NaN,\r\n        height: NaN\r\n    };\r\n    const resize = ({ width, height }) => {\r\n        if (lastScreenSize.width !== width || lastScreenSize.height !== height) {\r\n            canvas.setAttribute('width', width.toString());\r\n            canvas.setAttribute('height', height.toString());\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n            lastScreenSize.width = width;\r\n            lastScreenSize.height = height;\r\n        }\r\n    };\r\n    const flagMap = new Map();\r\n    const glToggle = (setting) => (flag) => {\r\n        if (!flagMap.has(setting) || flagMap.get(setting) !== flag) {\r\n            flagMap.set(setting, flag);\r\n            if (flag) {\r\n                gl.enable(setting);\r\n            }\r\n            else {\r\n                gl.disable(setting);\r\n            }\r\n        }\r\n    };\r\n    const buffers = createWebGlBuffers(gl);\r\n    const extensionMap = new Map();\r\n    const getExtension = (extName) => {\r\n        if (!extensionMap.has(extName)) {\r\n            const ext = gl.getExtension(extName);\r\n            if (!ext) {\r\n                console.warn(\"Could not create extension\", extName);\r\n            }\r\n            extensionMap.set(extName, ext);\r\n        }\r\n        return extensionMap.get(extName);\r\n    };\r\n    let depthFunc;\r\n    const glDepthFunc = (func) => {\r\n        if (func !== depthFunc) {\r\n            gl.depthFunc(func);\r\n            depthFunc = func;\r\n        }\r\n    };\r\n    let _sFactor, _dFactor;\r\n    const glBlendFunc = (sFactor) => (dFactor) => {\r\n        if (sFactor !== _sFactor || dFactor !== _dFactor) {\r\n            gl.blendFunc(sFactor, dFactor);\r\n            _sFactor = sFactor;\r\n            _dFactor = dFactor;\r\n        }\r\n    };\r\n    const textureSwitcher = createTextureSwitcher(gl);\r\n    const attributes = createAttributes({\r\n        gl,\r\n        buffers,\r\n    });\r\n    const vertexArrays = createVertexArrays({\r\n        getExtension,\r\n        gl,\r\n        version,\r\n        buffers\r\n    });\r\n    return Object.assign({ resize,\r\n        canvas,\r\n        gl,\r\n        buffers,\r\n        attributes,\r\n        vertexArrays }, textureSwitcher, { glToggle,\r\n        glDepthFunc,\r\n        glBlendFunc,\r\n        getExtension,\r\n        version, extras: {} });\r\n};\n\nexport { GltfAnimationTargetPath, GltfAnimationInterpolation, GltfMaterialAlphaMode, GltfNodeKind, GltfPrimitiveDrawKind, GltfIblExtensionName, GltfLightsExtensionName, GltfUnlitExtensionName, CameraKind, NodeKind, LightKind, WebGlConstants, createVec2, createVec4, createVec3, createMat4, createQuat, createIdentityMat4, getTrsFromMatrix, getMatrixFromTrs, getModelMatrix, getNormalMatrix, getViewMatrices, updateTransform, getCameraProjection, getCameraView, getCameraPosition, updateCameraWithTransform, filterNodeDeep, filterNodesDeep, forEachNode, forEachNodes, countNodes, findNode, mapNode, mapNodeWithParent, mapNodesWithParent, mapNodes, updateNodeTransforms, updateNodeListTransforms, createPointLight, gltf_setAnimationTime, gltf_createAnimator, gltf_load, gltf_serializeScene, gltf_parseScene, gltf_updatePrimitiveShaderConfig, gltf_updateNodeTransforms, gltf_findNodeById, gltf_setJointTransforms, createAttributes, createWebGlBuffers, makeFramebufferPicker, createWebGlRenderer, activateShader, createShader, createTextureSwitcher, createTextureFromTarget, createCubeTextureFromTarget, textureSetterSimple, createSimpleTextureFromTarget, createUniforms, getVersionString, getMajorVersion, createVertexArrays };\n//# sourceMappingURL=lib.esm.js.map\n","import { create, env } from 'sanctuary';\nimport { Future } from 'fluture';\n\nvar checkTypes = false; //process.env.BUILD_TYPE !== 'build';\r\nvar S = create({ checkTypes: checkTypes, env: env });\n\nvar isNil = function (x) { return x == undefined || x == null; };\r\nvar getDomUrl = function (url) {\r\n    var ctor = window.URL || window.webkitURL || window;\r\n    return new ctor(url);\r\n};\r\nvar sameOrigin = function (url) {\r\n    return url.indexOf(\"http://\") !== -1 || url.indexOf(\"https://\") !== -1\r\n        ? (getDomUrl(url).origin === window.location.origin)\r\n        : true;\r\n};\n\nvar ImageLoader = function (_a) {\r\n    var url = _a.url, crossOrigin = _a.crossOrigin;\r\n    return Future(function (reject, resolve) {\r\n        var img = new Image();\r\n        img.addEventListener(\"load\", function () { return resolve(img); });\r\n        img.addEventListener(\"error\", reject);\r\n        S.map(function (x) { return img.crossOrigin = x; })(crossOrigin);\r\n        img.src = url;\r\n    });\r\n};\r\nvar fetchImage = function (url) { return ImageLoader({ url: url, crossOrigin: !sameOrigin(url) ? S.Just(\"anonymous\") : S.Nothing }); };\r\nvar loadImageFromUrl = fetchImage; //an alias\r\nvar loadImageFromArrayBuffer = function (_a) {\r\n    var data = _a.data, mimeType = _a.mimeType;\r\n    return Future(function (reject, resolve) {\r\n        var img = new Image();\r\n        img.addEventListener(\"load\", function () { return resolve(img); });\r\n        img.addEventListener(\"error\", reject);\r\n        var arrayBufferView = new Uint8Array(data);\r\n        var blob = new Blob([arrayBufferView], { type: mimeType });\r\n        var urlCreator = window.URL || window.webkitURL;\r\n        img.src = urlCreator.createObjectURL(blob);\r\n    });\r\n};\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n};\n\nvar makeQuery = function (args) {\r\n    var query = '';\r\n    if (!isNil(args)) {\r\n        for (var key in args) {\r\n            if (args.hasOwnProperty(key) && !isNil(args[key])) {\r\n                if (query !== '') {\r\n                    query += '&';\r\n                }\r\n                query += key + \"=\" + encodeURIComponent(args[key]);\r\n            }\r\n        }\r\n    }\r\n    return query;\r\n};\r\nvar XhrLoader = function (endpoint) { return function (options) { return Future(function (reject, resolve) {\r\n    var opts = __assign({ method: \"GET\" }, options);\r\n    var xhr = opts.xhr !== undefined\r\n        ? opts.xhr\r\n        : new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === xhr.DONE) {\r\n            if (!xhr.status) {\r\n                return; //was cancelled\r\n            }\r\n            if (xhr.status !== 200) {\r\n                reject(xhr);\r\n            }\r\n            else {\r\n                resolve(xhr);\r\n            }\r\n        }\r\n    };\r\n    var query = ((opts.requestType === \"form\" || opts.requestType === \"query\") && opts.data !== null)\r\n        ? makeQuery(opts.data)\r\n        : \"\";\r\n    var url = (opts.requestType === \"query\" && query !== \"\")\r\n        ? endpoint + \"?\" + query\r\n        : endpoint;\r\n    xhr.open(opts.method, url);\r\n    xhr.responseType = opts.responseType;\r\n    if (opts.withCredentials !== undefined) {\r\n        xhr.withCredentials = opts.withCredentials;\r\n    }\r\n    if (opts.headers !== undefined) {\r\n        opts.headers.forEach(function (_a) {\r\n            var key = _a[0], val = _a[1];\r\n            xhr.setRequestHeader(key, val);\r\n        });\r\n    }\r\n    if (opts.requestType === \"form\" && query !== \"\") {\r\n        xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n        //Not actually allowed by spec, so commenting out.. browser will calculate automatically\r\n        //xhr.setRequestHeader(\"Content-length\", requestData.length);\r\n        xhr.send(query);\r\n    }\r\n    else if (!isNil(opts.data)) {\r\n        xhr.send(opts.data);\r\n    }\r\n    else {\r\n        xhr.send();\r\n    }\r\n    return function () { return xhr.abort(); };\r\n}); }; };\r\n//generics for simplifying fetch style requests\r\n//The base function is \"fletch\" - but after that it's all \"fetch*\"\r\nvar fletch = function (endpoint) { return function (options) {\r\n    return XhrLoader(endpoint)(options).map(function (xhr) { return xhr.response; });\r\n}; };\r\nvar fetchUrl = function (endpoint) {\r\n    return fletch(endpoint)(null);\r\n};\r\n//internal helpers to keep things DRY\r\nvar _fetchOverride = function (responseType) { return function (endpoint) { return function (options) {\r\n    return fletch(endpoint)(__assign({}, options, { responseType: responseType }));\r\n}; }; };\r\nvar _fetchUrlOverride = function (responseType) { return function (endpoint) {\r\n    return fletch(endpoint)({ responseType: responseType });\r\n}; };\r\n//Fetches the specific data. Overrides the responseType, but otherwise all Xhr settings are allowed\r\nvar fetchArrayBuffer = _fetchOverride(\"arraybuffer\");\r\nvar fetchText = _fetchOverride(\"text\");\r\nvar fetchBlob = _fetchOverride(\"blob\");\r\nvar fetchXml = _fetchOverride(\"document\");\r\n//Json will use query as default here since it's the typical case here (and can still be overridden)\r\nvar fetchJson = function (endpoint) { return function (options) { return _fetchOverride(\"json\")(endpoint)(__assign({ requestType: \"query\" }, options)); }; };\r\n//wrapper over fletch for cases it's just the url\r\n//Same as fetch* but without any Xhr options (simple url get)\r\nvar fetchArrayBufferUrl = _fetchUrlOverride(\"arraybuffer\");\r\nvar fetchJsonUrl = _fetchUrlOverride(\"json\");\r\nvar fetchTextUrl = _fetchUrlOverride(\"text\");\r\nvar fetchBlobUrl = _fetchUrlOverride(\"blob\");\r\nvar fetchXmlUrl = _fetchUrlOverride(\"document\");\n\nvar BlobLoader = function (read) { return function (blob) { return Future(function (reject, resolve) {\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = function () { return resolve(fileReader.result); };\r\n    fileReader.onerror = function (err) { return reject(err); };\r\n    read([fileReader, blob]);\r\n    return function () { return fileReader.abort(); };\r\n}); }; };\r\nvar loadBlobAsArrayBuffer = BlobLoader(function (_a) {\r\n    var fileReader = _a[0], blob = _a[1];\r\n    return fileReader.readAsArrayBuffer(blob);\r\n});\r\nvar loadBlobAsDataUrl = BlobLoader(function (_a) {\r\n    var fileReader = _a[0], blob = _a[1];\r\n    return fileReader.readAsDataURL(blob);\r\n});\r\nvar loadblobAsText = BlobLoader(function (_a) {\r\n    var fileReader = _a[0], blob = _a[1];\r\n    return fileReader.readAsText(blob);\r\n});\n\nvar loadAudioBuffer = function (ctx) { return function (data) { return Future(function (reject, resolve) {\r\n    ctx.decodeAudioData(data, resolve, reject);\r\n}); }; };\n\nvar VideoPlayer = function (_a) {\r\n    var url = _a.url, crossOrigin = _a.crossOrigin;\r\n    return Future(function (reject, resolve) {\r\n        var playing = false;\r\n        var timeupdate = false;\r\n        var video = document.createElement('video');\r\n        video.autoplay = true;\r\n        video.muted = true;\r\n        video.loop = true;\r\n        S.map(function (x) { return video.crossOrigin = x; })(crossOrigin);\r\n        var checkReady = function () {\r\n            if (playing && timeupdate) {\r\n                resolve(video);\r\n            }\r\n        };\r\n        video.addEventListener('playing', function () {\r\n            playing = true;\r\n            checkReady();\r\n        }, true);\r\n        video.addEventListener('timeupdate', function () {\r\n            timeupdate = true;\r\n            checkReady();\r\n        }, true);\r\n        video.src = url;\r\n        video.play();\r\n    });\r\n};\r\nvar playVideo = function (url) { return VideoPlayer({ url: url, crossOrigin: !sameOrigin(url) ? S.Just(\"anonymous\") : S.Nothing }); };\n\nexport { ImageLoader, fetchImage, loadImageFromUrl, loadImageFromArrayBuffer, XhrLoader, fletch, fetchUrl, fetchArrayBuffer, fetchText, fetchBlob, fetchXml, fetchJson, fetchArrayBufferUrl, fetchJsonUrl, fetchTextUrl, fetchBlobUrl, fetchXmlUrl, BlobLoader, loadBlobAsArrayBuffer, loadBlobAsDataUrl, loadblobAsText, loadAudioBuffer, VideoPlayer, playVideo };\n//# sourceMappingURL=lib.esm.js.map\n","import {sWorldUpdate} from \"./World-Sinks-FRP\";\nimport {S} from \"utils/Utils\";\nimport {Cell, TimerSystem, TimerSystemImpl, StreamSink, Operational, Stream} from \"sodiumjs\";\n\nexport interface Alarm {\n    ts:number;\n    cancel: () => void;\n}\n\n//tick on worker side is driven by requestAnimationFrame on the main side\nexport const sTick = \n    sWorldUpdate.map(({frameTs}) => frameTs);\n\n//simple way to filter out functions that shouldn't fire until first tick\n//currently just for local use in mapStreamTick but could have more purposes\nconst cMaybeTick = sTick.map(S.Just).hold(S.Nothing);\n\n//Allows mixing in a timestamp to a stream\n//Only fires after first tick (e.g. no bogus placeholder values)\nexport const mapStreamTick = <T>(sSource:Stream<T>):Stream<T & {ts: number}> => \n    sSource.snapshot(cMaybeTick, (source, mTick) =>\n        S.map\n            (ts => Object.assign({}, source, {ts}))\n            (mTick)\n    )\n    .filter (S.isJust)\n    .map (S.maybe (undefined) (S.I));\n\n\n\n//Creates a stream which fires after the seconds in cTime (if time is <0, it's not fired)\n//Will re-fire when cTime changes\n//Note that the actual time of firing is n, but it is filtered and mapped by frame tick\nexport const alarmUpdates = (cTime:Cell<number>) => {\n    const sSink = new StreamSink<{cancel: () => void}>();\n\n    let timerId = null;\n\n    const cancel = () => {\n        if(timerId !== null) {\n            clearTimeout(timerId);\n            timerId = null;\n        }\n    }\n\n    cTime.listen(n => {\n        cancel();\n\n        if(n >= 0) {\n            timerId = setTimeout(() => sSink.send({cancel}), n);\n        }\n    });\n\n    return mapStreamTick(sSink);\n}\n","/*\n * The approach here divides into two major ideas:\n * 1. The position of the ball can be described via a pure function of f(t) = y (i.e. no integration)\n * 2. That pure function must be re-generated upon collision\n *\n * The rest of the implementation details are about answering the required questions to support that\n * For example, when does the impact happen, what velocity does the ball have when it does, etc.\n */\n\n//Imports\nimport {lambda2, Transaction, CellSink, Operational,  Cell, StreamSink, StreamLoop, CellLoop} from \"sodiumjs\";\nimport {Camera, GltfScene, GltfNode} from \"pure3d\";\nimport {S, Maybe, Kinematic3, Kinematic4, Kinematic5, Kinematic7} from \"utils/Utils\";\nimport {World} from \"types/World-Types\";\nimport {setBallTranslationY} from \"actions/World-Actions\";\nimport {sTick, mapStreamTick, alarmUpdates} from \"./Time-FRP\";\nimport {sBallStart_Sink, sBallStop_Sink} from \"./Ball-Sinks-FRP\";\nimport * as L from \"partial.lenses\";\n\n//Types\ntype BallPhysics = Partial<{ \n    h:number;\n    t0: number;\n    getPosition: (t:number) => number;\n    nextBounceTime:number;\n}>\n\ninterface BallPhysicsDrop extends BallPhysics {\n    y: number;\n}\n\ninterface BallPhysicsBounce extends BallPhysics {\n    v: number;\n}\n\n//Main logic\nexport const createBallFrp = (node:GltfNode) => {\n\n    const cBall:Cell<Maybe<BallPhysics>> = Transaction.run(() => {\n        //When BallPhysics changes, BounceAlarm changes \n        //Yet when BounceAlarm changes, BallPhysics changes\n        //Thankfully this is easily handled with a CellLoop\n        const cPhysicsLoop = new CellLoop<Maybe<BallPhysics>>();\n\n        //If BallPhysics is Nothing, alarm will not fire\n        const sBounceAlarm = alarmUpdates( \n            cPhysicsLoop\n                .map(S.maybe (-1) (phys => phys.nextBounceTime * 1000))\n        );\n\n        //Theoretically, bounce alarms that fire when the ball is inactive\n        //Won't actually do any harm\n        //But for the sake of completeness, the code below will also cancel the alarms\n        //Since the alarm is non-existant before the first firing, it needs to be bypassed\n        const cBounceAlarm = sBounceAlarm.map(S.Just).hold(S.Nothing);\n\n        //Things that change BallPhysics:\n        //  * BounceAlarm changing\n        //  * sBallStart_Sink (button press)\n        //  * sBallStop_Sink (button press)\n        //Notably, time itself does _not_ change the physics (e.g. this stuff is very efficient)\n        cPhysicsLoop.loop(\n            mapStreamTick(sBallStart_Sink).snapshot3(cBounceAlarm, cPhysicsLoop, ({ts}, mBounceAlarm, mPhysics) => {\n                S.map(bounceAlarm => bounceAlarm.cancel()) (mBounceAlarm);\n                return S.Just(createInitialPhysics (ts) (node));\n            })\n            .orElse(sBallStop_Sink.snapshot(cBounceAlarm, (_, mBounceAlarm) => {\n                S.map(bounceAlarm => bounceAlarm.cancel()) (mBounceAlarm);\n                return S.Nothing;\n            }))\n            .orElse(sBounceAlarm.snapshot(cPhysicsLoop, (alarm, mPhys) => \n                S.map (phys => onBounce (alarm.ts) (phys)) (mPhys)     \n            ))\n            .hold(S.Nothing)\n        );\n\n        return cPhysicsLoop;\n    })\n\n    //theoretically we could update much more frequently, and render separately\n    //but requestAnimationFrame is the most consistent way of getting a constant frequency in JS\n    //this decision is actually reflected throughout the code e.g. mapStreamTick()\n    const sBallUpdates =\n        sTick.snapshot(cBall, (t, mBall) => \n            S.maybe\n                (S.I)\n                (({t0, getPosition}:BallPhysics) => \n                    (world:World) =>\n                        setBallTranslationY\n                            (getPosition((t - t0) / 1000))\n                            (world)\n                )\n                (mBall)\n        );\n\n    return sBallUpdates;\n}\n\n//Hardcoded physics values\nconst GRAVITY = -9.81;\nconst RESTITUTION = .8;\n\n//Hardcoded point of impact\nconst BOTTOM = -0.903; \n\n//Lenses\nconst HEIGHT = \"h\";\nconst VELOCITY = \"v\";\nconst GET_POSITION = \"getPosition\"\nconst NEXT_BOUNCE_TIME = \"nextBounceTime\";\nconst START_TIME = \"t0\";\n\n//Helper to set a lens based on function which gets the object\nconst setLens = <T,V>(lens:any) => (fn:(obj:T) => V) => (obj:T):T =>\n    L.set (lens) (fn(obj)) (obj);\n\n//Initial Physics - just a drop until impact\n//The starting input is a plain GltfNode\n//createInitialPhysics :: Int -> GltfNode -> BallPhysicsDrop\nconst createInitialPhysics = (now:number) =>\n    S.pipe([\n        (node:GltfNode) => ({y: node.transform.trs.translation[1]}),\n\n        setLens (HEIGHT)\n                ((phys:BallPhysicsDrop) => phys.y - BOTTOM),\n\n        setLens (GET_POSITION)\n                ((phys:BallPhysicsDrop) => (t:number) => phys.y + Kinematic3(0) (GRAVITY) (t)),\n\n        setLens (NEXT_BOUNCE_TIME)\n                ((phys:BallPhysicsDrop) => Kinematic5 (0) (GRAVITY) (-phys.h)),\n\n        setLens (START_TIME)\n                (() => now),\n    ]) \n\n//Bounce Physics - graphs like a parabola from start to end.\n//The starting input may be from a drop or bounce (e.g. anything with height)\n//It is assumed that the input is currently at BOTTOM \n//onBounce :: Int -> BallPhysics -> BallPhysicsBounce\nconst onBounce = (now:number) => \n    S.pipe([\n        setLens (HEIGHT) \n                ((phys:BallPhysics) => phys.h * RESTITUTION),\n\n        setLens (VELOCITY) \n                ((phys:BallPhysics) => Kinematic4 (0) (-GRAVITY) (phys.h)),\n\n        setLens (GET_POSITION) \n                ((phys:BallPhysicsBounce) => (t:number) => BOTTOM + Kinematic3 (phys.v) (GRAVITY) (t)),\n\n        setLens (NEXT_BOUNCE_TIME) \n                ((phys:BallPhysicsBounce) => Kinematic7 (0) (-GRAVITY) (phys.v) * 2),\n\n        setLens (START_TIME)\n                (() => now),\n    ]); \n","import {Stream, StreamSink, Cell} from \"sodiumjs\";\nimport {Camera, GltfScene} from \"pure3d\";\nimport {sWorldUpdate} from \"./World-Sinks-FRP\";\nimport {S} from \"utils/Utils\";\nimport {setCamera, updateTransforms} from \"actions/World-Actions\";\nimport {createBallFrp} from \"./Ball-FRP\";\nimport {World} from \"types/World-Types\";\n\ntype WorldUpdate = (world:World) => World;\n\nconst mergeUpdates = (left:WorldUpdate, right:WorldUpdate) =>\n   (world:World) => left(right(world));\n\nexport const createWorldFrp = (initialScenes:Array<GltfScene>) => {\n    //const cBall = new Cell(S.I);\n    const sPhysics = createBallFrp(initialScenes[0].nodes[0]);\n\n\n    return sWorldUpdate\n        .map(setCamera)\n        .merge(sPhysics, mergeUpdates)\n        .accum({scenes: initialScenes}, (fn, world) => fn(world))\n        .map(world => updateTransforms(world)); \n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"BEFORE\"] = 0] = \"BEFORE\";\n    Direction[Direction[\"AFTER\"] = 1] = \"AFTER\";\n    Direction[Direction[\"INSIDE_AT_END\"] = 2] = \"INSIDE_AT_END\";\n    Direction[Direction[\"INSIDE_AT_START\"] = 3] = \"INSIDE_AT_START\";\n})(Direction || (Direction = {}));\nvar MultiRootTree = /** @class */ (function () {\n    function MultiRootTree(rootIds, nodes) {\n        if (rootIds === void 0) { rootIds = []; }\n        if (nodes === void 0) { nodes = {}; }\n        this.rootIds = rootIds;\n        this.nodes = nodes;\n        this.initRootIds();\n        this.initNodes();\n    }\n    MultiRootTree.prototype.initRootIds = function () {\n        for (var _i = 0, _a = this.rootIds; _i < _a.length; _i++) {\n            var rootId = _a[_i];\n            this.createEmptyNodeIfNotExist(rootId);\n        }\n    };\n    MultiRootTree.prototype.initNodes = function () {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var _i = 0, _a = this.nodes[nodeKey]; _i < _a.length; _i++) {\n                    var nodeListItem = _a[_i];\n                    this.createEmptyNodeIfNotExist(nodeListItem);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.createEmptyNodeIfNotExist = function (nodeKey) {\n        if (!this.nodes[nodeKey]) {\n            this.nodes[nodeKey] = [];\n        }\n    };\n    MultiRootTree.prototype.getRootIds = function () {\n        var clone = this.rootIds.slice();\n        return clone;\n    };\n    MultiRootTree.prototype.getNodes = function () {\n        var clone = {};\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                clone[nodeKey] = this.nodes[nodeKey].slice();\n            }\n        }\n        return clone;\n    };\n    MultiRootTree.prototype.getObject = function () {\n        return {\n            rootIds: this.getRootIds(),\n            nodes: this.getNodes(),\n        };\n    };\n    MultiRootTree.prototype.toObject = function () {\n        return this.getObject();\n    };\n    MultiRootTree.prototype.flatten = function () {\n        var _this = this;\n        var extraPropsObject = [];\n        for (var i = 0; i < this.rootIds.length; i++) {\n            var rootId = this.rootIds[i];\n            extraPropsObject.push({\n                id: rootId,\n                level: 0,\n                hasParent: false,\n                childrenCount: 0,\n            });\n            traverse(rootId, this.nodes, extraPropsObject, 0);\n        }\n        for (var _i = 0, extraPropsObject_1 = extraPropsObject; _i < extraPropsObject_1.length; _i++) {\n            var o = extraPropsObject_1[_i];\n            o.childrenCount = countChildren(o.id);\n        }\n        return extraPropsObject;\n        function countChildren(id) {\n            if (!_this.nodes[id]) {\n                return 0;\n            }\n            else {\n                var childrenCount = _this.nodes[id].length;\n                return childrenCount;\n            }\n        }\n        function traverse(startId, nodes, returnArray, level) {\n            if (level === void 0) { level = 0; }\n            if (!startId || !nodes || !returnArray || !nodes[startId]) {\n                return;\n            }\n            level++;\n            var idsList = nodes[startId];\n            for (var i = 0; i < idsList.length; i++) {\n                var id = idsList[i];\n                returnArray.push({ id: id, level: level, hasParent: true });\n                traverse(id, nodes, returnArray, level);\n            }\n            level--;\n        }\n    };\n    MultiRootTree.prototype.moveIdBeforeId = function (moveId, beforeId) {\n        return this.moveId(moveId, beforeId, Direction.BEFORE);\n    };\n    MultiRootTree.prototype.moveIdAfterId = function (moveId, afterId) {\n        return this.moveId(moveId, afterId, Direction.AFTER);\n    };\n    MultiRootTree.prototype.moveIdIntoId = function (moveId, insideId, atStart) {\n        if (atStart === void 0) { atStart = true; }\n        if (atStart) {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_START);\n        }\n        else {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_END);\n        }\n    };\n    MultiRootTree.prototype.swapRootIdWithRootId = function (rootId, withRootId) {\n        var leftIndex = this.findRootId(rootId);\n        var rightIndex = this.findRootId(withRootId);\n        this.swapRootPositionWithRootPosition(leftIndex, rightIndex);\n    };\n    MultiRootTree.prototype.swapRootPositionWithRootPosition = function (swapRootPosition, withRootPosition) {\n        var temp = this.rootIds[withRootPosition];\n        this.rootIds[withRootPosition] = this.rootIds[swapRootPosition];\n        this.rootIds[swapRootPosition] = temp;\n    };\n    MultiRootTree.prototype.deleteId = function (id) {\n        this.rootDeleteId(id);\n        this.nodeAndSubNodesDelete(id);\n        this.nodeRefrencesDelete(id);\n    };\n    MultiRootTree.prototype.insertIdBeforeId = function (beforeId, insertId) {\n        var foundRootIdIndex = this.findRootId(beforeId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdAfterId = function (belowId, insertId) {\n        var foundRootIdIndex = this.findRootId(belowId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex + 1);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, belowId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex + 1);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdIntoId = function (insideId, insertId) {\n        this.nodeInsertAtEnd(insideId, insertId);\n        this.nodes[insertId] = [];\n    };\n    MultiRootTree.prototype.insertIdIntoRoot = function (id, position) {\n        if (position === undefined) {\n            this.rootInsertAtEnd(id);\n        }\n        else {\n            if (position < 0) {\n                var length_1 = this.rootIds.length;\n                this.rootIds.splice((position + length_1 + 1), 0, id);\n            }\n            else {\n                this.rootIds.splice(position, 0, id);\n            }\n        }\n        this.nodes[id] = this.nodes[id] || [];\n    };\n    MultiRootTree.prototype.insertIdIntoNode = function (nodeKey, id, position) {\n        this.nodes[nodeKey] = this.nodes[nodeKey] || [];\n        this.nodes[id] = this.nodes[id] || [];\n        if (position === undefined) {\n            this.nodeInsertAtEnd(nodeKey, id);\n        }\n        else {\n            if (position < 0) {\n                var length_2 = this.nodes[nodeKey].length;\n                this.nodes[nodeKey].splice((position + length_2 + 1), 0, id);\n            }\n            else {\n                this.nodes[nodeKey].splice(position, 0, id);\n            }\n        }\n    };\n    MultiRootTree.prototype.moveId = function (moveId, beforeId, direction) {\n        var sourceId = moveId;\n        var sourceRootIndex = this.findRootId(sourceId);\n        var sourceNodeKey;\n        var sourceNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            sourceNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                sourceNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        var targetId = beforeId;\n        var targetRootIndex = this.findRootId(targetId);\n        var targetNodeKey;\n        var targetNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            targetNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                targetNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        if (sourceRootIndex > -1) {\n            if (targetRootIndex > -1) {\n                // moving root to root\n                // console.log(`Moving ROOT to ROOT`);\n                // console.log(`RootIds:`);\n                // console.log(this.rootIds);\n                // console.log(`TargetIndex=${targetRootIndex}, SourceIndex=${sourceRootIndex}`);\n                // console.log(`TargetId=${targetId}, SourceId=${sourceId}`);\n                this.rootDelete(sourceRootIndex); // indexes change now\n                if (targetRootIndex > sourceRootIndex) {\n                    targetRootIndex--;\n                }\n                else {\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving root (source) ABOVE node (target)\n                // will remove one entry from roots\n                this.rootDelete(sourceRootIndex);\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (targetRootIndex > -1) {\n                // moving node (source) ABOVE root (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            // this.nodeInsertId(nodeKey, sourceId, index);\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving node (source) ABOVE node (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.swapArrayElements = function (arr, indexA, indexB) {\n        var temp = arr[indexA];\n        arr[indexA] = arr[indexB];\n        arr[indexB] = temp;\n        return arr;\n    };\n    MultiRootTree.prototype.rootDeleteId = function (id) {\n        var index = this.findRootId(id);\n        if (index > -1) {\n            this.rootDelete(index);\n        }\n    };\n    MultiRootTree.prototype.nodeAndSubNodesDelete = function (nodeKey) {\n        var toDeleteLater = [];\n        for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n            var id = this.nodes[nodeKey][i];\n            this.nodeAndSubNodesDelete(id);\n            toDeleteLater.push(nodeKey);\n        }\n        this.nodeDelete(nodeKey);\n        for (var i = 0; i < toDeleteLater.length; i++) {\n            this.nodeDelete(toDeleteLater[i]);\n        }\n    };\n    MultiRootTree.prototype.nodeRefrencesDelete = function (id) {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n                    var targetId = this.nodes[nodeKey][i];\n                    if (targetId === id) {\n                        this.nodeDeleteAtIndex(nodeKey, i);\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.nodeDelete = function (nodeKey) {\n        delete this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.findRootId = function (id) {\n        return this.rootIds.indexOf(id);\n    };\n    MultiRootTree.prototype.findNodeId = function (nodeKey, id) {\n        return this.nodes[nodeKey].indexOf(id);\n    };\n    MultiRootTree.prototype.findNode = function (nodeKey) {\n        return this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.nodeInsertAtStart = function (nodeKey, id) {\n        this.nodes[nodeKey].unshift(id);\n    };\n    MultiRootTree.prototype.nodeInsertAtEnd = function (nodeKey, id) {\n        this.nodes[nodeKey].push(id);\n    };\n    MultiRootTree.prototype.rootDelete = function (index) {\n        this.rootIds.splice(index, 1);\n    };\n    MultiRootTree.prototype.nodeDeleteAtIndex = function (nodeKey, index) {\n        this.nodes[nodeKey].splice(index, 1);\n    };\n    MultiRootTree.prototype.rootInsertAtStart = function (id) {\n        this.rootIds.unshift(id);\n    };\n    MultiRootTree.prototype.rootInsertAtEnd = function (id) {\n        this.rootIds.push(id);\n    };\n    return MultiRootTree;\n}());\nexports.default = MultiRootTree;\n//# sourceMappingURL=MultiRootTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedList_1 = require(\"./LinkedList\");\nvar Stack = /** @class */ (function () {\n    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Stack() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.push = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.add = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.pop = function () {\n        return this.list.removeElementAtIndex(0);\n    };\n    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.peek = function () {\n        return this.list.first();\n    };\n    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */\n    Stack.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */\n    Stack.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */\n    Stack.prototype.isEmpty = function () {\n        return this.list.isEmpty();\n    };\n    /**\n     * Removes all of the elements from this stack.\n     */\n    Stack.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Stack.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Stack;\n}()); // End of stack\nexports.default = Stack;\n//# sourceMappingURL=Stack.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Heap_1 = require(\"./Heap\");\nvar PriorityQueue = /** @class */ (function () {\n    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function PriorityQueue(compareFunction) {\n        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n    }\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.add = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        if (this.heap.size() !== 0) {\n            var el = this.heap.peek();\n            this.heap.removeRoot();\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.peek = function () {\n        return this.heap.peek();\n    };\n    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */\n    PriorityQueue.prototype.contains = function (element) {\n        return this.heap.contains(element);\n    };\n    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.heap.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */\n    PriorityQueue.prototype.size = function () {\n        return this.heap.size();\n    };\n    /**\n     * Removes all of the elements from this priority queue.\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.heap.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    PriorityQueue.prototype.forEach = function (callback) {\n        this.heap.forEach(callback);\n    };\n    return PriorityQueue;\n}()); // end of priority queue\nexports.default = PriorityQueue;\n//# sourceMappingURL=PriorityQueue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar arrays = require(\"./arrays\");\nvar MultiDictionary = /** @class */ (function () {\n    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n       *  return pet.name;\n       * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n       *  return pet1.age===pet2.age;\n       * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */\n    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n        this.dict = new Dictionary_1.default(toStrFunction);\n        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n        this.allowDuplicate = allowDuplicateValues;\n    }\n    /**\n    * Returns an array holding the values to which this dictionary maps\n    * the specified key.\n    * Returns an empty array if this dictionary contains no mappings for this key.\n    * @param {Object} key key whose associated values are to be returned.\n    * @return {Array} an array holding the values to which this dictionary maps\n    * the specified key.\n    */\n    MultiDictionary.prototype.getValue = function (key) {\n        var values = this.dict.getValue(key);\n        if (util.isUndefined(values)) {\n            return [];\n        }\n        return arrays.copy(values);\n    };\n    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */\n    MultiDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return false;\n        }\n        var array = this.dict.getValue(key);\n        if (util.isUndefined(array)) {\n            this.dict.setValue(key, [value]);\n            return true;\n        }\n        if (!this.allowDuplicate) {\n            if (arrays.contains(array, value, this.equalsF)) {\n                return false;\n            }\n        }\n        array.push(value);\n        return true;\n    };\n    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */\n    MultiDictionary.prototype.remove = function (key, value) {\n        if (util.isUndefined(value)) {\n            var v = this.dict.remove(key);\n            return !util.isUndefined(v);\n        }\n        var array = this.dict.getValue(key);\n        if (!util.isUndefined(array) && arrays.remove(array, value, this.equalsF)) {\n            if (array.length === 0) {\n                this.dict.remove(key);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    MultiDictionary.prototype.keys = function () {\n        return this.dict.keys();\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    MultiDictionary.prototype.values = function () {\n        var values = this.dict.values();\n        var array = [];\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var v = values_1[_i];\n            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n                var w = v_1[_a];\n                array.push(w);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */\n    MultiDictionary.prototype.containsKey = function (key) {\n        return this.dict.containsKey(key);\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     */\n    MultiDictionary.prototype.clear = function () {\n        this.dict.clear();\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    MultiDictionary.prototype.size = function () {\n        return this.dict.size();\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    MultiDictionary.prototype.isEmpty = function () {\n        return this.dict.isEmpty();\n    };\n    return MultiDictionary;\n}()); // end of multi dictionary\nexports.default = MultiDictionary;\n//# sourceMappingURL=MultiDictionary.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dictionary_1 = require(\"./Dictionary\");\nvar util = require(\"./util\");\n/**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */\nvar LinkedDictionaryPair = /** @class */ (function () {\n    function LinkedDictionaryPair(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    LinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return LinkedDictionaryPair;\n}());\n/**\n * The head and tail elements of the list have null key and value properties but they\n * usually link to normal nodes.\n */\nvar HeadOrTailLinkedDictionaryPair = /** @class */ (function () {\n    function HeadOrTailLinkedDictionaryPair() {\n        this.key = null;\n        this.value = null;\n    }\n    HeadOrTailLinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return HeadOrTailLinkedDictionaryPair;\n}());\nfunction isHeadOrTailLinkedDictionaryPair(p) {\n    return p.next === null;\n}\nvar LinkedDictionary = /** @class */ (function (_super) {\n    __extends(LinkedDictionary, _super);\n    function LinkedDictionary(toStrFunction) {\n        var _this = _super.call(this, toStrFunction) || this;\n        _this.head = new HeadOrTailLinkedDictionaryPair();\n        _this.tail = new HeadOrTailLinkedDictionaryPair();\n        _this.head.next = _this.tail;\n        _this.tail.prev = _this.head;\n        return _this;\n    }\n    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */\n    LinkedDictionary.prototype.appendToTail = function (entry) {\n        var lastNode = this.tail.prev;\n        lastNode.next = entry;\n        entry.prev = lastNode;\n        entry.next = this.tail;\n        this.tail.prev = entry;\n    };\n    /**\n     * Retrieves a linked dictionary from the table internally\n     */\n    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n        if (util.isUndefined(key)) {\n            return undefined;\n        }\n        var k = '$' + this.toStr(key);\n        var pair = (this.table[k]);\n        return pair;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    LinkedDictionary.prototype.getValue = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    LinkedDictionary.prototype.remove = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            _super.prototype.remove.call(this, key); // This will remove it from the table\n            pair.unlink(); // This will unlink it from the chain\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n    * Removes all mappings from this LinkedDictionary.\n    * @this {collections.LinkedDictionary}\n    */\n    LinkedDictionary.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    };\n    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */\n    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n        var k = '$' + this.toStr(newPair.key);\n        // set the new Pair's links to existingPair's links\n        newPair.next = oldPair.next;\n        newPair.prev = oldPair.prev;\n        // Delete Existing Pair from the table, unlink it from chain.\n        // As a result, the nElements gets decremented by this operation\n        this.remove(oldPair.key);\n        // Link new Pair in place of where oldPair was,\n        // by pointing the old pair's neighbors to it.\n        newPair.prev.next = newPair;\n        newPair.next.prev = newPair;\n        this.table[k] = newPair;\n        // To make up for the fact that the number of elements was decremented,\n        // We need to increase it by one.\n        ++this.nElements;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    LinkedDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var existingPair = this.getLinkedDictionaryPair(key);\n        var newPair = new LinkedDictionaryPair(key, value);\n        var k = '$' + this.toStr(key);\n        // If there is already an element for that key, we\n        // keep it's place in the LinkedList\n        if (!util.isUndefined(existingPair)) {\n            this.replace(existingPair, newPair);\n            return existingPair.value;\n        }\n        else {\n            this.appendToTail(newPair);\n            this.table[k] = newPair;\n            ++this.nElements;\n            return undefined;\n        }\n    };\n    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.keys = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(key);\n        });\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.values = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(value);\n        });\n        return array;\n    };\n    /**\n    * Executes the provided function once for each key-value pair\n    * present in this LinkedDictionary. It is done in the order of insertion\n    * into the LinkedDictionary\n    * @param {function(Object,Object):*} callback function to execute, it is\n    * invoked with two arguments: key and value. To break the iteration you can\n    * optionally return false.\n    */\n    LinkedDictionary.prototype.forEach = function (callback) {\n        var crawlNode = this.head.next;\n        while (!isHeadOrTailLinkedDictionaryPair(crawlNode)) {\n            var ret = callback(crawlNode.key, crawlNode.value);\n            if (ret === false) {\n                return;\n            }\n            crawlNode = crawlNode.next;\n        }\n    };\n    return LinkedDictionary;\n}(Dictionary_1.default)); // End of LinkedDictionary\nexports.default = LinkedDictionary;\n// /**\n//  * Returns true if this dictionary is equal to the given dictionary.\n//  * Two dictionaries are equal if they contain the same mappings.\n//  * @param {collections.Dictionary} other the other dictionary.\n//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n//  * function used to check if two values are equal.\n//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n//  */\n// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n// \tif(!(other instanceof collections.Dictionary)){\n// \t\treturn false;\n// \t}\n// \tif(this.size() !== other.size()){\n// \t\treturn false;\n// \t}\n// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n// }\n//# sourceMappingURL=LinkedDictionary.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BSTreeKV_1 = require(\"./BSTreeKV\");\n/**\n * Special-case of the binary search tree in which the search key is equal to the element type.\n * This definition is suitable when the element type can not be split between what defines its order\n * and what does not (eg. primitive types as opposed to indexed records).\n *\n * The table below shows some use-case examples for both interfaces:\n *\n *           element type              |  most suitable interface\n * ------------------------------------|----------------------------\n *    number                           |  BSTree<number>\n *    string                           |  BSTree<string>\n * { order: number, data: string }     |  BSTreeKV<{order: number}, {order: number, data: string}>\n *\n * @see BSTreeKV\n */\nvar BSTree = /** @class */ (function (_super) {\n    __extends(BSTree, _super);\n    function BSTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return BSTree;\n}(BSTreeKV_1.default));\nexports.default = BSTree;\n//# sourceMappingURL=BSTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar Set_1 = require(\"./Set\");\nvar Bag = /** @class */ (function () {\n    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Bag(toStrFunction) {\n        this.toStrF = toStrFunction || util.defaultToString;\n        this.dictionary = new Dictionary_1.default(this.toStrF);\n        this.nElements = 0;\n    }\n    /**\n    * Adds nCopies of the specified object to this bag.\n    * @param {Object} element element to add.\n    * @param {number=} nCopies the number of copies to add, if this argument is\n    * undefined 1 copy is added.\n    * @return {boolean} true unless element is undefined.\n    */\n    Bag.prototype.add = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            var node = {\n                value: element,\n                copies: nCopies\n            };\n            this.dictionary.setValue(element, node);\n        }\n        else {\n            this.dictionary.getValue(element).copies += nCopies;\n        }\n        this.nElements += nCopies;\n        return true;\n    };\n    /**\n    * Counts the number of copies of the specified object in this bag.\n    * @param {Object} element the object to search for..\n    * @return {number} the number of copies of the object, 0 if not found\n    */\n    Bag.prototype.count = function (element) {\n        if (!this.contains(element)) {\n            return 0;\n        }\n        else {\n            return this.dictionary.getValue(element).copies;\n        }\n    };\n    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */\n    Bag.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n    * Removes nCopies of the specified object to this bag.\n    * If the number of copies to remove is greater than the actual number\n    * of copies in the Bag, all copies are removed.\n    * @param {Object} element element to remove.\n    * @param {number=} nCopies the number of copies to remove, if this argument is\n    * undefined 1 copy is removed.\n    * @return {boolean} true if at least 1 element was removed.\n    */\n    Bag.prototype.remove = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            var node = this.dictionary.getValue(element);\n            if (nCopies > node.copies) {\n                this.nElements -= node.copies;\n            }\n            else {\n                this.nElements -= nCopies;\n            }\n            node.copies -= nCopies;\n            if (node.copies <= 0) {\n                this.dictionary.remove(element);\n            }\n            return true;\n        }\n    };\n    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */\n    Bag.prototype.toArray = function () {\n        var a = [];\n        var values = this.dictionary.values();\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var node = values_1[_i];\n            var element = node.value;\n            var copies = node.copies;\n            for (var j = 0; j < copies; j++) {\n                a.push(element);\n            }\n        }\n        return a;\n    };\n    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */\n    Bag.prototype.toSet = function () {\n        var toret = new Set_1.default(this.toStrF);\n        var elements = this.dictionary.values();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var ele = elements_1[_i];\n            var value = ele.value;\n            toret.add(value);\n        }\n        return toret;\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Bag.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            var value = v.value;\n            var copies = v.copies;\n            for (var i = 0; i < copies; i++) {\n                if (callback(value) === false) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    };\n    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */\n    Bag.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */\n    Bag.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Removes all of the elements from this bag.\n     */\n    Bag.prototype.clear = function () {\n        this.nElements = 0;\n        this.dictionary.clear();\n    };\n    return Bag;\n}()); // End of bag\nexports.default = Bag;\n//# sourceMappingURL=Bag.js.map","import {Quadratic, } from \"./Quadratic\";\n\n/* \n * CORE\n */\n//missing displacement, get velocity\nexport const Kinematic1 = (v0:number) => (acc:number) => (t:number) =>{\n    const v = v0 + acc * t;\n    return v;\n}\n\n//missing acceleration, get displacement\nexport const Kinematic2 = (v0:number) => (v:number) => (t:number) => {\n    const dx = ((v + v0)/2) * t;\n    return dx;\n}\n\n//missing final velocity, get displacement\nexport const Kinematic3 = (v0:number) => (acc:number) => (t:number) => {\n    const dx = ((.5 * acc) * (t * t)) + (v0 * t);\n    return dx;\n}\n\n//missing time, get final velocity\nexport const Kinematic4 = (v0:number) => (acc:number) => (dx:number) => {\n    const vSquared = (v0 * v0) + 2 * acc * dx;\n    return Math.sqrt(vSquared);\n}\n\n/*\n * HELPERS (building off core)\n */\n\n//missing final velocity (K3), get time\n//note - it's quadratic and returns the positive root \nexport const Kinematic5 = (v0:number) => (acc:number) => (dx:number) => {\n    const [root1, root2] = Quadratic (.5 * acc) (v0) (-dx);\n\n    return Math.max(root1, root2);\n}\n\n//missing time (K4), get displacement\nexport const Kinematic6 = (v0:number) => (acc:number) => (v:number) => {\n    return ((v0 * v0) - (v * v))/(2 * acc) * -1;\n}\n\n//missing displacement (K1), get time\nexport const Kinematic7 = (v0: number) => (acc:number) => (v:number) => {\n    return v / (v0 + acc); \n}\n","(function(f){\n\n  'use strict';\n\n  /*istanbul ignore next*/\n  if(typeof module === 'object' && typeof module.exports === 'object'){\n    module.exports = f(require('sanctuary-type-classes'), require('sanctuary-type-identifiers'));\n  }else{\n    self.concurrify = f(self.sanctuaryTypeClasses, self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(Z, type){\n\n  'use strict';\n\n  var $alt = 'fantasy-land/alt';\n  var $ap = 'fantasy-land/ap';\n  var $map = 'fantasy-land/map';\n  var $of = 'fantasy-land/of';\n  var $zero = 'fantasy-land/zero';\n  var $$type = '@@type';\n  var ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\n  function isFunction(f){\n    return typeof f === 'function';\n  }\n\n  function isBinary(f){\n    return f.length >= 2;\n  }\n\n  function isApplicativeRepr(Repr){\n    try{\n      return Z.Applicative.test(Z.of(Repr));\n    }catch(_){\n      return false;\n    }\n  }\n\n  function invalidArgument(it, at, expected, actual){\n    throw new TypeError(\n      it\n      + ' expects its '\n      + ordinal[at]\n      + ' argument to '\n      + expected\n      + '\\n  Actual: '\n      + Z.toString(actual)\n    );\n  }\n\n  function invalidContext(it, actual, an){\n    throw new TypeError(\n      it + ' was invoked outside the context of a ' + an + '. \\n  Called on: ' + Z.toString(actual)\n    );\n  }\n\n  //       getTypeIdentifier :: TypeRepresentative -> TypeIdentifier\n  function getTypeIdentifier(Repr){\n    return Repr[$$type] || Repr.name || 'Anonymous';\n  }\n\n  //       generateTypeIdentifier :: TypeIdentifier -> TypeIdentifier\n  function generateTypeIdentifier(identifier){\n    var o = type.parse(identifier);\n    return (o.namespace || 'concurrify') + '/Concurrent' + o.name + '@' + o.version;\n  }\n\n  //concurrify :: Applicative m\n  //           => (TypeRep m, m a, (m a, m a) -> m a, (m a, m (a -> b)) -> m b)\n  //           -> Concurrently m\n  return function concurrify(Repr, zero, alt, ap){\n\n    var INNERTYPE = getTypeIdentifier(Repr);\n    var OUTERTYPE = generateTypeIdentifier(INNERTYPE);\n    var INNERNAME = type.parse(INNERTYPE).name;\n    var OUTERNAME = type.parse(OUTERTYPE).name;\n\n    function Concurrently(sequential){\n      this.sequential = sequential;\n    }\n\n    function isInner(x){\n      return x instanceof Repr\n      || (Boolean(x) && x.constructor === Repr)\n      || type(x) === Repr[$$type];\n    }\n\n    function isOuter(x){\n      return x instanceof Concurrently\n      || (Boolean(x) && x.constructor === Concurrently)\n      || type(x) === OUTERTYPE;\n    }\n\n    function construct(x){\n      if(!isInner(x)) invalidArgument(OUTERNAME, 0, 'be of type \"' + INNERNAME + '\"', x);\n      return new Concurrently(x);\n    }\n\n    if(!isApplicativeRepr(Repr)) invalidArgument('concurrify', 0, 'represent an Applicative', Repr);\n    if(!isInner(zero)) invalidArgument('concurrify', 1, 'be of type \"' + INNERNAME + '\"', zero);\n    if(!isFunction(alt)) invalidArgument('concurrify', 2, 'be a function', alt);\n    if(!isBinary(alt)) invalidArgument('concurrify', 2, 'be binary', alt);\n    if(!isFunction(ap)) invalidArgument('concurrify', 3, 'be a function', ap);\n    if(!isBinary(ap)) invalidArgument('concurrify', 3, 'be binary', ap);\n\n    var proto = Concurrently.prototype = construct.prototype = {constructor: construct};\n\n    construct[$$type] = OUTERTYPE;\n\n    var mzero = new Concurrently(zero);\n\n    construct[$zero] = function Concurrently$zero(){\n      return mzero;\n    };\n\n    construct[$of] = function Concurrently$of(value){\n      return new Concurrently(Z.of(Repr, value));\n    };\n\n    proto[$map] = function Concurrently$map(mapper){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#map', this, OUTERNAME);\n      if(!isFunction(mapper)) invalidArgument(OUTERNAME + '#map', 0, 'be a function', mapper);\n      return new Concurrently(Z.map(mapper, this.sequential));\n    };\n\n    proto[$ap] = function Concurrently$ap(m){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#ap', this, OUTERNAME);\n      if(!isOuter(m)) invalidArgument(OUTERNAME + '#ap', 0, 'be a ' + OUTERNAME, m);\n      return new Concurrently(ap(this.sequential, m.sequential));\n    };\n\n    proto[$alt] = function Concurrently$alt(m){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#alt', this, OUTERNAME);\n      if(!isOuter(m)) invalidArgument(OUTERNAME + '#alt', 0, 'be a ' + OUTERNAME, m);\n      return new Concurrently(alt(this.sequential, m.sequential));\n    };\n\n    proto.toString = function Concurrently$toString(){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#toString', this, OUTERNAME);\n      return OUTERNAME + '(' + Z.toString(this.sequential) + ')';\n    };\n\n    return construct;\n\n  };\n\n}));\n","'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array) {\n  this._head = 0;\n  this._tail = 0;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peakAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n\n  this._list.length *= 2;\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n\nmodule.exports = Denque;\n","(function(f) {\n\n  'use strict';\n\n  /*istanbul ignore next*/\n  if(typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  }else{\n    self.inspectf = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  function checkn(n) {\n    if(typeof n !== 'number') {\n      throw new TypeError(\n        'inspectf expects its first argument to be a number'\n      );\n    }\n  }\n\n  function checkf(f) {\n    if(typeof f !== 'function') {\n      throw new TypeError(\n        'inspectf expects its second argument to be a function'\n      );\n    }\n  }\n\n  var RSPACE = /^ */;\n  var RCODE = /\\s*[^\\s]/;\n  var RTABS = /\\t/g;\n  var REOL = /\\n\\r?/;\n\n  function isCode(line) {\n    return RCODE.test(line);\n  }\n\n  function getPadding(line) {\n    return line.match(RSPACE)[0].length;\n  }\n\n  function guessIndentation(lines) {\n    var filtered = lines.filter(isCode);\n    var paddings = filtered.map(getPadding);\n    var depth = paddings.reduce(Math.min, Infinity);\n    var tabsize = paddings\n    .map(function(x) { return x - depth; })\n    .find(function(x) { return x > 1; }) || 2;\n    return {depth: depth, tabsize: tabsize};\n  }\n\n  function pad(n) {\n    return (new Array(n + 1)).join(' ');\n  }\n\n  function show(f, indentation) {\n    return f.toString().replace(RTABS, indentation);\n  }\n\n  function toLines(s) {\n    return s.split(REOL);\n  }\n\n  function fixIndentation(lines, indentation) {\n    var info = guessIndentation(lines.slice(1));\n    var RPAD = new RegExp(pad(info.tabsize), 'g');\n    return lines.map(function(line) {\n      return line.slice(Math.min(info.depth, getPadding(line)))\n      .replace(RPAD, '\\t').replace(RTABS, indentation);\n    }).join('\\n');\n  }\n\n  return function inspectf(n, f) {\n    checkn(n);\n\n    if(arguments.length < 2) {\n      return function inspectf$partial(f) { return inspectf(n, f); };\n    }\n\n    checkf(f);\n    if(f.toString !== Function.prototype.toString) { return f.toString(); }\n    var i = pad(n), shown = show(f, i), lines = toLines(shown, i);\n    if(lines.length < 2) { return shown; }\n    return fixIndentation(lines, i);\n  };\n\n}));\n","import {Future} from \"fluture\";\nimport {WorkerCommands} from \"types/Worker-Types\";\n\nexport const MESSAGE = \"message\";\n\n/*\n * these loaders resolve _after_ communication is established\n */\n//Loaded by main thread \nexport const loadWorker = (worker:any) => Future<any, Worker>((reject, resolve) => {\n    const onInitial = (e: MessageEvent) => {\n        if(e.data.cmd === WorkerCommands.READY) {\n            worker.removeEventListener(MESSAGE, onInitial);\n            resolve(worker);\n        }\n    }\n    worker.addEventListener(MESSAGE, onInitial);\n\n    worker.postMessage({ cmd: WorkerCommands.INIT});\n});\n\n//Loaded by worker thread\nexport const initWorker = () => Future<any, any>((reject, resolve) => {\n\n    const onInitial = (e: MessageEvent) => {\n        console.log(e);\n\n        if(e.data.cmd === WorkerCommands.INIT) {\n            (self as any).removeEventListener(MESSAGE, onInitial);\n            (self as any).postMessage({cmd: WorkerCommands.READY});\n            resolve(self);\n        }\n    }\n    (self as any).addEventListener(MESSAGE, onInitial);\n});\n\n","\nexport const getCompileFlags = () => {\n    const buildMode = process.env['NODE_ENV'];\n    const buildVersion =  process.env['BUILD_VERSION'];\n    const isProduction = buildMode === \"production\" ? true : false;\n\n    return {buildMode, buildVersion, isProduction}\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","import {Maybe} from \"./Sanctuary-Typings\";\n\nimport {create, env} from 'sanctuary';\n\nconst checkTypes = false; //process.env.BUILD_TYPE !== 'build';\n\nexport const S = create({checkTypes, env});\n\nconst mapMaybe = <A>(f:((a:A) => any)) => (m:Maybe<A>):Maybe<A> => S.map(f) (m);","export * from \"./Sanctuary-Typings\";\nexport * from \"./Sanctuary-Instance\";","import {initWorker, MESSAGE, S} from \"utils/Utils\";\nimport {sWorldUpdate} from \"frp/World-Sinks-FRP\";\nimport {createWorldFrp} from \"frp/World-FRP\";\nimport {WorkerCommands} from \"types/Worker-Types\";\nimport {sBallStart_Sink, sBallStop_Sink} from \"frp/Ball-Sinks-FRP\";\n\n\ninitWorker().fork(\n    console.error,\n    worker => {\n        worker.addEventListener(MESSAGE, (e:MessageEvent) => {\n            switch(e.data.cmd) {\n                case WorkerCommands.TICK:\n                    sWorldUpdate.send({frameTs: e.data.frameTs, camera: e.data.camera});\n                    break;\n                case WorkerCommands.WORLD_START:\n                    createWorldFrp(e.data.scenes)\n                        .listen(world => {\n                           worker.postMessage({cmd: WorkerCommands.RENDER, scenes: world.scenes}); \n                        })\n                    break;\n                case WorkerCommands.BALL_START:\n                    sBallStart_Sink.send(null);\n                    break;\n\n                case WorkerCommands.BALL_STOP:\n                    sBallStop_Sink.send(null);\n                    break;\n            }\n        });\n    }\n);\n\n\n"],"sourceRoot":""}